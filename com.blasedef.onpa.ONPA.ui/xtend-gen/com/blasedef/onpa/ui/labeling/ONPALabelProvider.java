/**
 * generated by Xtext
 */
package com.blasedef.onpa.ui.labeling;

import com.blasedef.onpa.oNPA.Constant;
import com.blasedef.onpa.oNPA.Div;
import com.blasedef.onpa.oNPA.Expression;
import com.blasedef.onpa.oNPA.Mul;
import com.blasedef.onpa.oNPA.Plu;
import com.blasedef.onpa.oNPA.Rate;
import com.blasedef.onpa.oNPA.Sub;
import com.google.common.base.Objects;
import com.google.inject.Inject;
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider;

/**
 * Provides labels for a EObjects.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#labelProvider
 */
@SuppressWarnings("all")
public class ONPALabelProvider extends DefaultEObjectLabelProvider {
  @Inject
  public ONPALabelProvider(final AdapterFactoryLabelProvider delegate) {
    super(delegate);
  }
  
  public String text(final Plu plu) {
    Expression _left = plu.getLeft();
    CharSequence _compile = this.compile(_left);
    String _plus = (_compile + " + ");
    Expression _right = plu.getRight();
    CharSequence _compile_1 = this.compile(_right);
    return (_plus + _compile_1);
  }
  
  public String text(final Sub sub) {
    Expression _left = sub.getLeft();
    CharSequence _compile = this.compile(_left);
    String _plus = (_compile + " - ");
    Expression _right = sub.getRight();
    CharSequence _compile_1 = this.compile(_right);
    return (_plus + _compile_1);
  }
  
  public String text(final Mul mul) {
    Expression _left = mul.getLeft();
    CharSequence _compile = this.compile(_left);
    String _plus = (_compile + " * ");
    Expression _right = mul.getRight();
    CharSequence _compile_1 = this.compile(_right);
    return (_plus + _compile_1);
  }
  
  public String text(final Div div) {
    Expression _left = div.getLeft();
    CharSequence _compile = this.compile(_left);
    String _plus = (_compile + " / ");
    Expression _right = div.getRight();
    CharSequence _compile_1 = this.compile(_right);
    return (_plus + _compile_1);
  }
  
  public String text(final Rate rate) {
    String _xifexpression = null;
    String _name = rate.getName();
    boolean _notEquals = (!Objects.equal(_name, null));
    if (_notEquals) {
      String _xblockexpression = null;
      {
        final Expression e = rate.getValue();
        String _name_1 = rate.getName();
        CharSequence _switchResult = null;
        boolean _matched = false;
        if (!_matched) {
          if (e instanceof Constant) {
            _matched=true;
            StringConcatenation _builder = new StringConcatenation();
            _builder.append(" ");
            _builder.append("= ");
            double _value = ((Constant)e).getValue();
            _builder.append(_value, " ");
            _switchResult = _builder;
          }
        }
        if (!_matched) {
          _switchResult = " = ";
        }
        _xblockexpression = (_name_1 + _switchResult);
      }
      _xifexpression = _xblockexpression;
    }
    return _xifexpression;
  }
  
  public CharSequence compile(final Expression e) {
    CharSequence _switchResult = null;
    boolean _matched = false;
    if (!_matched) {
      if (e instanceof Sub) {
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("(");
        Expression _left = ((Sub)e).getLeft();
        CharSequence _compile = this.compile(_left);
        _builder.append(_compile, "");
        _builder.append(" - ");
        Expression _right = ((Sub)e).getRight();
        CharSequence _compile_1 = this.compile(_right);
        _builder.append(_compile_1, "");
        _builder.append(")");
        _switchResult = _builder;
      }
    }
    if (!_matched) {
      if (e instanceof Plu) {
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("(");
        Expression _left = ((Plu)e).getLeft();
        CharSequence _compile = this.compile(_left);
        _builder.append(_compile, "");
        _builder.append(" + ");
        Expression _right = ((Plu)e).getRight();
        CharSequence _compile_1 = this.compile(_right);
        _builder.append(_compile_1, "");
        _builder.append(")");
        _switchResult = _builder;
      }
    }
    if (!_matched) {
      if (e instanceof Mul) {
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("(");
        Expression _left = ((Mul)e).getLeft();
        CharSequence _compile = this.compile(_left);
        _builder.append(_compile, "");
        _builder.append(" * ");
        Expression _right = ((Mul)e).getRight();
        CharSequence _compile_1 = this.compile(_right);
        _builder.append(_compile_1, "");
        _builder.append(")");
        _switchResult = _builder;
      }
    }
    if (!_matched) {
      if (e instanceof Div) {
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("(");
        Expression _left = ((Div)e).getLeft();
        CharSequence _compile = this.compile(_left);
        _builder.append(_compile, "");
        _builder.append(" / ");
        Expression _right = ((Div)e).getRight();
        CharSequence _compile_1 = this.compile(_right);
        _builder.append(_compile_1, "");
        _builder.append(")");
        _switchResult = _builder;
      }
    }
    if (!_matched) {
      if (e instanceof Rate) {
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        Rate _rate = ((Rate)e).getRate();
        String _name = _rate.getName();
        _builder.append(_name, "");
        _switchResult = _builder;
      }
    }
    if (!_matched) {
      if (e instanceof Constant) {
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        double _value = ((Constant)e).getValue();
        _builder.append(_value, "");
        _switchResult = _builder;
      }
    }
    return _switchResult;
  }
}
