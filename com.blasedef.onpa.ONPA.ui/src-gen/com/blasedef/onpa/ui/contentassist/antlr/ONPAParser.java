/*
* generated by Xtext
*/
package com.blasedef.onpa.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import com.blasedef.onpa.services.ONPAGrammarAccess;

public class ONPAParser extends AbstractContentAssistParser {
	
	@Inject
	private ONPAGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected com.blasedef.onpa.ui.contentassist.antlr.internal.InternalONPAParser createParser() {
		com.blasedef.onpa.ui.contentassist.antlr.internal.InternalONPAParser result = new com.blasedef.onpa.ui.contentassist.antlr.internal.InternalONPAParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getActionAccess().getAlternatives_0(), "rule__Action__Alternatives_0");
					put(grammarAccess.getEqualityAccess().getOpAlternatives_1_1_0(), "rule__Equality__OpAlternatives_1_1_0");
					put(grammarAccess.getComparisonAccess().getOpAlternatives_1_1_0(), "rule__Comparison__OpAlternatives_1_1_0");
					put(grammarAccess.getPrimaryAccess().getAlternatives(), "rule__Primary__Alternatives");
					put(grammarAccess.getAtomicAccess().getAlternatives(), "rule__Atomic__Alternatives");
					put(grammarAccess.getAtomicAccess().getValueAlternatives_1_1_0(), "rule__Atomic__ValueAlternatives_1_1_0");
					put(grammarAccess.getDoubleAccess().getAlternatives_1_2(), "rule__Double__Alternatives_1_2");
					put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
					put(grammarAccess.getActionAccess().getGroup(), "rule__Action__Group__0");
					put(grammarAccess.getBroadcastOutAccess().getGroup(), "rule__BroadcastOut__Group__0");
					put(grammarAccess.getBroadcastInAccess().getGroup(), "rule__BroadcastIn__Group__0");
					put(grammarAccess.getUnicastOutAccess().getGroup(), "rule__UnicastOut__Group__0");
					put(grammarAccess.getUnicastInAccess().getGroup(), "rule__UnicastIn__Group__0");
					put(grammarAccess.getPredicateAccess().getGroup(), "rule__Predicate__Group__0");
					put(grammarAccess.getUpdatesAccess().getGroup(), "rule__Updates__Group__0");
					put(grammarAccess.getUpdateExpressionAccess().getGroup(), "rule__UpdateExpression__Group__0");
					put(grammarAccess.getValuesAccess().getGroup(), "rule__Values__Group__0");
					put(grammarAccess.getValuePrimaryAccess().getGroup(), "rule__ValuePrimary__Group__0");
					put(grammarAccess.getEvaluationsAccess().getGroup(), "rule__Evaluations__Group__0");
					put(grammarAccess.getEvaluationAccess().getGroup(), "rule__Evaluation__Group__0");
					put(grammarAccess.getStoreAccess().getGroup(), "rule__Store__Group__0");
					put(grammarAccess.getAttributeValueAccess().getGroup(), "rule__AttributeValue__Group__0");
					put(grammarAccess.getOrAccess().getGroup(), "rule__Or__Group__0");
					put(grammarAccess.getOrAccess().getGroup_1(), "rule__Or__Group_1__0");
					put(grammarAccess.getAndAccess().getGroup(), "rule__And__Group__0");
					put(grammarAccess.getAndAccess().getGroup_1(), "rule__And__Group_1__0");
					put(grammarAccess.getEqualityAccess().getGroup(), "rule__Equality__Group__0");
					put(grammarAccess.getEqualityAccess().getGroup_1(), "rule__Equality__Group_1__0");
					put(grammarAccess.getComparisonAccess().getGroup(), "rule__Comparison__Group__0");
					put(grammarAccess.getComparisonAccess().getGroup_1(), "rule__Comparison__Group_1__0");
					put(grammarAccess.getSubtractionAccess().getGroup(), "rule__Subtraction__Group__0");
					put(grammarAccess.getSubtractionAccess().getGroup_1(), "rule__Subtraction__Group_1__0");
					put(grammarAccess.getAdditionAccess().getGroup(), "rule__Addition__Group__0");
					put(grammarAccess.getAdditionAccess().getGroup_1(), "rule__Addition__Group_1__0");
					put(grammarAccess.getMultiplicationAccess().getGroup(), "rule__Multiplication__Group__0");
					put(grammarAccess.getMultiplicationAccess().getGroup_1(), "rule__Multiplication__Group_1__0");
					put(grammarAccess.getDivisionAccess().getGroup(), "rule__Division__Group__0");
					put(grammarAccess.getDivisionAccess().getGroup_1(), "rule__Division__Group_1__0");
					put(grammarAccess.getPrimaryAccess().getGroup_0(), "rule__Primary__Group_0__0");
					put(grammarAccess.getPrimaryAccess().getGroup_1(), "rule__Primary__Group_1__0");
					put(grammarAccess.getAtomicAccess().getGroup_0(), "rule__Atomic__Group_0__0");
					put(grammarAccess.getAtomicAccess().getGroup_1(), "rule__Atomic__Group_1__0");
					put(grammarAccess.getAtomicAccess().getGroup_2(), "rule__Atomic__Group_2__0");
					put(grammarAccess.getAtomicAccess().getGroup_3(), "rule__Atomic__Group_3__0");
					put(grammarAccess.getDoubleAccess().getGroup(), "rule__Double__Group__0");
					put(grammarAccess.getDoubleAccess().getGroup_1(), "rule__Double__Group_1__0");
					put(grammarAccess.getDoubleAccess().getGroup_1_2_1(), "rule__Double__Group_1_2_1__0");
					put(grammarAccess.getModelAccess().getStoresAssignment_0(), "rule__Model__StoresAssignment_0");
					put(grammarAccess.getModelAccess().getActionsAssignment_1(), "rule__Model__ActionsAssignment_1");
					put(grammarAccess.getBroadcastOutAccess().getNameAssignment_0(), "rule__BroadcastOut__NameAssignment_0");
					put(grammarAccess.getBroadcastOutAccess().getPredicateAssignment_2(), "rule__BroadcastOut__PredicateAssignment_2");
					put(grammarAccess.getBroadcastOutAccess().getEvaluationAssignment_3(), "rule__BroadcastOut__EvaluationAssignment_3");
					put(grammarAccess.getBroadcastOutAccess().getUpdateAssignment_4(), "rule__BroadcastOut__UpdateAssignment_4");
					put(grammarAccess.getBroadcastInAccess().getNameAssignment_0(), "rule__BroadcastIn__NameAssignment_0");
					put(grammarAccess.getBroadcastInAccess().getPredicateAssignment_2(), "rule__BroadcastIn__PredicateAssignment_2");
					put(grammarAccess.getBroadcastInAccess().getValuesAssignment_3(), "rule__BroadcastIn__ValuesAssignment_3");
					put(grammarAccess.getBroadcastInAccess().getUpdateAssignment_4(), "rule__BroadcastIn__UpdateAssignment_4");
					put(grammarAccess.getUnicastOutAccess().getNameAssignment_0(), "rule__UnicastOut__NameAssignment_0");
					put(grammarAccess.getUnicastOutAccess().getPredicateAssignment_1(), "rule__UnicastOut__PredicateAssignment_1");
					put(grammarAccess.getUnicastOutAccess().getEvaluationAssignment_2(), "rule__UnicastOut__EvaluationAssignment_2");
					put(grammarAccess.getUnicastOutAccess().getUpdateAssignment_3(), "rule__UnicastOut__UpdateAssignment_3");
					put(grammarAccess.getUnicastInAccess().getNameAssignment_0(), "rule__UnicastIn__NameAssignment_0");
					put(grammarAccess.getUnicastInAccess().getPredicateAssignment_1(), "rule__UnicastIn__PredicateAssignment_1");
					put(grammarAccess.getUnicastInAccess().getValuesAssignment_2(), "rule__UnicastIn__ValuesAssignment_2");
					put(grammarAccess.getUnicastInAccess().getUpdateAssignment_3(), "rule__UnicastIn__UpdateAssignment_3");
					put(grammarAccess.getUpdatesAccess().getUpdateExpressionsAssignment_2(), "rule__Updates__UpdateExpressionsAssignment_2");
					put(grammarAccess.getUpdateExpressionAccess().getNameAssignment_0(), "rule__UpdateExpression__NameAssignment_0");
					put(grammarAccess.getUpdateExpressionAccess().getExpressionAssignment_2(), "rule__UpdateExpression__ExpressionAssignment_2");
					put(grammarAccess.getValuesAccess().getValuesAssignment_2(), "rule__Values__ValuesAssignment_2");
					put(grammarAccess.getValuePrimaryAccess().getNameAssignment_0(), "rule__ValuePrimary__NameAssignment_0");
					put(grammarAccess.getEvaluationsAccess().getEvaluationsAssignment_2(), "rule__Evaluations__EvaluationsAssignment_2");
					put(grammarAccess.getEvaluationAccess().getNameAssignment_0(), "rule__Evaluation__NameAssignment_0");
					put(grammarAccess.getEvaluationAccess().getValueAssignment_2(), "rule__Evaluation__ValueAssignment_2");
					put(grammarAccess.getAttributeValueAccess().getNameAssignment_0(), "rule__AttributeValue__NameAssignment_0");
					put(grammarAccess.getAttributeValueAccess().getValueAssignment_2(), "rule__AttributeValue__ValueAssignment_2");
					put(grammarAccess.getOrAccess().getRightAssignment_1_2(), "rule__Or__RightAssignment_1_2");
					put(grammarAccess.getAndAccess().getRightAssignment_1_2(), "rule__And__RightAssignment_1_2");
					put(grammarAccess.getEqualityAccess().getOpAssignment_1_1(), "rule__Equality__OpAssignment_1_1");
					put(grammarAccess.getEqualityAccess().getRightAssignment_1_2(), "rule__Equality__RightAssignment_1_2");
					put(grammarAccess.getComparisonAccess().getOpAssignment_1_1(), "rule__Comparison__OpAssignment_1_1");
					put(grammarAccess.getComparisonAccess().getRightAssignment_1_2(), "rule__Comparison__RightAssignment_1_2");
					put(grammarAccess.getSubtractionAccess().getRightAssignment_1_2(), "rule__Subtraction__RightAssignment_1_2");
					put(grammarAccess.getAdditionAccess().getRightAssignment_1_2(), "rule__Addition__RightAssignment_1_2");
					put(grammarAccess.getMultiplicationAccess().getRightAssignment_1_2(), "rule__Multiplication__RightAssignment_1_2");
					put(grammarAccess.getDivisionAccess().getRightAssignment_1_2(), "rule__Division__RightAssignment_1_2");
					put(grammarAccess.getPrimaryAccess().getExpressionAssignment_1_2(), "rule__Primary__ExpressionAssignment_1_2");
					put(grammarAccess.getAtomicAccess().getValueAssignment_0_1(), "rule__Atomic__ValueAssignment_0_1");
					put(grammarAccess.getAtomicAccess().getValueAssignment_1_1(), "rule__Atomic__ValueAssignment_1_1");
					put(grammarAccess.getAtomicAccess().getValueAssignment_2_1(), "rule__Atomic__ValueAssignment_2_1");
					put(grammarAccess.getAtomicAccess().getValueAssignment_3_2(), "rule__Atomic__ValueAssignment_3_2");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			com.blasedef.onpa.ui.contentassist.antlr.internal.InternalONPAParser typedParser = (com.blasedef.onpa.ui.contentassist.antlr.internal.InternalONPAParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public ONPAGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(ONPAGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
