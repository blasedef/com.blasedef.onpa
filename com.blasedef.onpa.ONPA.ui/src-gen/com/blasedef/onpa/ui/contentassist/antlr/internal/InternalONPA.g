/*
* generated by Xtext
*/
grammar InternalONPA;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package com.blasedef.onpa.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package com.blasedef.onpa.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import com.blasedef.onpa.services.ONPAGrammarAccess;

}

@parser::members {
 
 	private ONPAGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(ONPAGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleModel
entryRuleModel 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
}
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Model
ruleModel
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModelAccess().getGroup()); }
(rule__Model__Group__0)
{ after(grammarAccess.getModelAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}



// Entry rule entryRuleTerm
entryRuleTerm 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
}
:
{ before(grammarAccess.getTermRule()); }
	 ruleTerm
{ after(grammarAccess.getTermRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Term
ruleTerm
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTermAccess().getGroup()); }
(rule__Term__Group__0)
{ after(grammarAccess.getTermAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}



// Entry rule entryRuleProcess
entryRuleProcess 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
}
:
{ before(grammarAccess.getProcessRule()); }
	 ruleProcess
{ after(grammarAccess.getProcessRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Process
ruleProcess
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getProcessAccess().getGroup()); }
(rule__Process__Group__0)
{ after(grammarAccess.getProcessAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}



// Entry rule entryRuleProcessExpression
entryRuleProcessExpression 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
}
:
{ before(grammarAccess.getProcessExpressionRule()); }
	 ruleProcessExpression
{ after(grammarAccess.getProcessExpressionRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule ProcessExpression
ruleProcessExpression
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getProcessExpressionAccess().getParallelParserRuleCall()); }
	ruleParallel
{ after(grammarAccess.getProcessExpressionAccess().getParallelParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}



// Entry rule entryRuleParallel
entryRuleParallel 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
}
:
{ before(grammarAccess.getParallelRule()); }
	 ruleParallel
{ after(grammarAccess.getParallelRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Parallel
ruleParallel
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParallelAccess().getGroup()); }
(rule__Parallel__Group__0)
{ after(grammarAccess.getParallelAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}



// Entry rule entryRuleChoice
entryRuleChoice 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
}
:
{ before(grammarAccess.getChoiceRule()); }
	 ruleChoice
{ after(grammarAccess.getChoiceRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Choice
ruleChoice
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getChoiceAccess().getGroup()); }
(rule__Choice__Group__0)
{ after(grammarAccess.getChoiceAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}



// Entry rule entryRulePrimaryProcess
entryRulePrimaryProcess 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
}
:
{ before(grammarAccess.getPrimaryProcessRule()); }
	 rulePrimaryProcess
{ after(grammarAccess.getPrimaryProcessRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule PrimaryProcess
rulePrimaryProcess
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPrimaryProcessAccess().getAlternatives()); }
(rule__PrimaryProcess__Alternatives)
{ after(grammarAccess.getPrimaryProcessAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}



// Entry rule entryRulePredicateProcess
entryRulePredicateProcess 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
}
:
{ before(grammarAccess.getPredicateProcessRule()); }
	 rulePredicateProcess
{ after(grammarAccess.getPredicateProcessRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule PredicateProcess
rulePredicateProcess
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPredicateProcessAccess().getGroup()); }
(rule__PredicateProcess__Group__0)
{ after(grammarAccess.getPredicateProcessAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}



// Entry rule entryRuleActionProcess
entryRuleActionProcess 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
}
:
{ before(grammarAccess.getActionProcessRule()); }
	 ruleActionProcess
{ after(grammarAccess.getActionProcessRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule ActionProcess
ruleActionProcess
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getActionProcessAccess().getGroup()); }
(rule__ActionProcess__Group__0)
{ after(grammarAccess.getActionProcessAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}



// Entry rule entryRuleAction
entryRuleAction 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
}
:
{ before(grammarAccess.getActionRule()); }
	 ruleAction
{ after(grammarAccess.getActionRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Action
ruleAction
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getActionAccess().getGroup()); }
(rule__Action__Group__0)
{ after(grammarAccess.getActionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}



// Entry rule entryRulePredicate
entryRulePredicate 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
}
:
{ before(grammarAccess.getPredicateRule()); }
	 rulePredicate
{ after(grammarAccess.getPredicateRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Predicate
rulePredicate
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPredicateAccess().getGroup()); }
(rule__Predicate__Group__0)
{ after(grammarAccess.getPredicateAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}



// Entry rule entryRuleEvaluations
entryRuleEvaluations 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
}
:
{ before(grammarAccess.getEvaluationsRule()); }
	 ruleEvaluations
{ after(grammarAccess.getEvaluationsRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Evaluations
ruleEvaluations
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEvaluationsAccess().getAlternatives()); }
(rule__Evaluations__Alternatives)
{ after(grammarAccess.getEvaluationsAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}



// Entry rule entryRuleUpdates
entryRuleUpdates 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
}
:
{ before(grammarAccess.getUpdatesRule()); }
	 ruleUpdates
{ after(grammarAccess.getUpdatesRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Updates
ruleUpdates
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUpdatesAccess().getGroup()); }
(rule__Updates__Group__0)
{ after(grammarAccess.getUpdatesAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}



// Entry rule entryRulePredicateExpression
entryRulePredicateExpression 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
}
:
{ before(grammarAccess.getPredicateExpressionRule()); }
	 rulePredicateExpression
{ after(grammarAccess.getPredicateExpressionRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule PredicateExpression
rulePredicateExpression
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPredicateExpressionAccess().getGroup()); }
(rule__PredicateExpression__Group__0)
{ after(grammarAccess.getPredicateExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}



// Entry rule entryRuleEvaluationExpression
entryRuleEvaluationExpression 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
}
:
{ before(grammarAccess.getEvaluationExpressionRule()); }
	 ruleEvaluationExpression
{ after(grammarAccess.getEvaluationExpressionRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule EvaluationExpression
ruleEvaluationExpression
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEvaluationExpressionAccess().getGroup()); }
(rule__EvaluationExpression__Group__0)
{ after(grammarAccess.getEvaluationExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}



// Entry rule entryRuleUpdateExpression
entryRuleUpdateExpression 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
}
:
{ before(grammarAccess.getUpdateExpressionRule()); }
	 ruleUpdateExpression
{ after(grammarAccess.getUpdateExpressionRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule UpdateExpression
ruleUpdateExpression
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUpdateExpressionAccess().getGroup()); }
(rule__UpdateExpression__Group__0)
{ after(grammarAccess.getUpdateExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}



// Entry rule entryRuleStore
entryRuleStore 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
}
:
{ before(grammarAccess.getStoreRule()); }
	 ruleStore
{ after(grammarAccess.getStoreRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Store
ruleStore
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStoreAccess().getGroup()); }
(rule__Store__Group__0)
{ after(grammarAccess.getStoreAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}



// Entry rule entryRuleExpression
entryRuleExpression 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
}
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Expression
ruleExpression
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionAccess().getOrParserRuleCall()); }
	ruleOr
{ after(grammarAccess.getExpressionAccess().getOrParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}



// Entry rule entryRuleOr
entryRuleOr 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
}
:
{ before(grammarAccess.getOrRule()); }
	 ruleOr
{ after(grammarAccess.getOrRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Or
ruleOr
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOrAccess().getGroup()); }
(rule__Or__Group__0)
{ after(grammarAccess.getOrAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}



// Entry rule entryRuleAnd
entryRuleAnd 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
}
:
{ before(grammarAccess.getAndRule()); }
	 ruleAnd
{ after(grammarAccess.getAndRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule And
ruleAnd
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAndAccess().getGroup()); }
(rule__And__Group__0)
{ after(grammarAccess.getAndAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}



// Entry rule entryRuleEquality
entryRuleEquality 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
}
:
{ before(grammarAccess.getEqualityRule()); }
	 ruleEquality
{ after(grammarAccess.getEqualityRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Equality
ruleEquality
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEqualityAccess().getGroup()); }
(rule__Equality__Group__0)
{ after(grammarAccess.getEqualityAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}



// Entry rule entryRuleComparison
entryRuleComparison 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
}
:
{ before(grammarAccess.getComparisonRule()); }
	 ruleComparison
{ after(grammarAccess.getComparisonRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Comparison
ruleComparison
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getComparisonAccess().getGroup()); }
(rule__Comparison__Group__0)
{ after(grammarAccess.getComparisonAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}



// Entry rule entryRuleSubtraction
entryRuleSubtraction 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
}
:
{ before(grammarAccess.getSubtractionRule()); }
	 ruleSubtraction
{ after(grammarAccess.getSubtractionRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Subtraction
ruleSubtraction
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSubtractionAccess().getGroup()); }
(rule__Subtraction__Group__0)
{ after(grammarAccess.getSubtractionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}



// Entry rule entryRuleAddition
entryRuleAddition 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
}
:
{ before(grammarAccess.getAdditionRule()); }
	 ruleAddition
{ after(grammarAccess.getAdditionRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Addition
ruleAddition
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAdditionAccess().getGroup()); }
(rule__Addition__Group__0)
{ after(grammarAccess.getAdditionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}



// Entry rule entryRuleMultiplication
entryRuleMultiplication 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
}
:
{ before(grammarAccess.getMultiplicationRule()); }
	 ruleMultiplication
{ after(grammarAccess.getMultiplicationRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Multiplication
ruleMultiplication
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMultiplicationAccess().getGroup()); }
(rule__Multiplication__Group__0)
{ after(grammarAccess.getMultiplicationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}



// Entry rule entryRuleDivision
entryRuleDivision 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
}
:
{ before(grammarAccess.getDivisionRule()); }
	 ruleDivision
{ after(grammarAccess.getDivisionRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Division
ruleDivision
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDivisionAccess().getGroup()); }
(rule__Division__Group__0)
{ after(grammarAccess.getDivisionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}



// Entry rule entryRulePrimary
entryRulePrimary 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
}
:
{ before(grammarAccess.getPrimaryRule()); }
	 rulePrimary
{ after(grammarAccess.getPrimaryRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Primary
rulePrimary
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPrimaryAccess().getAlternatives()); }
(rule__Primary__Alternatives)
{ after(grammarAccess.getPrimaryAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}



// Entry rule entryRuleAtomic
entryRuleAtomic 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
}
:
{ before(grammarAccess.getAtomicRule()); }
	 ruleAtomic
{ after(grammarAccess.getAtomicRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Atomic
ruleAtomic
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAtomicAccess().getAlternatives()); }
(rule__Atomic__Alternatives)
{ after(grammarAccess.getAtomicAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}



// Entry rule entryRuleDouble
entryRuleDouble 
:
{ before(grammarAccess.getDoubleRule()); }
	 ruleDouble
{ after(grammarAccess.getDoubleRule()); } 
	 EOF 
;

// Rule Double
ruleDouble
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDoubleAccess().getGroup()); }
(rule__Double__Group__0)
{ after(grammarAccess.getDoubleAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFreeVariable
entryRuleFreeVariable 
:
{ before(grammarAccess.getFreeVariableRule()); }
	 ruleFreeVariable
{ after(grammarAccess.getFreeVariableRule()); } 
	 EOF 
;

// Rule FreeVariable
ruleFreeVariable
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFreeVariableAccess().getGroup()); }
(rule__FreeVariable__Group__0)
{ after(grammarAccess.getFreeVariableAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__PrimaryProcess__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryProcessAccess().getGroup_0()); }
(rule__PrimaryProcess__Group_0__0)
{ after(grammarAccess.getPrimaryProcessAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getPrimaryProcessAccess().getGroup_1()); }
(rule__PrimaryProcess__Group_1__0)
{ after(grammarAccess.getPrimaryProcessAccess().getGroup_1()); }
)

    |(
{ before(grammarAccess.getPrimaryProcessAccess().getPredicateProcessParserRuleCall_2()); }
	rulePredicateProcess
{ after(grammarAccess.getPrimaryProcessAccess().getPredicateProcessParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getPrimaryProcessAccess().getActionProcessParserRuleCall_3()); }
	ruleActionProcess
{ after(grammarAccess.getPrimaryProcessAccess().getActionProcessParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getPrimaryProcessAccess().getGroup_4()); }
(rule__PrimaryProcess__Group_4__0)
{ after(grammarAccess.getPrimaryProcessAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Evaluations__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEvaluationsAccess().getGroup_0()); }
(rule__Evaluations__Group_0__0)
{ after(grammarAccess.getEvaluationsAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getEvaluationsAccess().getGroup_1()); }
(rule__Evaluations__Group_1__0)
{ after(grammarAccess.getEvaluationsAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__OpAlternatives_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityAccess().getOpEqualsSignEqualsSignKeyword_1_1_0_0()); }

	'==' 

{ after(grammarAccess.getEqualityAccess().getOpEqualsSignEqualsSignKeyword_1_1_0_0()); }
)

    |(
{ before(grammarAccess.getEqualityAccess().getOpExclamationMarkEqualsSignKeyword_1_1_0_1()); }

	'!=' 

{ after(grammarAccess.getEqualityAccess().getOpExclamationMarkEqualsSignKeyword_1_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__OpAlternatives_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getOpGreaterThanSignEqualsSignKeyword_1_1_0_0()); }

	'>=' 

{ after(grammarAccess.getComparisonAccess().getOpGreaterThanSignEqualsSignKeyword_1_1_0_0()); }
)

    |(
{ before(grammarAccess.getComparisonAccess().getOpLessThanSignEqualsSignKeyword_1_1_0_1()); }

	'<=' 

{ after(grammarAccess.getComparisonAccess().getOpLessThanSignEqualsSignKeyword_1_1_0_1()); }
)

    |(
{ before(grammarAccess.getComparisonAccess().getOpGreaterThanSignKeyword_1_1_0_2()); }

	'>' 

{ after(grammarAccess.getComparisonAccess().getOpGreaterThanSignKeyword_1_1_0_2()); }
)

    |(
{ before(grammarAccess.getComparisonAccess().getOpLessThanSignKeyword_1_1_0_3()); }

	'<' 

{ after(grammarAccess.getComparisonAccess().getOpLessThanSignKeyword_1_1_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryAccess().getGroup_0()); }
(rule__Primary__Group_0__0)
{ after(grammarAccess.getPrimaryAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getPrimaryAccess().getGroup_1()); }
(rule__Primary__Group_1__0)
{ after(grammarAccess.getPrimaryAccess().getGroup_1()); }
)

    |(
{ before(grammarAccess.getPrimaryAccess().getAtomicParserRuleCall_2()); }
	ruleAtomic
{ after(grammarAccess.getPrimaryAccess().getAtomicParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicAccess().getGroup_0()); }
(rule__Atomic__Group_0__0)
{ after(grammarAccess.getAtomicAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getAtomicAccess().getGroup_1()); }
(rule__Atomic__Group_1__0)
{ after(grammarAccess.getAtomicAccess().getGroup_1()); }
)

    |(
{ before(grammarAccess.getAtomicAccess().getGroup_2()); }
(rule__Atomic__Group_2__0)
{ after(grammarAccess.getAtomicAccess().getGroup_2()); }
)

    |(
{ before(grammarAccess.getAtomicAccess().getGroup_3()); }
(rule__Atomic__Group_3__0)
{ after(grammarAccess.getAtomicAccess().getGroup_3()); }
)

    |(
{ before(grammarAccess.getAtomicAccess().getGroup_4()); }
(rule__Atomic__Group_4__0)
{ after(grammarAccess.getAtomicAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__ValueAlternatives_2_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicAccess().getValueTrueKeyword_2_1_0_0()); }

	'true' 

{ after(grammarAccess.getAtomicAccess().getValueTrueKeyword_2_1_0_0()); }
)

    |(
{ before(grammarAccess.getAtomicAccess().getValueFalseKeyword_2_1_0_1()); }

	'false' 

{ after(grammarAccess.getAtomicAccess().getValueFalseKeyword_2_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Double__Alternatives_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDoubleAccess().getEKeyword_1_2_0()); }

	'e' 

{ after(grammarAccess.getDoubleAccess().getEKeyword_1_2_0()); }
)

    |(
{ before(grammarAccess.getDoubleAccess().getGroup_1_2_1()); }
(rule__Double__Group_1_2_1__0)
{ after(grammarAccess.getDoubleAccess().getGroup_1_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Model__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__0__Impl
	rule__Model__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getModelAccess().getProcessesAssignment_0()); }
(rule__Model__ProcessesAssignment_0)
{ after(grammarAccess.getModelAccess().getProcessesAssignment_0()); }
)
(
{ before(grammarAccess.getModelAccess().getProcessesAssignment_0()); }
(rule__Model__ProcessesAssignment_0)*
{ after(grammarAccess.getModelAccess().getProcessesAssignment_0()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__1__Impl
	rule__Model__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getModelAccess().getStoresAssignment_1()); }
(rule__Model__StoresAssignment_1)
{ after(grammarAccess.getModelAccess().getStoresAssignment_1()); }
)
(
{ before(grammarAccess.getModelAccess().getStoresAssignment_1()); }
(rule__Model__StoresAssignment_1)*
{ after(grammarAccess.getModelAccess().getStoresAssignment_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getModelAccess().getTermsAssignment_2()); }
(rule__Model__TermsAssignment_2)
{ after(grammarAccess.getModelAccess().getTermsAssignment_2()); }
)
(
{ before(grammarAccess.getModelAccess().getTermsAssignment_2()); }
(rule__Model__TermsAssignment_2)*
{ after(grammarAccess.getModelAccess().getTermsAssignment_2()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Term__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Term__Group__0__Impl
	rule__Term__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getLeftParenthesisKeyword_0()); }

	'(' 

{ after(grammarAccess.getTermAccess().getLeftParenthesisKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Term__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Term__Group__1__Impl
	rule__Term__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getNameAssignment_1()); }
(rule__Term__NameAssignment_1)
{ after(grammarAccess.getTermAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Term__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Term__Group__2__Impl
	rule__Term__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getCommaKeyword_2()); }

	',' 

{ after(grammarAccess.getTermAccess().getCommaKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Term__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Term__Group__3__Impl
	rule__Term__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getLeftCurlyBracketKeyword_3()); }

	'{' 

{ after(grammarAccess.getTermAccess().getLeftCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Term__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Term__Group__4__Impl
	rule__Term__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getStoresAssignment_4()); }
(rule__Term__StoresAssignment_4)
{ after(grammarAccess.getTermAccess().getStoresAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Term__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Term__Group__5__Impl
	rule__Term__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getRightCurlyBracketKeyword_5()); }

	'}' 

{ after(grammarAccess.getTermAccess().getRightCurlyBracketKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Term__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Term__Group__6__Impl
	rule__Term__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getRightParenthesisKeyword_6()); }

	')' 

{ after(grammarAccess.getTermAccess().getRightParenthesisKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Term__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Term__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getSemicolonKeyword_7()); }

	';' 

{ after(grammarAccess.getTermAccess().getSemicolonKeyword_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


















rule__Process__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Process__Group__0__Impl
	rule__Process__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Process__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcessAccess().getNameAssignment_0()); }
(rule__Process__NameAssignment_0)
{ after(grammarAccess.getProcessAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Process__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Process__Group__1__Impl
	rule__Process__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Process__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcessAccess().getEqualsSignKeyword_1()); }

	'=' 

{ after(grammarAccess.getProcessAccess().getEqualsSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Process__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Process__Group__2__Impl
	rule__Process__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Process__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcessAccess().getValueAssignment_2()); }
(rule__Process__ValueAssignment_2)
{ after(grammarAccess.getProcessAccess().getValueAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Process__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Process__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Process__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcessAccess().getSemicolonKeyword_3()); }

	';' 

{ after(grammarAccess.getProcessAccess().getSemicolonKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Parallel__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parallel__Group__0__Impl
	rule__Parallel__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Parallel__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParallelAccess().getChoiceParserRuleCall_0()); }
	ruleChoice
{ after(grammarAccess.getParallelAccess().getChoiceParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Parallel__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parallel__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Parallel__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParallelAccess().getGroup_1()); }
(rule__Parallel__Group_1__0)*
{ after(grammarAccess.getParallelAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Parallel__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parallel__Group_1__0__Impl
	rule__Parallel__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Parallel__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParallelAccess().getParallelLeftAction_1_0()); }
(

)
{ after(grammarAccess.getParallelAccess().getParallelLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Parallel__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parallel__Group_1__1__Impl
	rule__Parallel__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Parallel__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParallelAccess().getVerticalLineKeyword_1_1()); }

	'|' 

{ after(grammarAccess.getParallelAccess().getVerticalLineKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Parallel__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parallel__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Parallel__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParallelAccess().getRightAssignment_1_2()); }
(rule__Parallel__RightAssignment_1_2)
{ after(grammarAccess.getParallelAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Choice__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Choice__Group__0__Impl
	rule__Choice__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Choice__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getChoiceAccess().getPrimaryProcessParserRuleCall_0()); }
	rulePrimaryProcess
{ after(grammarAccess.getChoiceAccess().getPrimaryProcessParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Choice__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Choice__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Choice__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getChoiceAccess().getGroup_1()); }
(rule__Choice__Group_1__0)*
{ after(grammarAccess.getChoiceAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Choice__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Choice__Group_1__0__Impl
	rule__Choice__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Choice__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getChoiceAccess().getChoiceLeftAction_1_0()); }
(

)
{ after(grammarAccess.getChoiceAccess().getChoiceLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Choice__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Choice__Group_1__1__Impl
	rule__Choice__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Choice__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getChoiceAccess().getPlusSignKeyword_1_1()); }

	'+' 

{ after(grammarAccess.getChoiceAccess().getPlusSignKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Choice__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Choice__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Choice__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getChoiceAccess().getRightAssignment_1_2()); }
(rule__Choice__RightAssignment_1_2)
{ after(grammarAccess.getChoiceAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__PrimaryProcess__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimaryProcess__Group_0__0__Impl
	rule__PrimaryProcess__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryProcess__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryProcessAccess().getLeafAction_0_0()); }
(

)
{ after(grammarAccess.getPrimaryProcessAccess().getLeafAction_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryProcess__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimaryProcess__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryProcess__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryProcessAccess().getValueAssignment_0_1()); }
(rule__PrimaryProcess__ValueAssignment_0_1)
{ after(grammarAccess.getPrimaryProcessAccess().getValueAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PrimaryProcess__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimaryProcess__Group_1__0__Impl
	rule__PrimaryProcess__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryProcess__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryProcessAccess().getLeafAction_1_0()); }
(

)
{ after(grammarAccess.getPrimaryProcessAccess().getLeafAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryProcess__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimaryProcess__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryProcess__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryProcessAccess().getValueAssignment_1_1()); }
(rule__PrimaryProcess__ValueAssignment_1_1)
{ after(grammarAccess.getPrimaryProcessAccess().getValueAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PrimaryProcess__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimaryProcess__Group_4__0__Impl
	rule__PrimaryProcess__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryProcess__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryProcessAccess().getProcessReferenceAction_4_0()); }
(

)
{ after(grammarAccess.getPrimaryProcessAccess().getProcessReferenceAction_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryProcess__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimaryProcess__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryProcess__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryProcessAccess().getValueAssignment_4_1()); }
(rule__PrimaryProcess__ValueAssignment_4_1)
{ after(grammarAccess.getPrimaryProcessAccess().getValueAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PredicateProcess__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PredicateProcess__Group__0__Impl
	rule__PredicateProcess__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateProcess__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPredicateProcessAccess().getPredicateAssignment_0()); }
(rule__PredicateProcess__PredicateAssignment_0)
{ after(grammarAccess.getPredicateProcessAccess().getPredicateAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PredicateProcess__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PredicateProcess__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateProcess__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPredicateProcessAccess().getValueAssignment_1()); }
(rule__PredicateProcess__ValueAssignment_1)
{ after(grammarAccess.getPredicateProcessAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ActionProcess__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ActionProcess__Group__0__Impl
	rule__ActionProcess__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionProcess__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionProcessAccess().getActionAssignment_0()); }
(rule__ActionProcess__ActionAssignment_0)
{ after(grammarAccess.getActionProcessAccess().getActionAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ActionProcess__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ActionProcess__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionProcess__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionProcessAccess().getValueAssignment_1()); }
(rule__ActionProcess__ValueAssignment_1)
{ after(grammarAccess.getActionProcessAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Action__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Action__Group__0__Impl
	rule__Action__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionAccess().getActionAction_0()); }
(

)
{ after(grammarAccess.getActionAccess().getActionAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Action__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Action__Group__1__Impl
	rule__Action__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionAccess().getNameAssignment_1()); }
(rule__Action__NameAssignment_1)
{ after(grammarAccess.getActionAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Action__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Action__Group__2__Impl
	rule__Action__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionAccess().getAsteriskKeyword_2()); }
(
	'*' 
)?
{ after(grammarAccess.getActionAccess().getAsteriskKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Action__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Action__Group__3__Impl
	rule__Action__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionAccess().getPredicatesAssignment_3()); }
(rule__Action__PredicatesAssignment_3)
{ after(grammarAccess.getActionAccess().getPredicatesAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Action__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Action__Group__4__Impl
	rule__Action__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionAccess().getEvaluationsAssignment_4()); }
(rule__Action__EvaluationsAssignment_4)
{ after(grammarAccess.getActionAccess().getEvaluationsAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Action__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Action__Group__5__Impl
	rule__Action__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionAccess().getUpdatesAssignment_5()); }
(rule__Action__UpdatesAssignment_5)
{ after(grammarAccess.getActionAccess().getUpdatesAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Action__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Action__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionAccess().getFullStopKeyword_6()); }

	'.' 

{ after(grammarAccess.getActionAccess().getFullStopKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__Predicate__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Predicate__Group__0__Impl
	rule__Predicate__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Predicate__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPredicateAccess().getPredicateAction_0()); }
(

)
{ after(grammarAccess.getPredicateAccess().getPredicateAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Predicate__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Predicate__Group__1__Impl
	rule__Predicate__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Predicate__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPredicateAccess().getLeftSquareBracketKeyword_1()); }

	'[' 

{ after(grammarAccess.getPredicateAccess().getLeftSquareBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Predicate__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Predicate__Group__2__Impl
	rule__Predicate__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Predicate__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPredicateAccess().getPredicatesAssignment_2()); }
(rule__Predicate__PredicatesAssignment_2)
{ after(grammarAccess.getPredicateAccess().getPredicatesAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Predicate__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Predicate__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Predicate__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPredicateAccess().getRightSquareBracketKeyword_3()); }

	']' 

{ after(grammarAccess.getPredicateAccess().getRightSquareBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Evaluations__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Evaluations__Group_0__0__Impl
	rule__Evaluations__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Evaluations__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEvaluationsAccess().getLeftParenthesisKeyword_0_0()); }

	'(' 

{ after(grammarAccess.getEvaluationsAccess().getLeftParenthesisKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Evaluations__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Evaluations__Group_0__1__Impl
	rule__Evaluations__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Evaluations__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEvaluationsAccess().getInAction_0_1()); }
(

)
{ after(grammarAccess.getEvaluationsAccess().getInAction_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Evaluations__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Evaluations__Group_0__2__Impl
	rule__Evaluations__Group_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Evaluations__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getEvaluationsAccess().getExpressionsAssignment_0_2()); }
(rule__Evaluations__ExpressionsAssignment_0_2)
{ after(grammarAccess.getEvaluationsAccess().getExpressionsAssignment_0_2()); }
)
(
{ before(grammarAccess.getEvaluationsAccess().getExpressionsAssignment_0_2()); }
(rule__Evaluations__ExpressionsAssignment_0_2)*
{ after(grammarAccess.getEvaluationsAccess().getExpressionsAssignment_0_2()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Evaluations__Group_0__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Evaluations__Group_0__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Evaluations__Group_0__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEvaluationsAccess().getRightParenthesisKeyword_0_3()); }

	')' 

{ after(grammarAccess.getEvaluationsAccess().getRightParenthesisKeyword_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Evaluations__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Evaluations__Group_1__0__Impl
	rule__Evaluations__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Evaluations__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEvaluationsAccess().getLessThanSignKeyword_1_0()); }

	'<' 

{ after(grammarAccess.getEvaluationsAccess().getLessThanSignKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Evaluations__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Evaluations__Group_1__1__Impl
	rule__Evaluations__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Evaluations__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEvaluationsAccess().getOutAction_1_1()); }
(

)
{ after(grammarAccess.getEvaluationsAccess().getOutAction_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Evaluations__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Evaluations__Group_1__2__Impl
	rule__Evaluations__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Evaluations__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getEvaluationsAccess().getExpressionsAssignment_1_2()); }
(rule__Evaluations__ExpressionsAssignment_1_2)
{ after(grammarAccess.getEvaluationsAccess().getExpressionsAssignment_1_2()); }
)
(
{ before(grammarAccess.getEvaluationsAccess().getExpressionsAssignment_1_2()); }
(rule__Evaluations__ExpressionsAssignment_1_2)*
{ after(grammarAccess.getEvaluationsAccess().getExpressionsAssignment_1_2()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Evaluations__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Evaluations__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Evaluations__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEvaluationsAccess().getGreaterThanSignKeyword_1_3()); }

	'>' 

{ after(grammarAccess.getEvaluationsAccess().getGreaterThanSignKeyword_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Updates__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Updates__Group__0__Impl
	rule__Updates__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Updates__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUpdatesAccess().getUpdatesAction_0()); }
(

)
{ after(grammarAccess.getUpdatesAccess().getUpdatesAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Updates__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Updates__Group__1__Impl
	rule__Updates__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Updates__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUpdatesAccess().getLeftCurlyBracketKeyword_1()); }

	'{' 

{ after(grammarAccess.getUpdatesAccess().getLeftCurlyBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Updates__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Updates__Group__2__Impl
	rule__Updates__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Updates__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getUpdatesAccess().getUpdatesAssignment_2()); }
(rule__Updates__UpdatesAssignment_2)
{ after(grammarAccess.getUpdatesAccess().getUpdatesAssignment_2()); }
)
(
{ before(grammarAccess.getUpdatesAccess().getUpdatesAssignment_2()); }
(rule__Updates__UpdatesAssignment_2)*
{ after(grammarAccess.getUpdatesAccess().getUpdatesAssignment_2()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Updates__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Updates__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Updates__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUpdatesAccess().getRightCurlyBracketKeyword_3()); }

	'}' 

{ after(grammarAccess.getUpdatesAccess().getRightCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__PredicateExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PredicateExpression__Group__0__Impl
	rule__PredicateExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPredicateExpressionAccess().getExpressionAssignment_0()); }
(rule__PredicateExpression__ExpressionAssignment_0)
{ after(grammarAccess.getPredicateExpressionAccess().getExpressionAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PredicateExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PredicateExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPredicateExpressionAccess().getSemicolonKeyword_1()); }

	';' 

{ after(grammarAccess.getPredicateExpressionAccess().getSemicolonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EvaluationExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EvaluationExpression__Group__0__Impl
	rule__EvaluationExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EvaluationExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEvaluationExpressionAccess().getExpressionParserRuleCall_0()); }
	ruleExpression
{ after(grammarAccess.getEvaluationExpressionAccess().getExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EvaluationExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EvaluationExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EvaluationExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEvaluationExpressionAccess().getSemicolonKeyword_1()); }

	';' 

{ after(grammarAccess.getEvaluationExpressionAccess().getSemicolonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__UpdateExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UpdateExpression__Group__0__Impl
	rule__UpdateExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUpdateExpressionAccess().getExpressionAssignment_0()); }
(rule__UpdateExpression__ExpressionAssignment_0)
{ after(grammarAccess.getUpdateExpressionAccess().getExpressionAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UpdateExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UpdateExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUpdateExpressionAccess().getSemicolonKeyword_1()); }

	';' 

{ after(grammarAccess.getUpdateExpressionAccess().getSemicolonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Store__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Store__Group__0__Impl
	rule__Store__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Store__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStoreAccess().getNameAssignment_0()); }
(rule__Store__NameAssignment_0)
{ after(grammarAccess.getStoreAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Store__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Store__Group__1__Impl
	rule__Store__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Store__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStoreAccess().getEqualsSignKeyword_1()); }

	'=' 

{ after(grammarAccess.getStoreAccess().getEqualsSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Store__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Store__Group__2__Impl
	rule__Store__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Store__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStoreAccess().getValueAssignment_2()); }
(rule__Store__ValueAssignment_2)
{ after(grammarAccess.getStoreAccess().getValueAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Store__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Store__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Store__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStoreAccess().getSemicolonKeyword_3()); }

	';' 

{ after(grammarAccess.getStoreAccess().getSemicolonKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Or__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Or__Group__0__Impl
	rule__Or__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrAccess().getAndParserRuleCall_0()); }
	ruleAnd
{ after(grammarAccess.getOrAccess().getAndParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Or__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Or__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrAccess().getGroup_1()); }
(rule__Or__Group_1__0)*
{ after(grammarAccess.getOrAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Or__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Or__Group_1__0__Impl
	rule__Or__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrAccess().getOrLeftAction_1_0()); }
(

)
{ after(grammarAccess.getOrAccess().getOrLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Or__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Or__Group_1__1__Impl
	rule__Or__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrAccess().getVerticalLineVerticalLineKeyword_1_1()); }

	'||' 

{ after(grammarAccess.getOrAccess().getVerticalLineVerticalLineKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Or__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Or__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrAccess().getRightAssignment_1_2()); }
(rule__Or__RightAssignment_1_2)
{ after(grammarAccess.getOrAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__And__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__And__Group__0__Impl
	rule__And__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndAccess().getEqualityParserRuleCall_0()); }
	ruleEquality
{ after(grammarAccess.getAndAccess().getEqualityParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__And__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__And__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndAccess().getGroup_1()); }
(rule__And__Group_1__0)*
{ after(grammarAccess.getAndAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__And__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__And__Group_1__0__Impl
	rule__And__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndAccess().getAndLeftAction_1_0()); }
(

)
{ after(grammarAccess.getAndAccess().getAndLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__And__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__And__Group_1__1__Impl
	rule__And__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndAccess().getAmpersandAmpersandKeyword_1_1()); }

	'&&' 

{ after(grammarAccess.getAndAccess().getAmpersandAmpersandKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__And__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__And__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndAccess().getRightAssignment_1_2()); }
(rule__And__RightAssignment_1_2)
{ after(grammarAccess.getAndAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Equality__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Equality__Group__0__Impl
	rule__Equality__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityAccess().getComparisonParserRuleCall_0()); }
	ruleComparison
{ after(grammarAccess.getEqualityAccess().getComparisonParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Equality__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Equality__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityAccess().getGroup_1()); }
(rule__Equality__Group_1__0)*
{ after(grammarAccess.getEqualityAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Equality__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Equality__Group_1__0__Impl
	rule__Equality__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityAccess().getEqualityLeftAction_1_0()); }
(

)
{ after(grammarAccess.getEqualityAccess().getEqualityLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Equality__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Equality__Group_1__1__Impl
	rule__Equality__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityAccess().getOpAssignment_1_1()); }
(rule__Equality__OpAssignment_1_1)
{ after(grammarAccess.getEqualityAccess().getOpAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Equality__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Equality__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityAccess().getRightAssignment_1_2()); }
(rule__Equality__RightAssignment_1_2)
{ after(grammarAccess.getEqualityAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Comparison__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Comparison__Group__0__Impl
	rule__Comparison__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getSubtractionParserRuleCall_0()); }
	ruleSubtraction
{ after(grammarAccess.getComparisonAccess().getSubtractionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Comparison__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Comparison__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getGroup_1()); }
(rule__Comparison__Group_1__0)*
{ after(grammarAccess.getComparisonAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Comparison__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Comparison__Group_1__0__Impl
	rule__Comparison__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getComparisonLeftAction_1_0()); }
(

)
{ after(grammarAccess.getComparisonAccess().getComparisonLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Comparison__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Comparison__Group_1__1__Impl
	rule__Comparison__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getOpAssignment_1_1()); }
(rule__Comparison__OpAssignment_1_1)
{ after(grammarAccess.getComparisonAccess().getOpAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Comparison__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Comparison__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getRightAssignment_1_2()); }
(rule__Comparison__RightAssignment_1_2)
{ after(grammarAccess.getComparisonAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Subtraction__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Subtraction__Group__0__Impl
	rule__Subtraction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Subtraction__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtractionAccess().getAdditionParserRuleCall_0()); }
	ruleAddition
{ after(grammarAccess.getSubtractionAccess().getAdditionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Subtraction__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Subtraction__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Subtraction__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtractionAccess().getGroup_1()); }
(rule__Subtraction__Group_1__0)*
{ after(grammarAccess.getSubtractionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Subtraction__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Subtraction__Group_1__0__Impl
	rule__Subtraction__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Subtraction__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtractionAccess().getSubLeftAction_1_0()); }
(

)
{ after(grammarAccess.getSubtractionAccess().getSubLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Subtraction__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Subtraction__Group_1__1__Impl
	rule__Subtraction__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Subtraction__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtractionAccess().getHyphenMinusKeyword_1_1()); }

	'-' 

{ after(grammarAccess.getSubtractionAccess().getHyphenMinusKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Subtraction__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Subtraction__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Subtraction__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtractionAccess().getRightAssignment_1_2()); }
(rule__Subtraction__RightAssignment_1_2)
{ after(grammarAccess.getSubtractionAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Addition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group__0__Impl
	rule__Addition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getMultiplicationParserRuleCall_0()); }
	ruleMultiplication
{ after(grammarAccess.getAdditionAccess().getMultiplicationParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Addition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getGroup_1()); }
(rule__Addition__Group_1__0)*
{ after(grammarAccess.getAdditionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Addition__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group_1__0__Impl
	rule__Addition__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getPluLeftAction_1_0()); }
(

)
{ after(grammarAccess.getAdditionAccess().getPluLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Addition__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group_1__1__Impl
	rule__Addition__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getPlusSignKeyword_1_1()); }

	'+' 

{ after(grammarAccess.getAdditionAccess().getPlusSignKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Addition__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getRightAssignment_1_2()); }
(rule__Addition__RightAssignment_1_2)
{ after(grammarAccess.getAdditionAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Multiplication__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group__0__Impl
	rule__Multiplication__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getDivisionParserRuleCall_0()); }
	ruleDivision
{ after(grammarAccess.getMultiplicationAccess().getDivisionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplication__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getGroup_1()); }
(rule__Multiplication__Group_1__0)*
{ after(grammarAccess.getMultiplicationAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Multiplication__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group_1__0__Impl
	rule__Multiplication__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getMulLeftAction_1_0()); }
(

)
{ after(grammarAccess.getMultiplicationAccess().getMulLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplication__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group_1__1__Impl
	rule__Multiplication__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getAsteriskKeyword_1_1()); }

	'*' 

{ after(grammarAccess.getMultiplicationAccess().getAsteriskKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplication__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getRightAssignment_1_2()); }
(rule__Multiplication__RightAssignment_1_2)
{ after(grammarAccess.getMultiplicationAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Division__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Division__Group__0__Impl
	rule__Division__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Division__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDivisionAccess().getPrimaryParserRuleCall_0()); }
	rulePrimary
{ after(grammarAccess.getDivisionAccess().getPrimaryParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Division__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Division__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Division__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDivisionAccess().getGroup_1()); }
(rule__Division__Group_1__0)*
{ after(grammarAccess.getDivisionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Division__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Division__Group_1__0__Impl
	rule__Division__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Division__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDivisionAccess().getDivLeftAction_1_0()); }
(

)
{ after(grammarAccess.getDivisionAccess().getDivLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Division__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Division__Group_1__1__Impl
	rule__Division__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Division__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDivisionAccess().getSolidusKeyword_1_1()); }

	'/' 

{ after(grammarAccess.getDivisionAccess().getSolidusKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Division__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Division__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Division__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDivisionAccess().getRightAssignment_1_2()); }
(rule__Division__RightAssignment_1_2)
{ after(grammarAccess.getDivisionAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Primary__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Primary__Group_0__0__Impl
	rule__Primary__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_0_0()); }

	'(' 

{ after(grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Primary__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Primary__Group_0__1__Impl
	rule__Primary__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryAccess().getExpressionParserRuleCall_0_1()); }
	ruleExpression
{ after(grammarAccess.getPrimaryAccess().getExpressionParserRuleCall_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Primary__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Primary__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_0_2()); }

	')' 

{ after(grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Primary__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Primary__Group_1__0__Impl
	rule__Primary__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryAccess().getNotAction_1_0()); }
(

)
{ after(grammarAccess.getPrimaryAccess().getNotAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Primary__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Primary__Group_1__1__Impl
	rule__Primary__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryAccess().getExclamationMarkKeyword_1_1()); }

	'!' 

{ after(grammarAccess.getPrimaryAccess().getExclamationMarkKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Primary__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Primary__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryAccess().getExpressionAssignment_1_2()); }
(rule__Primary__ExpressionAssignment_1_2)
{ after(grammarAccess.getPrimaryAccess().getExpressionAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Atomic__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Atomic__Group_0__0__Impl
	rule__Atomic__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicAccess().getDoubleConstantAction_0_0()); }
(

)
{ after(grammarAccess.getAtomicAccess().getDoubleConstantAction_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Atomic__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Atomic__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicAccess().getValueAssignment_0_1()); }
(rule__Atomic__ValueAssignment_0_1)
{ after(grammarAccess.getAtomicAccess().getValueAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Atomic__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Atomic__Group_1__0__Impl
	rule__Atomic__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicAccess().getFreeVariableAction_1_0()); }
(

)
{ after(grammarAccess.getAtomicAccess().getFreeVariableAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Atomic__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Atomic__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicAccess().getValueAssignment_1_1()); }
(rule__Atomic__ValueAssignment_1_1)
{ after(grammarAccess.getAtomicAccess().getValueAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Atomic__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Atomic__Group_2__0__Impl
	rule__Atomic__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicAccess().getBoolConstantAction_2_0()); }
(

)
{ after(grammarAccess.getAtomicAccess().getBoolConstantAction_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Atomic__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Atomic__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicAccess().getValueAssignment_2_1()); }
(rule__Atomic__ValueAssignment_2_1)
{ after(grammarAccess.getAtomicAccess().getValueAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Atomic__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Atomic__Group_3__0__Impl
	rule__Atomic__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicAccess().getReferencedStoreAction_3_0()); }
(

)
{ after(grammarAccess.getAtomicAccess().getReferencedStoreAction_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Atomic__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Atomic__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicAccess().getValueAssignment_3_1()); }
(rule__Atomic__ValueAssignment_3_1)
{ after(grammarAccess.getAtomicAccess().getValueAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Atomic__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Atomic__Group_4__0__Impl
	rule__Atomic__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicAccess().getReferencedStoreAction_4_0()); }
(

)
{ after(grammarAccess.getAtomicAccess().getReferencedStoreAction_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Atomic__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Atomic__Group_4__1__Impl
	rule__Atomic__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicAccess().getThisKeyword_4_1()); }

	'this.' 

{ after(grammarAccess.getAtomicAccess().getThisKeyword_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Atomic__Group_4__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Atomic__Group_4__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_4__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicAccess().getValueAssignment_4_2()); }
(rule__Atomic__ValueAssignment_4_2)
{ after(grammarAccess.getAtomicAccess().getValueAssignment_4_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Double__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Double__Group__0__Impl
	rule__Double__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Double__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDoubleAccess().getINTTerminalRuleCall_0()); }
	RULE_INT
{ after(grammarAccess.getDoubleAccess().getINTTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Double__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Double__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Double__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDoubleAccess().getGroup_1()); }
(rule__Double__Group_1__0)?
{ after(grammarAccess.getDoubleAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Double__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Double__Group_1__0__Impl
	rule__Double__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Double__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDoubleAccess().getFullStopKeyword_1_0()); }

	'.' 

{ after(grammarAccess.getDoubleAccess().getFullStopKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Double__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Double__Group_1__1__Impl
	rule__Double__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Double__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDoubleAccess().getINTTerminalRuleCall_1_1()); }
	RULE_INT
{ after(grammarAccess.getDoubleAccess().getINTTerminalRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Double__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Double__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Double__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDoubleAccess().getAlternatives_1_2()); }
(rule__Double__Alternatives_1_2)?
{ after(grammarAccess.getDoubleAccess().getAlternatives_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Double__Group_1_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Double__Group_1_2_1__0__Impl
	rule__Double__Group_1_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Double__Group_1_2_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDoubleAccess().getEKeyword_1_2_1_0()); }

	'E' 

{ after(grammarAccess.getDoubleAccess().getEKeyword_1_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Double__Group_1_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Double__Group_1_2_1__1__Impl
	rule__Double__Group_1_2_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Double__Group_1_2_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDoubleAccess().getHyphenMinusKeyword_1_2_1_1()); }
(
	'-' 
)?
{ after(grammarAccess.getDoubleAccess().getHyphenMinusKeyword_1_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Double__Group_1_2_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Double__Group_1_2_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Double__Group_1_2_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDoubleAccess().getINTTerminalRuleCall_1_2_1_2()); }
	RULE_INT
{ after(grammarAccess.getDoubleAccess().getINTTerminalRuleCall_1_2_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__FreeVariable__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FreeVariable__Group__0__Impl
	rule__FreeVariable__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FreeVariable__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFreeVariableAccess().getDollarSignKeyword_0()); }

	'$' 

{ after(grammarAccess.getFreeVariableAccess().getDollarSignKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FreeVariable__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FreeVariable__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FreeVariable__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFreeVariableAccess().getLOWERTerminalRuleCall_1()); }
	RULE_LOWER
{ after(grammarAccess.getFreeVariableAccess().getLOWERTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Model__ProcessesAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getProcessesProcessParserRuleCall_0_0()); }
	ruleProcess{ after(grammarAccess.getModelAccess().getProcessesProcessParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Model__StoresAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getStoresStoreParserRuleCall_1_0()); }
	ruleStore{ after(grammarAccess.getModelAccess().getStoresStoreParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Model__TermsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getTermsTermParserRuleCall_2_0()); }
	ruleTerm{ after(grammarAccess.getModelAccess().getTermsTermParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Term__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getNameProcessCrossReference_1_0()); }
(
{ before(grammarAccess.getTermAccess().getNameProcessUPPERTerminalRuleCall_1_0_1()); }
	RULE_UPPER{ after(grammarAccess.getTermAccess().getNameProcessUPPERTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getTermAccess().getNameProcessCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Term__StoresAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getStoresStoreCrossReference_4_0()); }
(
{ before(grammarAccess.getTermAccess().getStoresStoreLOWERTerminalRuleCall_4_0_1()); }
	RULE_LOWER{ after(grammarAccess.getTermAccess().getStoresStoreLOWERTerminalRuleCall_4_0_1()); }
)
{ after(grammarAccess.getTermAccess().getStoresStoreCrossReference_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Process__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcessAccess().getNameUPPERTerminalRuleCall_0_0()); }
	RULE_UPPER{ after(grammarAccess.getProcessAccess().getNameUPPERTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Process__ValueAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcessAccess().getValueProcessExpressionParserRuleCall_2_0()); }
	ruleProcessExpression{ after(grammarAccess.getProcessAccess().getValueProcessExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Parallel__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParallelAccess().getRightChoiceParserRuleCall_1_2_0()); }
	ruleChoice{ after(grammarAccess.getParallelAccess().getRightChoiceParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Choice__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getChoiceAccess().getRightPrimaryProcessParserRuleCall_1_2_0()); }
	rulePrimaryProcess{ after(grammarAccess.getChoiceAccess().getRightPrimaryProcessParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryProcess__ValueAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryProcessAccess().getValueNilKeyword_0_1_0()); }
(
{ before(grammarAccess.getPrimaryProcessAccess().getValueNilKeyword_0_1_0()); }

	'nil' 

{ after(grammarAccess.getPrimaryProcessAccess().getValueNilKeyword_0_1_0()); }
)

{ after(grammarAccess.getPrimaryProcessAccess().getValueNilKeyword_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryProcess__ValueAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryProcessAccess().getValueKillKeyword_1_1_0()); }
(
{ before(grammarAccess.getPrimaryProcessAccess().getValueKillKeyword_1_1_0()); }

	'kill' 

{ after(grammarAccess.getPrimaryProcessAccess().getValueKillKeyword_1_1_0()); }
)

{ after(grammarAccess.getPrimaryProcessAccess().getValueKillKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryProcess__ValueAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryProcessAccess().getValueProcessCrossReference_4_1_0()); }
(
{ before(grammarAccess.getPrimaryProcessAccess().getValueProcessUPPERTerminalRuleCall_4_1_0_1()); }
	RULE_UPPER{ after(grammarAccess.getPrimaryProcessAccess().getValueProcessUPPERTerminalRuleCall_4_1_0_1()); }
)
{ after(grammarAccess.getPrimaryProcessAccess().getValueProcessCrossReference_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateProcess__PredicateAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPredicateProcessAccess().getPredicatePredicateParserRuleCall_0_0()); }
	rulePredicate{ after(grammarAccess.getPredicateProcessAccess().getPredicatePredicateParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateProcess__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPredicateProcessAccess().getValueProcessCrossReference_1_0()); }
(
{ before(grammarAccess.getPredicateProcessAccess().getValueProcessUPPERTerminalRuleCall_1_0_1()); }
	RULE_UPPER{ after(grammarAccess.getPredicateProcessAccess().getValueProcessUPPERTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getPredicateProcessAccess().getValueProcessCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ActionProcess__ActionAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionProcessAccess().getActionActionParserRuleCall_0_0()); }
	ruleAction{ after(grammarAccess.getActionProcessAccess().getActionActionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ActionProcess__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionProcessAccess().getValueProcessCrossReference_1_0()); }
(
{ before(grammarAccess.getActionProcessAccess().getValueProcessUPPERTerminalRuleCall_1_0_1()); }
	RULE_UPPER{ after(grammarAccess.getActionProcessAccess().getValueProcessUPPERTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getActionProcessAccess().getValueProcessCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Action__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionAccess().getNameLOWERTerminalRuleCall_1_0()); }
	RULE_LOWER{ after(grammarAccess.getActionAccess().getNameLOWERTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Action__PredicatesAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionAccess().getPredicatesPredicateParserRuleCall_3_0()); }
	rulePredicate{ after(grammarAccess.getActionAccess().getPredicatesPredicateParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Action__EvaluationsAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionAccess().getEvaluationsEvaluationsParserRuleCall_4_0()); }
	ruleEvaluations{ after(grammarAccess.getActionAccess().getEvaluationsEvaluationsParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Action__UpdatesAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionAccess().getUpdatesUpdatesParserRuleCall_5_0()); }
	ruleUpdates{ after(grammarAccess.getActionAccess().getUpdatesUpdatesParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Predicate__PredicatesAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPredicateAccess().getPredicatesPredicateExpressionParserRuleCall_2_0()); }
	rulePredicateExpression{ after(grammarAccess.getPredicateAccess().getPredicatesPredicateExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Evaluations__ExpressionsAssignment_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEvaluationsAccess().getExpressionsEvaluationExpressionParserRuleCall_0_2_0()); }
	ruleEvaluationExpression{ after(grammarAccess.getEvaluationsAccess().getExpressionsEvaluationExpressionParserRuleCall_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Evaluations__ExpressionsAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEvaluationsAccess().getExpressionsEvaluationExpressionParserRuleCall_1_2_0()); }
	ruleEvaluationExpression{ after(grammarAccess.getEvaluationsAccess().getExpressionsEvaluationExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Updates__UpdatesAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUpdatesAccess().getUpdatesUpdateExpressionParserRuleCall_2_0()); }
	ruleUpdateExpression{ after(grammarAccess.getUpdatesAccess().getUpdatesUpdateExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateExpression__ExpressionAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPredicateExpressionAccess().getExpressionExpressionParserRuleCall_0_0()); }
	ruleExpression{ after(grammarAccess.getPredicateExpressionAccess().getExpressionExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateExpression__ExpressionAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUpdateExpressionAccess().getExpressionExpressionParserRuleCall_0_0()); }
	ruleExpression{ after(grammarAccess.getUpdateExpressionAccess().getExpressionExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Store__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStoreAccess().getNameLOWERTerminalRuleCall_0_0()); }
	RULE_LOWER{ after(grammarAccess.getStoreAccess().getNameLOWERTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Store__ValueAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStoreAccess().getValueExpressionParserRuleCall_2_0()); }
	ruleExpression{ after(grammarAccess.getStoreAccess().getValueExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Or__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrAccess().getRightAndParserRuleCall_1_2_0()); }
	ruleAnd{ after(grammarAccess.getOrAccess().getRightAndParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__And__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndAccess().getRightEqualityParserRuleCall_1_2_0()); }
	ruleEquality{ after(grammarAccess.getAndAccess().getRightEqualityParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__OpAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityAccess().getOpAlternatives_1_1_0()); }
(rule__Equality__OpAlternatives_1_1_0)
{ after(grammarAccess.getEqualityAccess().getOpAlternatives_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityAccess().getRightComparisonParserRuleCall_1_2_0()); }
	ruleComparison{ after(grammarAccess.getEqualityAccess().getRightComparisonParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__OpAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getOpAlternatives_1_1_0()); }
(rule__Comparison__OpAlternatives_1_1_0)
{ after(grammarAccess.getComparisonAccess().getOpAlternatives_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getRightSubtractionParserRuleCall_1_2_0()); }
	ruleSubtraction{ after(grammarAccess.getComparisonAccess().getRightSubtractionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Subtraction__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtractionAccess().getRightAdditionParserRuleCall_1_2_0()); }
	ruleAddition{ after(grammarAccess.getSubtractionAccess().getRightAdditionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getRightMultiplicationParserRuleCall_1_2_0()); }
	ruleMultiplication{ after(grammarAccess.getAdditionAccess().getRightMultiplicationParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getRightDivisionParserRuleCall_1_2_0()); }
	ruleDivision{ after(grammarAccess.getMultiplicationAccess().getRightDivisionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Division__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDivisionAccess().getRightPrimaryParserRuleCall_1_2_0()); }
	rulePrimary{ after(grammarAccess.getDivisionAccess().getRightPrimaryParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__ExpressionAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryAccess().getExpressionPrimaryParserRuleCall_1_2_0()); }
	rulePrimary{ after(grammarAccess.getPrimaryAccess().getExpressionPrimaryParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__ValueAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicAccess().getValueDoubleParserRuleCall_0_1_0()); }
	ruleDouble{ after(grammarAccess.getAtomicAccess().getValueDoubleParserRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__ValueAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicAccess().getValueFreeVariableParserRuleCall_1_1_0()); }
	ruleFreeVariable{ after(grammarAccess.getAtomicAccess().getValueFreeVariableParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__ValueAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicAccess().getValueAlternatives_2_1_0()); }
(rule__Atomic__ValueAlternatives_2_1_0)
{ after(grammarAccess.getAtomicAccess().getValueAlternatives_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__ValueAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicAccess().getValueStoreCrossReference_3_1_0()); }
(
{ before(grammarAccess.getAtomicAccess().getValueStoreLOWERTerminalRuleCall_3_1_0_1()); }
	RULE_LOWER{ after(grammarAccess.getAtomicAccess().getValueStoreLOWERTerminalRuleCall_3_1_0_1()); }
)
{ after(grammarAccess.getAtomicAccess().getValueStoreCrossReference_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__ValueAssignment_4_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicAccess().getValueStoreCrossReference_4_2_0()); }
(
{ before(grammarAccess.getAtomicAccess().getValueStoreLOWERTerminalRuleCall_4_2_0_1()); }
	RULE_LOWER{ after(grammarAccess.getAtomicAccess().getValueStoreLOWERTerminalRuleCall_4_2_0_1()); }
)
{ after(grammarAccess.getAtomicAccess().getValueStoreCrossReference_4_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_LOWER : 'a'..'z' ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_UPPER : 'A'..'Z' ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


