grammar com.blasedef.onpa.ONPA with org.eclipse.xtext.common.Terminals

generate oNPA "http://www.blasedef.com/onpa/ONPA"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Model hidden(ML_COMMENT,SL_COMMENT,WS):
	stores+=Store+ 
	processes+=Process+ 
	terms+=Term+ 
;

//TERMS
Term hidden(ML_COMMENT,SL_COMMENT,WS):
	"(" name=[Process|UPPER] ",""{" stores+=[Store|LOWER] "}" ")"";"
;


//PROCESSES
Process hidden(ML_COMMENT,SL_COMMENT,WS):
	name=UPPER "=" value=ProcessExpression ";"
;

ProcessExpression returns ProcessExpression hidden(ML_COMMENT,SL_COMMENT,WS):
	Parallel
;

Parallel returns ProcessExpression hidden(ML_COMMENT,SL_COMMENT,WS):
	Choice ({Parallel.left=current}  "|" right=Choice)*
;

Choice returns ProcessExpression hidden(ML_COMMENT,SL_COMMENT,WS):
	PrimaryProcess ({Choice.left=current}  "+" right=PrimaryProcess)*
;

PrimaryProcess returns ProcessExpression hidden(ML_COMMENT,SL_COMMENT,WS):
	{Leaf} value="nil" |
	{Leaf} value="kill"|
	PredicateProcess |
	ActionProcess |
	{ProcessReference} value=[Process|UPPER]
;

PredicateProcess hidden(ML_COMMENT,SL_COMMENT,WS):
	{PredicateProcess} predicate=Predicate value=[Process|UPPER]
;

ActionProcess hidden(ML_COMMENT,SL_COMMENT,WS):
	{ActionProcess} action=Action value=[Process|UPPER]
;


//ACTIONS
Action returns Action hidden(ML_COMMENT,SL_COMMENT,WS):
	{Action} name=LOWER ("*")? predicates=Predicate evaluations=Evaluations updates=Updates "."
;

Predicate hidden(ML_COMMENT,SL_COMMENT,WS):
	{Predicate} "[" predicates=PredicateExpression "]"
;

Evaluations hidden(ML_COMMENT,SL_COMMENT,WS):
	 ("(" {In} expressions+=EvaluationExpression+ ")"| "<" {Out} expressions+=EvaluationExpression+ ">")
;

Updates hidden(ML_COMMENT,SL_COMMENT,WS):
	{Updates} "{" updates+=UpdateExpression+ "}"
;

PredicateExpression hidden(ML_COMMENT,SL_COMMENT,WS):
	expression=Expression ";"
;

EvaluationExpression hidden(ML_COMMENT,SL_COMMENT,WS):
	Expression ";"
;

UpdateExpression hidden(ML_COMMENT,SL_COMMENT,WS):
	expression=Expression ";"
;


//STORES
Store hidden(ML_COMMENT,SL_COMMENT,WS):
	name=LOWER "=" value=Expression ";"
;

Expression hidden(ML_COMMENT,SL_COMMENT,WS):
	Or
;
	
Or returns Expression hidden(ML_COMMENT,SL_COMMENT,WS):
	And ({Or.left=current} "||" 
		right=And
	)*
;

And returns Expression hidden(ML_COMMENT,SL_COMMENT,WS):
	Equality ({And.left=current} "&&" 
		right=Equality
	)*
;

Equality returns Expression hidden(ML_COMMENT,SL_COMMENT,WS):
	Comparison (
		{Equality.left=current} op=("=="|"!=")
		right=Comparison
	)*
;

Comparison returns Expression hidden(ML_COMMENT,SL_COMMENT,WS):
	Subtraction ({Comparison.left=current} op=(">="|"<="|">"|"<") 
		right=Subtraction
	)*
;
	
Subtraction returns Expression hidden(ML_COMMENT,SL_COMMENT,WS):
	Addition ({Sub.left=current} '-' 
		right=Addition
	)*
;
	
Addition returns Expression hidden(ML_COMMENT,SL_COMMENT,WS):
	Multiplication ({Plu.left=current} '+' 
		right=Multiplication
	)*
;

Multiplication returns Expression hidden(ML_COMMENT,SL_COMMENT,WS):
	Division ({Mul.left=current} '*' 
		right=Division
	)*
;
	
Division returns Expression hidden(ML_COMMENT,SL_COMMENT,WS): 
	Primary ({Div.left=current} '/' 
		right=Primary
	)*
;

Primary returns Expression hidden(ML_COMMENT,SL_COMMENT,WS):
	'(' Expression ')' | 
	{Not} "!" expression=Primary |
	Atomic
;

Atomic returns Expression hidden(ML_COMMENT,SL_COMMENT,WS):
	{DoubleConstant} 	value=Double |
	{FreeVariable} 		value=FreeVariable |
	{BoolConstant} 		value=('true'|'false') |
	{ReferencedStore} 	value=[Store|LOWER] |
	{ReferencedStore}   "this."value=[Store|LOWER]
;

Double returns ecore::EDouble:
	 INT ('.' INT ('e'|'E' '-'? INT)?)?
;

FreeVariable returns ecore::EString:
	"$"LOWER
;

terminal LOWER: ("a".."z") ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
terminal UPPER: ("A".."Z") ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

