/*
 * generated by Xtext
 */
package com.blasedef.onpa.validation

import com.blasedef.onpa.oNPA.Rate

import org.eclipse.xtext.validation.Check
import com.blasedef.onpa.oNPA.Constant
import com.blasedef.onpa.oNPA.Expression
import com.blasedef.onpa.oNPA.Sub
import com.blasedef.onpa.oNPA.Plu
import com.blasedef.onpa.oNPA.Mul
import com.blasedef.onpa.oNPA.Div
import java.util.ArrayList
import java.util.Set
import java.util.HashSet
import com.blasedef.onpa.oNPA.ONPAPackage

/**
 * Custom validation rules. 
 *
 * see http://www.eclipse.org/Xtext/documentation.html#validation
 */
class ONPAValidator extends AbstractONPAValidator {
	
	
	public static val SELF_REFERENCING_RATE = 'selfReferencingRate'
	
	@Check
	def checkNotSelfReferencing(Rate rate){
		
		if(rate == Constant)
			return //because it can't be self referencing
			
		var ArrayList<String> strings = new ArrayList<String>();
		
		strings.add(rate.name)
		
		findRateNames(rate.value,strings)
		
		var Set<String> setOfString = new HashSet<String>(strings);
		
		if(setOfString.size == strings.size)
			return //because there can't be any duplicates
		else
			error("Cannot have self referencing rates. '" + rate.name + "' is seen in the expression",
				ONPAPackage::eINSTANCE.rate_Value,
				SELF_REFERENCING_RATE
			)
		
	}
	
	def void findRateNames(Expression e, ArrayList<String> strings){
		switch (e) {
			Sub: {e.left.findRateNames(strings) e.right.findRateNames(strings)}
			Plu: {e.left.findRateNames(strings) e.right.findRateNames(strings)}
			Mul: {e.left.findRateNames(strings) e.right.findRateNames(strings)}
			Div: {e.left.findRateNames(strings) e.right.findRateNames(strings)}
			Rate: {strings.add(e.rate.name)}
		}
	}

//  public static val INVALID_NAME = 'invalidName'
//
//	@Check
//	def checkGreetingStartsWithCapital(Greeting greeting) {
//		if (!Character.isUpperCase(greeting.name.charAt(0))) {
//			warning('Name should start with a capital', 
//					MyDslPackage.Literals.GREETING__NAME,
//					INVALID_NAME)
//		}
//	}
}
