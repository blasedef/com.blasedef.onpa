/*
 * generated by Xtext
 */
package com.blasedef.onpa.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.generator.IFileSystemAccess
import com.blasedef.onpa.oNPA.Model
import com.blasedef.onpa.oNPA.Rate
import com.blasedef.onpa.oNPA.Expression
import com.blasedef.onpa.oNPA.Sub
import com.blasedef.onpa.oNPA.Plu
import com.blasedef.onpa.oNPA.Mul
import com.blasedef.onpa.oNPA.Div
import com.blasedef.onpa.oNPA.Constant

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
class ONPAGenerator implements IGenerator {
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		for (e : resource.allContents.toIterable.filter(typeof(Model))){
			fsa.generateFile("simulators/simulator.java",e.compile)
		}
	}
	
	def CharSequence compile(Model model){
		'''
		package simulators;
		
		public class simulator{
			«FOR rate : model.rates»
					«rate.compile»
			«ENDFOR»
		}
		
		'''
	}
	
	def CharSequence compile(Rate rate){
		'''
		public double get«rate.name.toFirstUpper»(){
			return «rate.value.compile» ;
		}
		'''
	}
	
	def CharSequence compile(Expression e){
		switch (e) {
			Sub: '''(«e.left.compile» - «e.right.compile»)'''
			Plu: '''(«e.left.compile» + «e.right.compile»)'''
			Mul: '''(«e.left.compile» * «e.right.compile»)'''
			Div: '''(«e.left.compile» / «e.right.compile»)'''
			Rate: '''get«e.rate.name.toFirstUpper»()'''
			Constant: '''«e.value»'''
		}
	}
}
