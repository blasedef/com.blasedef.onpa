grammar com.blasedef.onpa.ONPA with org.eclipse.xtext.common.Terminals

generate oNPA "http://www.blasedef.com/onpa/ONPA"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Model:
	stores+=Store*
	actions+=Action*
	//predicates+=Predicates*
;

Action:
	(BroadcastOut  | UnicastOut | BroadcastIn | UnicastIn) ";"
;

BroadcastOut:
	name=LOWER "*"  predicate=Predicates evaluation=Evaluations update=Updates
;

BroadcastIn:
	name=LOWER "*"  values=Values update=Updates predicate=Predicates 
;

UnicastOut:
	name=LOWER  predicate=Predicates evaluation=Evaluations update=Updates
;

UnicastIn:
	name=LOWER values=Values update=Updates predicate=Predicates
;

Updates:
	{Updates} "{" (updateExpressions+=UpdateExpression+)?  "}"
;

UpdateExpression returns UpdateExpression:
	name=[Store|LOWER] "=" value=Expression ";"
;

Values:
	{Values} "(" (values+=ValueExpression)? ")" //What is the point of this? (Knowing what local stores belong to who? - if so, shouldn't this be automatic?) - CDW 07.01.15
;

ValueExpression:
	name=[Store|LOWER] ";"
;

Evaluations:
	{Evaluations} "<" (evaluations+=Evaluation)? ">"
;

Evaluation:
	name=[Store|LOWER] "=" value=Expression
;

Predicates:
	 {Predicates} "[" expressions+=PredicateExpression "]"
;

PredicateExpression:
	value=Expression
;

Store:
	AttributeValue ";"
;

AttributeValue:
	name=LOWER "=" value=Expression 
;

Expression:
	Or
;
	
Or returns Expression:
	And ({Or.left=current} "||" 
		right=And
	)*
;

And returns Expression:
	Equality ({And.left=current} "&&" 
		right=Equality
	)*
;

Equality returns Expression:
	Comparison (
		{Equality.left=current} op=("=="|"!=")
		right=Comparison
	)*
;

Comparison returns Expression:
	Subtraction ({Comparison.left=current} op=(">="|"<="|">"|"<") 
		right=Subtraction
	)*
;
	
Subtraction returns Expression:
	Addition ({Sub.left=current} '-' 
		right=Addition
	)*
;
	
Addition returns Expression:
	Multiplication ({Plu.left=current} '+' 
		right=Multiplication
	)*
;

Multiplication returns Expression:
	Division ({Mul.left=current} '*' 
		right=Division
	)*
;
	
Division returns Expression:
	Primary ({Div.left=current} '/' 
		right=Primary
	)*
;

Primary returns Expression:
	'(' Expression ')' | 
	{Not} "!" expression=Primary |
	Atomic
;
	
Atomic returns Expression:
	{DoubleConstant} value=Double |
	{BoolConstant} value=('true'|'false') |
	{ReferencedRate} value=[AttributeValue|LOWER] |
	{ReferencedRate} "this."value=[AttributeValue|LOWER] 
;

LowerCase returns ecore::EString:
	LOWER
;

Double returns ecore::EDouble:
	 INT ('.' INT ('e'|'E' '-'? INT)?)?
;
	
terminal LOWER: ('a'..'z')+ (ID)?;
terminal UPPER: ('A'..'Z')+ (ID)?;
terminal INACTIVECOMPONENT: "InactiveComponent";
