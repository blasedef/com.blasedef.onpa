/*
* generated by Xtext
*/
grammar InternalONPA;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package com.blasedef.onpa.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package com.blasedef.onpa.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import com.blasedef.onpa.services.ONPAGrammarAccess;

}

@parser::members {

 	private ONPAGrammarAccess grammarAccess;
 	
    public InternalONPAParser(TokenStream input, ONPAGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected ONPAGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getStoresStoreParserRuleCall_0_0()); 
	    }
		lv_stores_0_0=ruleStore		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"stores",
        		lv_stores_0_0, 
        		"Store");
	        afterParserOrEnumRuleCall();
	    }

)
)+(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getProcessesProcessParserRuleCall_1_0()); 
	    }
		lv_processes_1_0=ruleProcess		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"processes",
        		lv_processes_1_0, 
        		"Process");
	        afterParserOrEnumRuleCall();
	    }

)
)+(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getTermsTermParserRuleCall_2_0()); 
	    }
		lv_terms_2_0=ruleTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"terms",
        		lv_terms_2_0, 
        		"Term");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleTerm
entryRuleTerm returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getTermRule()); }
	 iv_ruleTerm=ruleTerm 
	 { $current=$iv_ruleTerm.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Term
ruleTerm returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
    }
    @after { leaveRule(); }:
(	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTermAccess().getLeftParenthesisKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTermRule());
	        }
        }
	otherlv_1=RULE_UPPER
	{
		newLeafNode(otherlv_1, grammarAccess.getTermAccess().getNameProcessCrossReference_1_0()); 
	}

)
)	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTermAccess().getCommaKeyword_2());
    }
	otherlv_3='{' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTermAccess().getLeftCurlyBracketKeyword_3());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTermRule());
	        }
        }
	otherlv_4=RULE_LOWER
	{
		newLeafNode(otherlv_4, grammarAccess.getTermAccess().getStoresStoreCrossReference_4_0()); 
	}

)
)	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getTermAccess().getRightCurlyBracketKeyword_5());
    }
	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getTermAccess().getRightParenthesisKeyword_6());
    }
	otherlv_7=';' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getTermAccess().getSemicolonKeyword_7());
    }
)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleProcess
entryRuleProcess returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getProcessRule()); }
	 iv_ruleProcess=ruleProcess 
	 { $current=$iv_ruleProcess.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Process
ruleProcess returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_UPPER
		{
			newLeafNode(lv_name_0_0, grammarAccess.getProcessAccess().getNameUPPERTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getProcessRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"UPPER");
	    }

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getProcessAccess().getEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getProcessAccess().getValueProcessExpressionParserRuleCall_2_0()); 
	    }
		lv_value_2_0=ruleProcessExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProcessRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"ProcessExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getProcessAccess().getSemicolonKeyword_3());
    }
)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleProcessExpression
entryRuleProcessExpression returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getProcessExpressionRule()); }
	 iv_ruleProcessExpression=ruleProcessExpression 
	 { $current=$iv_ruleProcessExpression.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule ProcessExpression
ruleProcessExpression returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getProcessExpressionAccess().getParallelParserRuleCall()); 
    }
    this_Parallel_0=ruleParallel
    { 
        $current = $this_Parallel_0.current; 
        afterParserOrEnumRuleCall();
    }

;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleParallel
entryRuleParallel returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getParallelRule()); }
	 iv_ruleParallel=ruleParallel 
	 { $current=$iv_ruleParallel.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Parallel
ruleParallel returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getParallelAccess().getChoiceParserRuleCall_0()); 
    }
    this_Choice_0=ruleChoice
    { 
        $current = $this_Choice_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getParallelAccess().getParallelLeftAction_1_0(),
            $current);
    }
)	otherlv_2='|' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getParallelAccess().getVerticalLineKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getParallelAccess().getRightChoiceParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleChoice		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParallelRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"Choice");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleChoice
entryRuleChoice returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getChoiceRule()); }
	 iv_ruleChoice=ruleChoice 
	 { $current=$iv_ruleChoice.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Choice
ruleChoice returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getChoiceAccess().getPrimaryProcessParserRuleCall_0()); 
    }
    this_PrimaryProcess_0=rulePrimaryProcess
    { 
        $current = $this_PrimaryProcess_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getChoiceAccess().getChoiceLeftAction_1_0(),
            $current);
    }
)	otherlv_2='+' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getChoiceAccess().getPlusSignKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getChoiceAccess().getRightPrimaryProcessParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=rulePrimaryProcess		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getChoiceRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"PrimaryProcess");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRulePrimaryProcess
entryRulePrimaryProcess returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getPrimaryProcessRule()); }
	 iv_rulePrimaryProcess=rulePrimaryProcess 
	 { $current=$iv_rulePrimaryProcess.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule PrimaryProcess
rulePrimaryProcess returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPrimaryProcessAccess().getLeafAction_0_0(),
            $current);
    }
)(
(
		lv_value_1_0=	'nil' 
    {
        newLeafNode(lv_value_1_0, grammarAccess.getPrimaryProcessAccess().getValueNilKeyword_0_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrimaryProcessRule());
	        }
       		setWithLastConsumed($current, "value", lv_value_1_0, "nil");
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPrimaryProcessAccess().getLeafAction_1_0(),
            $current);
    }
)(
(
		lv_value_3_0=	'kill' 
    {
        newLeafNode(lv_value_3_0, grammarAccess.getPrimaryProcessAccess().getValueKillKeyword_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrimaryProcessRule());
	        }
       		setWithLastConsumed($current, "value", lv_value_3_0, "kill");
	    }

)
))
    |
    { 
        newCompositeNode(grammarAccess.getPrimaryProcessAccess().getPredicateProcessParserRuleCall_2()); 
    }
    this_PredicateProcess_4=rulePredicateProcess
    { 
        $current = $this_PredicateProcess_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPrimaryProcessAccess().getActionProcessParserRuleCall_3()); 
    }
    this_ActionProcess_5=ruleActionProcess
    { 
        $current = $this_ActionProcess_5.current; 
        afterParserOrEnumRuleCall();
    }

    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPrimaryProcessAccess().getProcessReferenceAction_4_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrimaryProcessRule());
	        }
        }
	otherlv_7=RULE_UPPER
	{
		newLeafNode(otherlv_7, grammarAccess.getPrimaryProcessAccess().getValueProcessCrossReference_4_1_0()); 
	}

)
)))
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRulePredicateProcess
entryRulePredicateProcess returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getPredicateProcessRule()); }
	 iv_rulePredicateProcess=rulePredicateProcess 
	 { $current=$iv_rulePredicateProcess.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule PredicateProcess
rulePredicateProcess returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPredicateProcessAccess().getPredicateProcessAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPredicateProcessAccess().getPredicatePredicateParserRuleCall_1_0()); 
	    }
		lv_predicate_1_0=rulePredicate		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPredicateProcessRule());
	        }
       		set(
       			$current, 
       			"predicate",
        		lv_predicate_1_0, 
        		"Predicate");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getPredicateProcessRule());
	        }
        }
	otherlv_2=RULE_UPPER
	{
		newLeafNode(otherlv_2, grammarAccess.getPredicateProcessAccess().getValueProcessCrossReference_2_0()); 
	}

)
))
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleActionProcess
entryRuleActionProcess returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getActionProcessRule()); }
	 iv_ruleActionProcess=ruleActionProcess 
	 { $current=$iv_ruleActionProcess.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule ActionProcess
ruleActionProcess returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getActionProcessAccess().getActionProcessAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getActionProcessAccess().getActionActionParserRuleCall_1_0()); 
	    }
		lv_action_1_0=ruleAction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getActionProcessRule());
	        }
       		set(
       			$current, 
       			"action",
        		lv_action_1_0, 
        		"Action");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getActionProcessRule());
	        }
        }
	otherlv_2=RULE_UPPER
	{
		newLeafNode(otherlv_2, grammarAccess.getActionProcessAccess().getValueProcessCrossReference_2_0()); 
	}

)
))
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleAction
entryRuleAction returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getActionRule()); }
	 iv_ruleAction=ruleAction 
	 { $current=$iv_ruleAction.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Action
ruleAction returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
    }
    @after { leaveRule(); }:
((((
    {
        $current = forceCreateModelElement(
            grammarAccess.getActionAccess().getBroadcastAction_0_0_0(),
            $current);
    }
)(
(
		lv_name_1_0=RULE_LOWER
		{
			newLeafNode(lv_name_1_0, grammarAccess.getActionAccess().getNameLOWERTerminalRuleCall_0_0_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getActionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"LOWER");
	    }

)
)	otherlv_2='*' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getActionAccess().getAsteriskKeyword_0_0_2());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getActionAccess().getUnicastAction_0_1_0(),
            $current);
    }
)(
(
		lv_name_4_0=RULE_LOWER
		{
			newLeafNode(lv_name_4_0, grammarAccess.getActionAccess().getNameLOWERTerminalRuleCall_0_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getActionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_4_0, 
        		"LOWER");
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getActionAccess().getPredicatePredicateParserRuleCall_1_0()); 
	    }
		lv_predicate_5_0=rulePredicate		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getActionRule());
	        }
       		set(
       			$current, 
       			"predicate",
        		lv_predicate_5_0, 
        		"Predicate");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getActionAccess().getEvaluationsEvaluationsParserRuleCall_2_0()); 
	    }
		lv_evaluations_6_0=ruleEvaluations		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getActionRule());
	        }
       		set(
       			$current, 
       			"evaluations",
        		lv_evaluations_6_0, 
        		"Evaluations");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getActionAccess().getUpdatesUpdatesParserRuleCall_3_0()); 
	    }
		lv_updates_7_0=ruleUpdates		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getActionRule());
	        }
       		set(
       			$current, 
       			"updates",
        		lv_updates_7_0, 
        		"Updates");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_8='.' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getActionAccess().getFullStopKeyword_4());
    }
)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRulePredicate
entryRulePredicate returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getPredicateRule()); }
	 iv_rulePredicate=rulePredicate 
	 { $current=$iv_rulePredicate.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Predicate
rulePredicate returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPredicateAccess().getPredicateAction_0(),
            $current);
    }
)	otherlv_1='[' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPredicateAccess().getLeftSquareBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPredicateAccess().getPredicatePredicateExpressionParserRuleCall_2_0()); 
	    }
		lv_predicate_2_0=rulePredicateExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPredicateRule());
	        }
       		set(
       			$current, 
       			"predicate",
        		lv_predicate_2_0, 
        		"PredicateExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=']' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getPredicateAccess().getRightSquareBracketKeyword_3());
    }
)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleEvaluations
entryRuleEvaluations returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getEvaluationsRule()); }
	 iv_ruleEvaluations=ruleEvaluations 
	 { $current=$iv_ruleEvaluations.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Evaluations
ruleEvaluations returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
    }
    @after { leaveRule(); }:
((	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getEvaluationsAccess().getLeftParenthesisKeyword_0_0());
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getEvaluationsAccess().getInAction_0_1(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getEvaluationsAccess().getExpressionsEvaluationExpressionInParserRuleCall_0_2_0()); 
	    }
		lv_expressions_2_0=ruleEvaluationExpressionIn		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEvaluationsRule());
	        }
       		add(
       			$current, 
       			"expressions",
        		lv_expressions_2_0, 
        		"EvaluationExpressionIn");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getEvaluationsAccess().getRightParenthesisKeyword_0_3());
    }
)
    |(	otherlv_4='<' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getEvaluationsAccess().getLessThanSignKeyword_1_0());
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getEvaluationsAccess().getOutAction_1_1(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getEvaluationsAccess().getExpressionsEvaluationExpressionOutParserRuleCall_1_2_0()); 
	    }
		lv_expressions_6_0=ruleEvaluationExpressionOut		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEvaluationsRule());
	        }
       		add(
       			$current, 
       			"expressions",
        		lv_expressions_6_0, 
        		"EvaluationExpressionOut");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_7='>' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getEvaluationsAccess().getGreaterThanSignKeyword_1_3());
    }
))
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleUpdates
entryRuleUpdates returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getUpdatesRule()); }
	 iv_ruleUpdates=ruleUpdates 
	 { $current=$iv_ruleUpdates.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Updates
ruleUpdates returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getUpdatesAccess().getUpdatesAction_0(),
            $current);
    }
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getUpdatesAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUpdatesAccess().getUpdatesUpdateExpressionParserRuleCall_2_0()); 
	    }
		lv_updates_2_0=ruleUpdateExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUpdatesRule());
	        }
       		add(
       			$current, 
       			"updates",
        		lv_updates_2_0, 
        		"UpdateExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getUpdatesAccess().getRightCurlyBracketKeyword_3());
    }
)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRulePredicateExpression
entryRulePredicateExpression returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getPredicateExpressionRule()); }
	 iv_rulePredicateExpression=rulePredicateExpression 
	 { $current=$iv_rulePredicateExpression.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule PredicateExpression
rulePredicateExpression returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getPredicateExpressionAccess().getExpressionActionExpressionParserRuleCall_0_0()); 
	    }
		lv_expression_0_0=ruleActionExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPredicateExpressionRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_0_0, 
        		"ActionExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=';' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPredicateExpressionAccess().getSemicolonKeyword_1());
    }
)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleEvaluationExpressionIn
entryRuleEvaluationExpressionIn returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getEvaluationExpressionInRule()); }
	 iv_ruleEvaluationExpressionIn=ruleEvaluationExpressionIn 
	 { $current=$iv_ruleEvaluationExpressionIn.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule EvaluationExpressionIn
ruleEvaluationExpressionIn returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getEvaluationExpressionInAccess().getLocalEvaluationExpressionAction_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getEvaluationExpressionInAccess().getNameSelfReferencedStoreParserRuleCall_0_1_0()); 
	    }
		lv_name_1_0=ruleSelfReferencedStore		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEvaluationExpressionInRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"SelfReferencedStore");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=':=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getEvaluationExpressionInAccess().getColonEqualsSignKeyword_0_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEvaluationExpressionInAccess().getExpressionActionExpressionParserRuleCall_0_3_0()); 
	    }
		lv_expression_3_0=ruleActionExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEvaluationExpressionInRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_3_0, 
        		"ActionExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getEvaluationExpressionInAccess().getSemicolonKeyword_0_4());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getEvaluationExpressionInAccess().getGlobalEvaluationExpressionAction_1_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getEvaluationExpressionInRule());
	        }
        }
	otherlv_6=RULE_LOWER
	{
		newLeafNode(otherlv_6, grammarAccess.getEvaluationExpressionInAccess().getNameStoreCrossReference_1_1_0()); 
	}

)
)	otherlv_7=':=' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getEvaluationExpressionInAccess().getColonEqualsSignKeyword_1_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEvaluationExpressionInAccess().getExpressionActionExpressionParserRuleCall_1_3_0()); 
	    }
		lv_expression_8_0=ruleActionExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEvaluationExpressionInRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_8_0, 
        		"ActionExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_9=';' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getEvaluationExpressionInAccess().getSemicolonKeyword_1_4());
    }
))
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleEvaluationExpressionOut
entryRuleEvaluationExpressionOut returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getEvaluationExpressionOutRule()); }
	 iv_ruleEvaluationExpressionOut=ruleEvaluationExpressionOut 
	 { $current=$iv_ruleEvaluationExpressionOut.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule EvaluationExpressionOut
ruleEvaluationExpressionOut returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getEvaluationExpressionOutAccess().getFreeEvaluationExpressionAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getEvaluationExpressionOutAccess().getNameFreeVariableParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleFreeVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEvaluationExpressionOutRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"FreeVariable");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=':=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getEvaluationExpressionOutAccess().getColonEqualsSignKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEvaluationExpressionOutAccess().getExpressionActionExpressionParserRuleCall_3_0()); 
	    }
		lv_expression_3_0=ruleActionExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEvaluationExpressionOutRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_3_0, 
        		"ActionExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getEvaluationExpressionOutAccess().getSemicolonKeyword_4());
    }
)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleUpdateExpression
entryRuleUpdateExpression returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getUpdateExpressionRule()); }
	 iv_ruleUpdateExpression=ruleUpdateExpression 
	 { $current=$iv_ruleUpdateExpression.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule UpdateExpression
ruleUpdateExpression returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getUpdateExpressionAccess().getLocalUpdateExpressionAction_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getUpdateExpressionAccess().getNameSelfReferencedStoreParserRuleCall_0_1_0()); 
	    }
		lv_name_1_0=ruleSelfReferencedStore		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUpdateExpressionRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"SelfReferencedStore");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=':=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getUpdateExpressionAccess().getColonEqualsSignKeyword_0_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUpdateExpressionAccess().getExpressionActionExpressionParserRuleCall_0_3_0()); 
	    }
		lv_expression_3_0=ruleActionExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUpdateExpressionRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_3_0, 
        		"ActionExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getUpdateExpressionAccess().getSemicolonKeyword_0_4());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getUpdateExpressionAccess().getGlobalUpdateExpressionAction_1_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getUpdateExpressionRule());
	        }
        }
	otherlv_6=RULE_LOWER
	{
		newLeafNode(otherlv_6, grammarAccess.getUpdateExpressionAccess().getNameStoreCrossReference_1_1_0()); 
	}

)
)	otherlv_7=':=' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getUpdateExpressionAccess().getColonEqualsSignKeyword_1_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUpdateExpressionAccess().getExpressionActionExpressionParserRuleCall_1_3_0()); 
	    }
		lv_expression_8_0=ruleActionExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUpdateExpressionRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_8_0, 
        		"ActionExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_9=';' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getUpdateExpressionAccess().getSemicolonKeyword_1_4());
    }
))
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleSelfReferencedStore
entryRuleSelfReferencedStore returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getSelfReferencedStoreRule()); }
	 iv_ruleSelfReferencedStore=ruleSelfReferencedStore 
	 { $current=$iv_ruleSelfReferencedStore.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule SelfReferencedStore
ruleSelfReferencedStore returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getSelfReferencedStoreAccess().getSelfReferencedStoreAction_0(),
            $current);
    }
)	otherlv_1='this.' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSelfReferencedStoreAccess().getThisKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getSelfReferencedStoreRule());
	        }
        }
	otherlv_2=RULE_LOWER
	{
		newLeafNode(otherlv_2, grammarAccess.getSelfReferencedStoreAccess().getNameStoreCrossReference_2_0()); 
	}

)
))
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleActionExpression
entryRuleActionExpression returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getActionExpressionRule()); }
	 iv_ruleActionExpression=ruleActionExpression 
	 { $current=$iv_ruleActionExpression.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule ActionExpression
ruleActionExpression returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getActionExpressionAccess().getActionOrParserRuleCall()); 
    }
    this_ActionOr_0=ruleActionOr
    { 
        $current = $this_ActionOr_0.current; 
        afterParserOrEnumRuleCall();
    }

;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleActionOr
entryRuleActionOr returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getActionOrRule()); }
	 iv_ruleActionOr=ruleActionOr 
	 { $current=$iv_ruleActionOr.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule ActionOr
ruleActionOr returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getActionOrAccess().getActionAndParserRuleCall_0()); 
    }
    this_ActionAnd_0=ruleActionAnd
    { 
        $current = $this_ActionAnd_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getActionOrAccess().getActionOrLeftAction_1_0(),
            $current);
    }
)	otherlv_2='||' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getActionOrAccess().getVerticalLineVerticalLineKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getActionOrAccess().getRightActionAndParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleActionAnd		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getActionOrRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"ActionAnd");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleActionAnd
entryRuleActionAnd returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getActionAndRule()); }
	 iv_ruleActionAnd=ruleActionAnd 
	 { $current=$iv_ruleActionAnd.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule ActionAnd
ruleActionAnd returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getActionAndAccess().getActionEqualityParserRuleCall_0()); 
    }
    this_ActionEquality_0=ruleActionEquality
    { 
        $current = $this_ActionEquality_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getActionAndAccess().getActionAndLeftAction_1_0(),
            $current);
    }
)	otherlv_2='&&' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getActionAndAccess().getAmpersandAmpersandKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getActionAndAccess().getRightActionEqualityParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleActionEquality		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getActionAndRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"ActionEquality");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleActionEquality
entryRuleActionEquality returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getActionEqualityRule()); }
	 iv_ruleActionEquality=ruleActionEquality 
	 { $current=$iv_ruleActionEquality.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule ActionEquality
ruleActionEquality returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getActionEqualityAccess().getActionComparisonParserRuleCall_0()); 
    }
    this_ActionComparison_0=ruleActionComparison
    { 
        $current = $this_ActionComparison_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getActionEqualityAccess().getActionEqualityLeftAction_1_0(),
            $current);
    }
)(
(
(
		lv_op_2_1=	'==' 
    {
        newLeafNode(lv_op_2_1, grammarAccess.getActionEqualityAccess().getOpEqualsSignEqualsSignKeyword_1_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getActionEqualityRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_1, null);
	    }

    |		lv_op_2_2=	'!=' 
    {
        newLeafNode(lv_op_2_2, grammarAccess.getActionEqualityAccess().getOpExclamationMarkEqualsSignKeyword_1_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getActionEqualityRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_2, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getActionEqualityAccess().getRightActionComparisonParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleActionComparison		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getActionEqualityRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"ActionComparison");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleActionComparison
entryRuleActionComparison returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getActionComparisonRule()); }
	 iv_ruleActionComparison=ruleActionComparison 
	 { $current=$iv_ruleActionComparison.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule ActionComparison
ruleActionComparison returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getActionComparisonAccess().getActionSubtractionParserRuleCall_0()); 
    }
    this_ActionSubtraction_0=ruleActionSubtraction
    { 
        $current = $this_ActionSubtraction_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getActionComparisonAccess().getActionComparisonLeftAction_1_0(),
            $current);
    }
)(
(
(
		lv_op_2_1=	'>=' 
    {
        newLeafNode(lv_op_2_1, grammarAccess.getActionComparisonAccess().getOpGreaterThanSignEqualsSignKeyword_1_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getActionComparisonRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_1, null);
	    }

    |		lv_op_2_2=	'<=' 
    {
        newLeafNode(lv_op_2_2, grammarAccess.getActionComparisonAccess().getOpLessThanSignEqualsSignKeyword_1_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getActionComparisonRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_2, null);
	    }

    |		lv_op_2_3=	'>' 
    {
        newLeafNode(lv_op_2_3, grammarAccess.getActionComparisonAccess().getOpGreaterThanSignKeyword_1_1_0_2());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getActionComparisonRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_3, null);
	    }

    |		lv_op_2_4=	'<' 
    {
        newLeafNode(lv_op_2_4, grammarAccess.getActionComparisonAccess().getOpLessThanSignKeyword_1_1_0_3());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getActionComparisonRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_4, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getActionComparisonAccess().getRightActionSubtractionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleActionSubtraction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getActionComparisonRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"ActionSubtraction");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleActionSubtraction
entryRuleActionSubtraction returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getActionSubtractionRule()); }
	 iv_ruleActionSubtraction=ruleActionSubtraction 
	 { $current=$iv_ruleActionSubtraction.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule ActionSubtraction
ruleActionSubtraction returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getActionSubtractionAccess().getActionAdditionParserRuleCall_0()); 
    }
    this_ActionAddition_0=ruleActionAddition
    { 
        $current = $this_ActionAddition_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getActionSubtractionAccess().getActionSubLeftAction_1_0(),
            $current);
    }
)	otherlv_2='-' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getActionSubtractionAccess().getHyphenMinusKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getActionSubtractionAccess().getRightActionAdditionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleActionAddition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getActionSubtractionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"ActionAddition");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleActionAddition
entryRuleActionAddition returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getActionAdditionRule()); }
	 iv_ruleActionAddition=ruleActionAddition 
	 { $current=$iv_ruleActionAddition.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule ActionAddition
ruleActionAddition returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getActionAdditionAccess().getActionMultiplicationParserRuleCall_0()); 
    }
    this_ActionMultiplication_0=ruleActionMultiplication
    { 
        $current = $this_ActionMultiplication_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getActionAdditionAccess().getActionPluLeftAction_1_0(),
            $current);
    }
)	otherlv_2='+' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getActionAdditionAccess().getPlusSignKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getActionAdditionAccess().getRightActionMultiplicationParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleActionMultiplication		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getActionAdditionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"ActionMultiplication");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleActionMultiplication
entryRuleActionMultiplication returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getActionMultiplicationRule()); }
	 iv_ruleActionMultiplication=ruleActionMultiplication 
	 { $current=$iv_ruleActionMultiplication.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule ActionMultiplication
ruleActionMultiplication returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getActionMultiplicationAccess().getActionDivisionParserRuleCall_0()); 
    }
    this_ActionDivision_0=ruleActionDivision
    { 
        $current = $this_ActionDivision_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getActionMultiplicationAccess().getActionMulLeftAction_1_0(),
            $current);
    }
)	otherlv_2='*' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getActionMultiplicationAccess().getAsteriskKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getActionMultiplicationAccess().getRightActionDivisionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleActionDivision		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getActionMultiplicationRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"ActionDivision");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleActionDivision
entryRuleActionDivision returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getActionDivisionRule()); }
	 iv_ruleActionDivision=ruleActionDivision 
	 { $current=$iv_ruleActionDivision.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule ActionDivision
ruleActionDivision returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getActionDivisionAccess().getActionPrimaryParserRuleCall_0()); 
    }
    this_ActionPrimary_0=ruleActionPrimary
    { 
        $current = $this_ActionPrimary_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getActionDivisionAccess().getActionDivLeftAction_1_0(),
            $current);
    }
)	otherlv_2='/' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getActionDivisionAccess().getSolidusKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getActionDivisionAccess().getRightActionPrimaryParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleActionPrimary		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getActionDivisionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"ActionPrimary");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleActionPrimary
entryRuleActionPrimary returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getActionPrimaryRule()); }
	 iv_ruleActionPrimary=ruleActionPrimary 
	 { $current=$iv_ruleActionPrimary.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule ActionPrimary
ruleActionPrimary returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
    }
    @after { leaveRule(); }:
((	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getActionPrimaryAccess().getLeftParenthesisKeyword_0_0());
    }

    { 
        newCompositeNode(grammarAccess.getActionPrimaryAccess().getActionExpressionParserRuleCall_0_1()); 
    }
    this_ActionExpression_1=ruleActionExpression
    { 
        $current = $this_ActionExpression_1.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_2=')' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getActionPrimaryAccess().getRightParenthesisKeyword_0_2());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getActionPrimaryAccess().getActionNotAction_1_0(),
            $current);
    }
)	otherlv_4='!' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getActionPrimaryAccess().getExclamationMarkKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getActionPrimaryAccess().getExpressionActionPrimaryParserRuleCall_1_2_0()); 
	    }
		lv_expression_5_0=ruleActionPrimary		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getActionPrimaryRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_5_0, 
        		"ActionPrimary");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |
    { 
        newCompositeNode(grammarAccess.getActionPrimaryAccess().getActionAtomicParserRuleCall_2()); 
    }
    this_ActionAtomic_6=ruleActionAtomic
    { 
        $current = $this_ActionAtomic_6.current; 
        afterParserOrEnumRuleCall();
    }
)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleActionAtomic
entryRuleActionAtomic returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getActionAtomicRule()); }
	 iv_ruleActionAtomic=ruleActionAtomic 
	 { $current=$iv_ruleActionAtomic.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule ActionAtomic
ruleActionAtomic returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getActionAtomicAccess().getDoubleConstantAction_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getActionAtomicAccess().getValueDoubleParserRuleCall_0_1_0()); 
	    }
		lv_value_1_0=ruleDouble		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getActionAtomicRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"Double");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getActionAtomicAccess().getFreeVariableAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getActionAtomicAccess().getValueFreeVariableParserRuleCall_1_1_0()); 
	    }
		lv_value_3_0=ruleFreeVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getActionAtomicRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_3_0, 
        		"FreeVariable");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getActionAtomicAccess().getBoolConstantAction_2_0(),
            $current);
    }
)(
(
(
		lv_value_5_1=	'true' 
    {
        newLeafNode(lv_value_5_1, grammarAccess.getActionAtomicAccess().getValueTrueKeyword_2_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getActionAtomicRule());
	        }
       		setWithLastConsumed($current, "value", lv_value_5_1, null);
	    }

    |		lv_value_5_2=	'false' 
    {
        newLeafNode(lv_value_5_2, grammarAccess.getActionAtomicAccess().getValueFalseKeyword_2_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getActionAtomicRule());
	        }
       		setWithLastConsumed($current, "value", lv_value_5_2, null);
	    }

)

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getActionAtomicAccess().getReferencedStoreAction_3_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getActionAtomicRule());
	        }
        }
	otherlv_7=RULE_LOWER
	{
		newLeafNode(otherlv_7, grammarAccess.getActionAtomicAccess().getValueStoreCrossReference_3_1_0()); 
	}

)
)))
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleStore
entryRuleStore returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getStoreRule()); }
	 iv_ruleStore=ruleStore 
	 { $current=$iv_ruleStore.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Store
ruleStore returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_LOWER
		{
			newLeafNode(lv_name_0_0, grammarAccess.getStoreAccess().getNameLOWERTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStoreRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"LOWER");
	    }

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getStoreAccess().getEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStoreAccess().getValueExpressionParserRuleCall_2_0()); 
	    }
		lv_value_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStoreRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getStoreAccess().getSemicolonKeyword_3());
    }
)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getOrParserRuleCall()); 
    }
    this_Or_0=ruleOr
    { 
        $current = $this_Or_0.current; 
        afterParserOrEnumRuleCall();
    }

;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleOr
entryRuleOr returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getOrRule()); }
	 iv_ruleOr=ruleOr 
	 { $current=$iv_ruleOr.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Or
ruleOr returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getOrAccess().getAndParserRuleCall_0()); 
    }
    this_And_0=ruleAnd
    { 
        $current = $this_And_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getOrAccess().getOrLeftAction_1_0(),
            $current);
    }
)	otherlv_2='||' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getOrAccess().getVerticalLineVerticalLineKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOrAccess().getRightAndParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleAnd		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOrRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"And");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleAnd
entryRuleAnd returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getAndRule()); }
	 iv_ruleAnd=ruleAnd 
	 { $current=$iv_ruleAnd.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule And
ruleAnd returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAndAccess().getEqualityParserRuleCall_0()); 
    }
    this_Equality_0=ruleEquality
    { 
        $current = $this_Equality_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAndAccess().getAndLeftAction_1_0(),
            $current);
    }
)	otherlv_2='&&' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAndAccess().getAmpersandAmpersandKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAndAccess().getRightEqualityParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleEquality		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAndRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"Equality");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleEquality
entryRuleEquality returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getEqualityRule()); }
	 iv_ruleEquality=ruleEquality 
	 { $current=$iv_ruleEquality.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Equality
ruleEquality returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getEqualityAccess().getComparisonParserRuleCall_0()); 
    }
    this_Comparison_0=ruleComparison
    { 
        $current = $this_Comparison_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getEqualityAccess().getEqualityLeftAction_1_0(),
            $current);
    }
)(
(
(
		lv_op_2_1=	'==' 
    {
        newLeafNode(lv_op_2_1, grammarAccess.getEqualityAccess().getOpEqualsSignEqualsSignKeyword_1_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEqualityRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_1, null);
	    }

    |		lv_op_2_2=	'!=' 
    {
        newLeafNode(lv_op_2_2, grammarAccess.getEqualityAccess().getOpExclamationMarkEqualsSignKeyword_1_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEqualityRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_2, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getEqualityAccess().getRightComparisonParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleComparison		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEqualityRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"Comparison");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleComparison
entryRuleComparison returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getComparisonRule()); }
	 iv_ruleComparison=ruleComparison 
	 { $current=$iv_ruleComparison.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Comparison
ruleComparison returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getComparisonAccess().getSubtractionParserRuleCall_0()); 
    }
    this_Subtraction_0=ruleSubtraction
    { 
        $current = $this_Subtraction_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getComparisonAccess().getComparisonLeftAction_1_0(),
            $current);
    }
)(
(
(
		lv_op_2_1=	'>=' 
    {
        newLeafNode(lv_op_2_1, grammarAccess.getComparisonAccess().getOpGreaterThanSignEqualsSignKeyword_1_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getComparisonRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_1, null);
	    }

    |		lv_op_2_2=	'<=' 
    {
        newLeafNode(lv_op_2_2, grammarAccess.getComparisonAccess().getOpLessThanSignEqualsSignKeyword_1_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getComparisonRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_2, null);
	    }

    |		lv_op_2_3=	'>' 
    {
        newLeafNode(lv_op_2_3, grammarAccess.getComparisonAccess().getOpGreaterThanSignKeyword_1_1_0_2());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getComparisonRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_3, null);
	    }

    |		lv_op_2_4=	'<' 
    {
        newLeafNode(lv_op_2_4, grammarAccess.getComparisonAccess().getOpLessThanSignKeyword_1_1_0_3());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getComparisonRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_4, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getComparisonAccess().getRightSubtractionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleSubtraction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComparisonRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"Subtraction");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleSubtraction
entryRuleSubtraction returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getSubtractionRule()); }
	 iv_ruleSubtraction=ruleSubtraction 
	 { $current=$iv_ruleSubtraction.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Subtraction
ruleSubtraction returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getSubtractionAccess().getAdditionParserRuleCall_0()); 
    }
    this_Addition_0=ruleAddition
    { 
        $current = $this_Addition_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getSubtractionAccess().getSubLeftAction_1_0(),
            $current);
    }
)	otherlv_2='-' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSubtractionAccess().getHyphenMinusKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSubtractionAccess().getRightAdditionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleAddition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSubtractionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"Addition");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleAddition
entryRuleAddition returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getAdditionRule()); }
	 iv_ruleAddition=ruleAddition 
	 { $current=$iv_ruleAddition.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Addition
ruleAddition returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAdditionAccess().getMultiplicationParserRuleCall_0()); 
    }
    this_Multiplication_0=ruleMultiplication
    { 
        $current = $this_Multiplication_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAdditionAccess().getPluLeftAction_1_0(),
            $current);
    }
)	otherlv_2='+' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAdditionAccess().getPlusSignKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAdditionAccess().getRightMultiplicationParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleMultiplication		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdditionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"Multiplication");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleMultiplication
entryRuleMultiplication returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getMultiplicationRule()); }
	 iv_ruleMultiplication=ruleMultiplication 
	 { $current=$iv_ruleMultiplication.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Multiplication
ruleMultiplication returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getMultiplicationAccess().getDivisionParserRuleCall_0()); 
    }
    this_Division_0=ruleDivision
    { 
        $current = $this_Division_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getMultiplicationAccess().getMulLeftAction_1_0(),
            $current);
    }
)	otherlv_2='*' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getMultiplicationAccess().getAsteriskKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMultiplicationAccess().getRightDivisionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleDivision		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicationRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"Division");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleDivision
entryRuleDivision returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getDivisionRule()); }
	 iv_ruleDivision=ruleDivision 
	 { $current=$iv_ruleDivision.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Division
ruleDivision returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getDivisionAccess().getPrimaryParserRuleCall_0()); 
    }
    this_Primary_0=rulePrimary
    { 
        $current = $this_Primary_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getDivisionAccess().getDivLeftAction_1_0(),
            $current);
    }
)	otherlv_2='/' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDivisionAccess().getSolidusKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDivisionAccess().getRightPrimaryParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=rulePrimary		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDivisionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"Primary");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRulePrimary
entryRulePrimary returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getPrimaryRule()); }
	 iv_rulePrimary=rulePrimary 
	 { $current=$iv_rulePrimary.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Primary
rulePrimary returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
    }
    @after { leaveRule(); }:
((	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_0_0());
    }

    { 
        newCompositeNode(grammarAccess.getPrimaryAccess().getExpressionParserRuleCall_0_1()); 
    }
    this_Expression_1=ruleExpression
    { 
        $current = $this_Expression_1.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_2=')' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_0_2());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPrimaryAccess().getNotAction_1_0(),
            $current);
    }
)	otherlv_4='!' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getPrimaryAccess().getExclamationMarkKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryAccess().getExpressionPrimaryParserRuleCall_1_2_0()); 
	    }
		lv_expression_5_0=rulePrimary		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_5_0, 
        		"Primary");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |
    { 
        newCompositeNode(grammarAccess.getPrimaryAccess().getAtomicParserRuleCall_2()); 
    }
    this_Atomic_6=ruleAtomic
    { 
        $current = $this_Atomic_6.current; 
        afterParserOrEnumRuleCall();
    }
)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleAtomic
entryRuleAtomic returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getAtomicRule()); }
	 iv_ruleAtomic=ruleAtomic 
	 { $current=$iv_ruleAtomic.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Atomic
ruleAtomic returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAtomicAccess().getDoubleConstantAction_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicAccess().getValueDoubleParserRuleCall_0_1_0()); 
	    }
		lv_value_1_0=ruleDouble		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"Double");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAtomicAccess().getBoolConstantAction_1_0(),
            $current);
    }
)(
(
(
		lv_value_3_1=	'true' 
    {
        newLeafNode(lv_value_3_1, grammarAccess.getAtomicAccess().getValueTrueKeyword_1_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAtomicRule());
	        }
       		setWithLastConsumed($current, "value", lv_value_3_1, null);
	    }

    |		lv_value_3_2=	'false' 
    {
        newLeafNode(lv_value_3_2, grammarAccess.getAtomicAccess().getValueFalseKeyword_1_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAtomicRule());
	        }
       		setWithLastConsumed($current, "value", lv_value_3_2, null);
	    }

)

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAtomicAccess().getReferencedStoreAction_2_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getAtomicRule());
	        }
        }
	otherlv_5=RULE_LOWER
	{
		newLeafNode(otherlv_5, grammarAccess.getAtomicAccess().getValueStoreCrossReference_2_1_0()); 
	}

)
)))
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleDouble
entryRuleDouble returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getDoubleRule()); } 
	 iv_ruleDouble=ruleDouble 
	 { $current=$iv_ruleDouble.current.getText(); }  
	 EOF 
;

// Rule Double
ruleDouble returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    newLeafNode(this_INT_0, grammarAccess.getDoubleAccess().getINTTerminalRuleCall_0()); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDoubleAccess().getFullStopKeyword_1_0()); 
    }
    this_INT_2=RULE_INT    {
		$current.merge(this_INT_2);
    }

    { 
    newLeafNode(this_INT_2, grammarAccess.getDoubleAccess().getINTTerminalRuleCall_1_1()); 
    }
(
	kw='e' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDoubleAccess().getEKeyword_1_2_0()); 
    }

    |(
	kw='E' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDoubleAccess().getEKeyword_1_2_1_0()); 
    }
(
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDoubleAccess().getHyphenMinusKeyword_1_2_1_1()); 
    }
)?    this_INT_6=RULE_INT    {
		$current.merge(this_INT_6);
    }

    { 
    newLeafNode(this_INT_6, grammarAccess.getDoubleAccess().getINTTerminalRuleCall_1_2_1_2()); 
    }
))?)?)
    ;





// Entry rule entryRuleFreeVariable
entryRuleFreeVariable returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getFreeVariableRule()); } 
	 iv_ruleFreeVariable=ruleFreeVariable 
	 { $current=$iv_ruleFreeVariable.current.getText(); }  
	 EOF 
;

// Rule FreeVariable
ruleFreeVariable returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='$' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFreeVariableAccess().getDollarSignKeyword_0()); 
    }
    this_LOWER_1=RULE_LOWER    {
		$current.merge(this_LOWER_1);
    }

    { 
    newLeafNode(this_LOWER_1, grammarAccess.getFreeVariableAccess().getLOWERTerminalRuleCall_1()); 
    }
)
    ;





RULE_LOWER : 'a'..'z' ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_UPPER : 'A'..'Z' ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


