/*
* generated by Xtext
*/
grammar InternalONPA;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package com.blasedef.onpa.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package com.blasedef.onpa.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import com.blasedef.onpa.services.ONPAGrammarAccess;

}

@parser::members {

 	private ONPAGrammarAccess grammarAccess;
 	
    public InternalONPAParser(TokenStream input, ONPAGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected ONPAGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getStoresStoreParserRuleCall_0_0()); 
	    }
		lv_stores_0_0=ruleStore		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"stores",
        		lv_stores_0_0, 
        		"Store");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getActionsActionParserRuleCall_1_0()); 
	    }
		lv_actions_1_0=ruleAction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"actions",
        		lv_actions_1_0, 
        		"Action");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleAction
entryRuleAction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getActionRule()); }
	 iv_ruleAction=ruleAction 
	 { $current=$iv_ruleAction.current; } 
	 EOF 
;

// Rule Action
ruleAction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getActionAccess().getBroadcastOutParserRuleCall_0_0()); 
    }
    this_BroadcastOut_0=ruleBroadcastOut
    { 
        $current = $this_BroadcastOut_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getActionAccess().getBroadcastInParserRuleCall_0_1()); 
    }
    this_BroadcastIn_1=ruleBroadcastIn
    { 
        $current = $this_BroadcastIn_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getActionAccess().getUnicastOutParserRuleCall_0_2()); 
    }
    this_UnicastOut_2=ruleUnicastOut
    { 
        $current = $this_UnicastOut_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getActionAccess().getUnicastInParserRuleCall_0_3()); 
    }
    this_UnicastIn_3=ruleUnicastIn
    { 
        $current = $this_UnicastIn_3.current; 
        afterParserOrEnumRuleCall();
    }
)	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getActionAccess().getSemicolonKeyword_1());
    }
)
;





// Entry rule entryRuleBroadcastOut
entryRuleBroadcastOut returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBroadcastOutRule()); }
	 iv_ruleBroadcastOut=ruleBroadcastOut 
	 { $current=$iv_ruleBroadcastOut.current; } 
	 EOF 
;

// Rule BroadcastOut
ruleBroadcastOut returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_LOWER
		{
			newLeafNode(lv_name_0_0, grammarAccess.getBroadcastOutAccess().getNameLOWERTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBroadcastOutRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"LOWER");
	    }

)
)	otherlv_1='*' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getBroadcastOutAccess().getAsteriskKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBroadcastOutAccess().getPredicatePredicateParserRuleCall_2_0()); 
	    }
		lv_predicate_2_0=rulePredicate		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBroadcastOutRule());
	        }
       		set(
       			$current, 
       			"predicate",
        		lv_predicate_2_0, 
        		"Predicate");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBroadcastOutAccess().getEvaluationEvaluationsParserRuleCall_3_0()); 
	    }
		lv_evaluation_3_0=ruleEvaluations		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBroadcastOutRule());
	        }
       		set(
       			$current, 
       			"evaluation",
        		lv_evaluation_3_0, 
        		"Evaluations");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBroadcastOutAccess().getUpdateUpdatesParserRuleCall_4_0()); 
	    }
		lv_update_4_0=ruleUpdates		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBroadcastOutRule());
	        }
       		set(
       			$current, 
       			"update",
        		lv_update_4_0, 
        		"Updates");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleBroadcastIn
entryRuleBroadcastIn returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBroadcastInRule()); }
	 iv_ruleBroadcastIn=ruleBroadcastIn 
	 { $current=$iv_ruleBroadcastIn.current; } 
	 EOF 
;

// Rule BroadcastIn
ruleBroadcastIn returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_LOWER
		{
			newLeafNode(lv_name_0_0, grammarAccess.getBroadcastInAccess().getNameLOWERTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBroadcastInRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"LOWER");
	    }

)
)	otherlv_1='*' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getBroadcastInAccess().getAsteriskKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBroadcastInAccess().getPredicatePredicateParserRuleCall_2_0()); 
	    }
		lv_predicate_2_0=rulePredicate		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBroadcastInRule());
	        }
       		set(
       			$current, 
       			"predicate",
        		lv_predicate_2_0, 
        		"Predicate");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBroadcastInAccess().getValuesValuesParserRuleCall_3_0()); 
	    }
		lv_values_3_0=ruleValues		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBroadcastInRule());
	        }
       		set(
       			$current, 
       			"values",
        		lv_values_3_0, 
        		"Values");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBroadcastInAccess().getUpdateUpdatesParserRuleCall_4_0()); 
	    }
		lv_update_4_0=ruleUpdates		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBroadcastInRule());
	        }
       		set(
       			$current, 
       			"update",
        		lv_update_4_0, 
        		"Updates");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleUnicastOut
entryRuleUnicastOut returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnicastOutRule()); }
	 iv_ruleUnicastOut=ruleUnicastOut 
	 { $current=$iv_ruleUnicastOut.current; } 
	 EOF 
;

// Rule UnicastOut
ruleUnicastOut returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_LOWER
		{
			newLeafNode(lv_name_0_0, grammarAccess.getUnicastOutAccess().getNameLOWERTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getUnicastOutRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"LOWER");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getUnicastOutAccess().getPredicatePredicateParserRuleCall_1_0()); 
	    }
		lv_predicate_1_0=rulePredicate		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnicastOutRule());
	        }
       		set(
       			$current, 
       			"predicate",
        		lv_predicate_1_0, 
        		"Predicate");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getUnicastOutAccess().getEvaluationEvaluationsParserRuleCall_2_0()); 
	    }
		lv_evaluation_2_0=ruleEvaluations		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnicastOutRule());
	        }
       		set(
       			$current, 
       			"evaluation",
        		lv_evaluation_2_0, 
        		"Evaluations");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getUnicastOutAccess().getUpdateUpdatesParserRuleCall_3_0()); 
	    }
		lv_update_3_0=ruleUpdates		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnicastOutRule());
	        }
       		set(
       			$current, 
       			"update",
        		lv_update_3_0, 
        		"Updates");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleUnicastIn
entryRuleUnicastIn returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnicastInRule()); }
	 iv_ruleUnicastIn=ruleUnicastIn 
	 { $current=$iv_ruleUnicastIn.current; } 
	 EOF 
;

// Rule UnicastIn
ruleUnicastIn returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_LOWER
		{
			newLeafNode(lv_name_0_0, grammarAccess.getUnicastInAccess().getNameLOWERTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getUnicastInRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"LOWER");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getUnicastInAccess().getPredicatePredicateParserRuleCall_1_0()); 
	    }
		lv_predicate_1_0=rulePredicate		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnicastInRule());
	        }
       		set(
       			$current, 
       			"predicate",
        		lv_predicate_1_0, 
        		"Predicate");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getUnicastInAccess().getValuesValuesParserRuleCall_2_0()); 
	    }
		lv_values_2_0=ruleValues		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnicastInRule());
	        }
       		set(
       			$current, 
       			"values",
        		lv_values_2_0, 
        		"Values");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getUnicastInAccess().getUpdateUpdatesParserRuleCall_3_0()); 
	    }
		lv_update_3_0=ruleUpdates		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnicastInRule());
	        }
       		set(
       			$current, 
       			"update",
        		lv_update_3_0, 
        		"Updates");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulePredicate
entryRulePredicate returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getPredicateRule()); } 
	 iv_rulePredicate=rulePredicate 
	 { $current=$iv_rulePredicate.current.getText(); }  
	 EOF 
;

// Rule Predicate
rulePredicate returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='[' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPredicateAccess().getLeftSquareBracketKeyword_0()); 
    }

	kw=']' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPredicateAccess().getRightSquareBracketKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleUpdates
entryRuleUpdates returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUpdatesRule()); }
	 iv_ruleUpdates=ruleUpdates 
	 { $current=$iv_ruleUpdates.current; } 
	 EOF 
;

// Rule Updates
ruleUpdates returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getUpdatesAccess().getUpdatesAction_0(),
            $current);
    }
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getUpdatesAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUpdatesAccess().getUpdateExpressionsUpdateExpressionParserRuleCall_2_0()); 
	    }
		lv_updateExpressions_2_0=ruleUpdateExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUpdatesRule());
	        }
       		add(
       			$current, 
       			"updateExpressions",
        		lv_updateExpressions_2_0, 
        		"UpdateExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getUpdatesAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleUpdateExpression
entryRuleUpdateExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUpdateExpressionRule()); }
	 iv_ruleUpdateExpression=ruleUpdateExpression 
	 { $current=$iv_ruleUpdateExpression.current; } 
	 EOF 
;

// Rule UpdateExpression
ruleUpdateExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getUpdateExpressionRule());
	        }
        }
	otherlv_0=RULE_LOWER
	{
		newLeafNode(otherlv_0, grammarAccess.getUpdateExpressionAccess().getNameStoreCrossReference_0_0()); 
	}

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getUpdateExpressionAccess().getEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUpdateExpressionAccess().getExpressionExpressionParserRuleCall_2_0()); 
	    }
		lv_expression_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUpdateExpressionRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getUpdateExpressionAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleValues
entryRuleValues returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getValuesRule()); }
	 iv_ruleValues=ruleValues 
	 { $current=$iv_ruleValues.current; } 
	 EOF 
;

// Rule Values
ruleValues returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getValuesAccess().getValuesAction_0(),
            $current);
    }
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getValuesAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getValuesAccess().getValuesValuePrimaryParserRuleCall_2_0()); 
	    }
		lv_values_2_0=ruleValuePrimary		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getValuesRule());
	        }
       		add(
       			$current, 
       			"values",
        		lv_values_2_0, 
        		"ValuePrimary");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getValuesAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleValuePrimary
entryRuleValuePrimary returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getValuePrimaryRule()); }
	 iv_ruleValuePrimary=ruleValuePrimary 
	 { $current=$iv_ruleValuePrimary.current; } 
	 EOF 
;

// Rule ValuePrimary
ruleValuePrimary returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getValuePrimaryRule());
	        }
        }
	otherlv_0=RULE_LOWER
	{
		newLeafNode(otherlv_0, grammarAccess.getValuePrimaryAccess().getNameStoreCrossReference_0_0()); 
	}

)
)	otherlv_1=';' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getValuePrimaryAccess().getSemicolonKeyword_1());
    }
)
;





// Entry rule entryRuleEvaluations
entryRuleEvaluations returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEvaluationsRule()); }
	 iv_ruleEvaluations=ruleEvaluations 
	 { $current=$iv_ruleEvaluations.current; } 
	 EOF 
;

// Rule Evaluations
ruleEvaluations returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getEvaluationsAccess().getEvaluationsAction_0(),
            $current);
    }
)	otherlv_1='<' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getEvaluationsAccess().getLessThanSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEvaluationsAccess().getEvaluationsEvaluationParserRuleCall_2_0()); 
	    }
		lv_evaluations_2_0=ruleEvaluation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEvaluationsRule());
	        }
       		add(
       			$current, 
       			"evaluations",
        		lv_evaluations_2_0, 
        		"Evaluation");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_3='>' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getEvaluationsAccess().getGreaterThanSignKeyword_3());
    }
)
;





// Entry rule entryRuleEvaluation
entryRuleEvaluation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEvaluationRule()); }
	 iv_ruleEvaluation=ruleEvaluation 
	 { $current=$iv_ruleEvaluation.current; } 
	 EOF 
;

// Rule Evaluation
ruleEvaluation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getEvaluationRule());
	        }
        }
	otherlv_0=RULE_LOWER
	{
		newLeafNode(otherlv_0, grammarAccess.getEvaluationAccess().getNameStoreCrossReference_0_0()); 
	}

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getEvaluationAccess().getEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEvaluationAccess().getValueExpressionParserRuleCall_2_0()); 
	    }
		lv_value_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEvaluationRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleStore
entryRuleStore returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStoreRule()); }
	 iv_ruleStore=ruleStore 
	 { $current=$iv_ruleStore.current; } 
	 EOF 
;

// Rule Store
ruleStore returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getStoreAccess().getAttributeValueParserRuleCall_0()); 
    }
    this_AttributeValue_0=ruleAttributeValue
    { 
        $current = $this_AttributeValue_0.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_1=';' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getStoreAccess().getSemicolonKeyword_1());
    }
)
;





// Entry rule entryRuleAttributeValue
entryRuleAttributeValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttributeValueRule()); }
	 iv_ruleAttributeValue=ruleAttributeValue 
	 { $current=$iv_ruleAttributeValue.current; } 
	 EOF 
;

// Rule AttributeValue
ruleAttributeValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_LOWER
		{
			newLeafNode(lv_name_0_0, grammarAccess.getAttributeValueAccess().getNameLOWERTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAttributeValueRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"LOWER");
	    }

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAttributeValueAccess().getEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAttributeValueAccess().getValueExpressionParserRuleCall_2_0()); 
	    }
		lv_value_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributeValueRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getOrParserRuleCall()); 
    }
    this_Or_0=ruleOr
    { 
        $current = $this_Or_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleOr
entryRuleOr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOrRule()); }
	 iv_ruleOr=ruleOr 
	 { $current=$iv_ruleOr.current; } 
	 EOF 
;

// Rule Or
ruleOr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getOrAccess().getAndParserRuleCall_0()); 
    }
    this_And_0=ruleAnd
    { 
        $current = $this_And_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getOrAccess().getOrLeftAction_1_0(),
            $current);
    }
)	otherlv_2='||' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getOrAccess().getVerticalLineVerticalLineKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOrAccess().getRightAndParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleAnd		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOrRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"And");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleAnd
entryRuleAnd returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAndRule()); }
	 iv_ruleAnd=ruleAnd 
	 { $current=$iv_ruleAnd.current; } 
	 EOF 
;

// Rule And
ruleAnd returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAndAccess().getEqualityParserRuleCall_0()); 
    }
    this_Equality_0=ruleEquality
    { 
        $current = $this_Equality_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAndAccess().getAndLeftAction_1_0(),
            $current);
    }
)	otherlv_2='&&' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAndAccess().getAmpersandAmpersandKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAndAccess().getRightEqualityParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleEquality		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAndRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"Equality");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleEquality
entryRuleEquality returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEqualityRule()); }
	 iv_ruleEquality=ruleEquality 
	 { $current=$iv_ruleEquality.current; } 
	 EOF 
;

// Rule Equality
ruleEquality returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getEqualityAccess().getComparisonParserRuleCall_0()); 
    }
    this_Comparison_0=ruleComparison
    { 
        $current = $this_Comparison_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getEqualityAccess().getEqualityLeftAction_1_0(),
            $current);
    }
)(
(
(
		lv_op_2_1=	'==' 
    {
        newLeafNode(lv_op_2_1, grammarAccess.getEqualityAccess().getOpEqualsSignEqualsSignKeyword_1_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEqualityRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_1, null);
	    }

    |		lv_op_2_2=	'!=' 
    {
        newLeafNode(lv_op_2_2, grammarAccess.getEqualityAccess().getOpExclamationMarkEqualsSignKeyword_1_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEqualityRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_2, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getEqualityAccess().getRightComparisonParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleComparison		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEqualityRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"Comparison");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleComparison
entryRuleComparison returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getComparisonRule()); }
	 iv_ruleComparison=ruleComparison 
	 { $current=$iv_ruleComparison.current; } 
	 EOF 
;

// Rule Comparison
ruleComparison returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getComparisonAccess().getSubtractionParserRuleCall_0()); 
    }
    this_Subtraction_0=ruleSubtraction
    { 
        $current = $this_Subtraction_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getComparisonAccess().getComparisonLeftAction_1_0(),
            $current);
    }
)(
(
(
		lv_op_2_1=	'>=' 
    {
        newLeafNode(lv_op_2_1, grammarAccess.getComparisonAccess().getOpGreaterThanSignEqualsSignKeyword_1_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getComparisonRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_1, null);
	    }

    |		lv_op_2_2=	'<=' 
    {
        newLeafNode(lv_op_2_2, grammarAccess.getComparisonAccess().getOpLessThanSignEqualsSignKeyword_1_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getComparisonRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_2, null);
	    }

    |		lv_op_2_3=	'>' 
    {
        newLeafNode(lv_op_2_3, grammarAccess.getComparisonAccess().getOpGreaterThanSignKeyword_1_1_0_2());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getComparisonRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_3, null);
	    }

    |		lv_op_2_4=	'<' 
    {
        newLeafNode(lv_op_2_4, grammarAccess.getComparisonAccess().getOpLessThanSignKeyword_1_1_0_3());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getComparisonRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_4, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getComparisonAccess().getRightSubtractionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleSubtraction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComparisonRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"Subtraction");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleSubtraction
entryRuleSubtraction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSubtractionRule()); }
	 iv_ruleSubtraction=ruleSubtraction 
	 { $current=$iv_ruleSubtraction.current; } 
	 EOF 
;

// Rule Subtraction
ruleSubtraction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getSubtractionAccess().getAdditionParserRuleCall_0()); 
    }
    this_Addition_0=ruleAddition
    { 
        $current = $this_Addition_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getSubtractionAccess().getSubLeftAction_1_0(),
            $current);
    }
)	otherlv_2='-' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSubtractionAccess().getHyphenMinusKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSubtractionAccess().getRightAdditionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleAddition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSubtractionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"Addition");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleAddition
entryRuleAddition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAdditionRule()); }
	 iv_ruleAddition=ruleAddition 
	 { $current=$iv_ruleAddition.current; } 
	 EOF 
;

// Rule Addition
ruleAddition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAdditionAccess().getMultiplicationParserRuleCall_0()); 
    }
    this_Multiplication_0=ruleMultiplication
    { 
        $current = $this_Multiplication_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAdditionAccess().getPluLeftAction_1_0(),
            $current);
    }
)	otherlv_2='+' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAdditionAccess().getPlusSignKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAdditionAccess().getRightMultiplicationParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleMultiplication		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdditionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"Multiplication");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleMultiplication
entryRuleMultiplication returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMultiplicationRule()); }
	 iv_ruleMultiplication=ruleMultiplication 
	 { $current=$iv_ruleMultiplication.current; } 
	 EOF 
;

// Rule Multiplication
ruleMultiplication returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getMultiplicationAccess().getDivisionParserRuleCall_0()); 
    }
    this_Division_0=ruleDivision
    { 
        $current = $this_Division_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getMultiplicationAccess().getMulLeftAction_1_0(),
            $current);
    }
)	otherlv_2='*' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getMultiplicationAccess().getAsteriskKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMultiplicationAccess().getRightDivisionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleDivision		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicationRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"Division");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleDivision
entryRuleDivision returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDivisionRule()); }
	 iv_ruleDivision=ruleDivision 
	 { $current=$iv_ruleDivision.current; } 
	 EOF 
;

// Rule Division
ruleDivision returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getDivisionAccess().getPrimaryParserRuleCall_0()); 
    }
    this_Primary_0=rulePrimary
    { 
        $current = $this_Primary_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getDivisionAccess().getDivLeftAction_1_0(),
            $current);
    }
)	otherlv_2='/' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDivisionAccess().getSolidusKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDivisionAccess().getRightPrimaryParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=rulePrimary		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDivisionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"Primary");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulePrimary
entryRulePrimary returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrimaryRule()); }
	 iv_rulePrimary=rulePrimary 
	 { $current=$iv_rulePrimary.current; } 
	 EOF 
;

// Rule Primary
rulePrimary returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_0_0());
    }

    { 
        newCompositeNode(grammarAccess.getPrimaryAccess().getExpressionParserRuleCall_0_1()); 
    }
    this_Expression_1=ruleExpression
    { 
        $current = $this_Expression_1.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_2=')' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_0_2());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPrimaryAccess().getNotAction_1_0(),
            $current);
    }
)	otherlv_4='!' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getPrimaryAccess().getExclamationMarkKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryAccess().getExpressionPrimaryParserRuleCall_1_2_0()); 
	    }
		lv_expression_5_0=rulePrimary		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_5_0, 
        		"Primary");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |
    { 
        newCompositeNode(grammarAccess.getPrimaryAccess().getAtomicParserRuleCall_2()); 
    }
    this_Atomic_6=ruleAtomic
    { 
        $current = $this_Atomic_6.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleAtomic
entryRuleAtomic returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAtomicRule()); }
	 iv_ruleAtomic=ruleAtomic 
	 { $current=$iv_ruleAtomic.current; } 
	 EOF 
;

// Rule Atomic
ruleAtomic returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAtomicAccess().getDoubleConstantAction_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicAccess().getValueDoubleParserRuleCall_0_1_0()); 
	    }
		lv_value_1_0=ruleDouble		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"Double");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAtomicAccess().getBoolConstantAction_1_0(),
            $current);
    }
)(
(
(
		lv_value_3_1=	'true' 
    {
        newLeafNode(lv_value_3_1, grammarAccess.getAtomicAccess().getValueTrueKeyword_1_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAtomicRule());
	        }
       		setWithLastConsumed($current, "value", lv_value_3_1, null);
	    }

    |		lv_value_3_2=	'false' 
    {
        newLeafNode(lv_value_3_2, grammarAccess.getAtomicAccess().getValueFalseKeyword_1_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAtomicRule());
	        }
       		setWithLastConsumed($current, "value", lv_value_3_2, null);
	    }

)

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAtomicAccess().getReferencedRateAction_2_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getAtomicRule());
	        }
        }
	otherlv_5=RULE_LOWER
	{
		newLeafNode(otherlv_5, grammarAccess.getAtomicAccess().getValueAttributeValueCrossReference_2_1_0()); 
	}

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAtomicAccess().getReferencedRateAction_3_0(),
            $current);
    }
)	otherlv_7='this.' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getAtomicAccess().getThisKeyword_3_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getAtomicRule());
	        }
        }
	otherlv_8=RULE_LOWER
	{
		newLeafNode(otherlv_8, grammarAccess.getAtomicAccess().getValueAttributeValueCrossReference_3_2_0()); 
	}

)
)))
;





// Entry rule entryRuleDouble
entryRuleDouble returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getDoubleRule()); } 
	 iv_ruleDouble=ruleDouble 
	 { $current=$iv_ruleDouble.current.getText(); }  
	 EOF 
;

// Rule Double
ruleDouble returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    newLeafNode(this_INT_0, grammarAccess.getDoubleAccess().getINTTerminalRuleCall_0()); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDoubleAccess().getFullStopKeyword_1_0()); 
    }
    this_INT_2=RULE_INT    {
		$current.merge(this_INT_2);
    }

    { 
    newLeafNode(this_INT_2, grammarAccess.getDoubleAccess().getINTTerminalRuleCall_1_1()); 
    }
(
	kw='e' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDoubleAccess().getEKeyword_1_2_0()); 
    }

    |(
	kw='E' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDoubleAccess().getEKeyword_1_2_1_0()); 
    }
(
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDoubleAccess().getHyphenMinusKeyword_1_2_1_1()); 
    }
)?    this_INT_6=RULE_INT    {
		$current.merge(this_INT_6);
    }

    { 
    newLeafNode(this_INT_6, grammarAccess.getDoubleAccess().getINTTerminalRuleCall_1_2_1_2()); 
    }
))?)?)
    ;





RULE_LOWER : ('a'..'z')+ RULE_ID?;

RULE_UPPER : ('A'..'Z')+ RULE_ID?;

RULE_INACTIVECOMPONENT : 'InactiveComponent';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


