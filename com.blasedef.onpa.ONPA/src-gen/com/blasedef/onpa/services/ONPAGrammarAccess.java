/*
* generated by Xtext
*/
package com.blasedef.onpa.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class ONPAGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cProcessesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cProcessesProcessParserRuleCall_0_0 = (RuleCall)cProcessesAssignment_0.eContents().get(0);
		private final Assignment cStoresAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStoresStoreParserRuleCall_1_0 = (RuleCall)cStoresAssignment_1.eContents().get(0);
		private final Assignment cTermsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTermsTermParserRuleCall_2_0 = (RuleCall)cTermsAssignment_2.eContents().get(0);
		
		//Model hidden(ML_COMMENT, SL_COMMENT, WS):
		//	processes+=Process+ stores+=Store+ terms+=Term+;
		public ParserRule getRule() { return rule; }

		//processes+=Process+ stores+=Store+ terms+=Term+
		public Group getGroup() { return cGroup; }

		//processes+=Process+
		public Assignment getProcessesAssignment_0() { return cProcessesAssignment_0; }

		//Process
		public RuleCall getProcessesProcessParserRuleCall_0_0() { return cProcessesProcessParserRuleCall_0_0; }

		//stores+=Store+
		public Assignment getStoresAssignment_1() { return cStoresAssignment_1; }

		//Store
		public RuleCall getStoresStoreParserRuleCall_1_0() { return cStoresStoreParserRuleCall_1_0; }

		//terms+=Term+
		public Assignment getTermsAssignment_2() { return cTermsAssignment_2; }

		//Term
		public RuleCall getTermsTermParserRuleCall_2_0() { return cTermsTermParserRuleCall_2_0; }
	}

	public class TermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Term");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cNameProcessCrossReference_1_0 = (CrossReference)cNameAssignment_1.eContents().get(0);
		private final RuleCall cNameProcessUPPERTerminalRuleCall_1_0_1 = (RuleCall)cNameProcessCrossReference_1_0.eContents().get(1);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cStoresAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cStoresStoreCrossReference_4_0 = (CrossReference)cStoresAssignment_4.eContents().get(0);
		private final RuleCall cStoresStoreLOWERTerminalRuleCall_4_0_1 = (RuleCall)cStoresStoreCrossReference_4_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		////TERMS
		//Term hidden(ML_COMMENT, SL_COMMENT, WS):
		//	"(" name=[Process|UPPER] "," "{" stores+=[Store|LOWER] "}" ")" ";";
		public ParserRule getRule() { return rule; }

		//"(" name=[Process|UPPER] "," "{" stores+=[Store|LOWER] "}" ")" ";"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//name=[Process|UPPER]
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//[Process|UPPER]
		public CrossReference getNameProcessCrossReference_1_0() { return cNameProcessCrossReference_1_0; }

		//UPPER
		public RuleCall getNameProcessUPPERTerminalRuleCall_1_0_1() { return cNameProcessUPPERTerminalRuleCall_1_0_1; }

		//","
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//stores+=[Store|LOWER]
		public Assignment getStoresAssignment_4() { return cStoresAssignment_4; }

		//[Store|LOWER]
		public CrossReference getStoresStoreCrossReference_4_0() { return cStoresStoreCrossReference_4_0; }

		//LOWER
		public RuleCall getStoresStoreLOWERTerminalRuleCall_4_0_1() { return cStoresStoreLOWERTerminalRuleCall_4_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }

		//";"
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
	}

	public class ProcessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Process");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameUPPERTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueProcessExpressionParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		////PROCESSES
		//Process hidden(ML_COMMENT, SL_COMMENT, WS):
		//	name=UPPER "=" value=ProcessExpression ";";
		public ParserRule getRule() { return rule; }

		//name=UPPER "=" value=ProcessExpression ";"
		public Group getGroup() { return cGroup; }

		//name=UPPER
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//UPPER
		public RuleCall getNameUPPERTerminalRuleCall_0_0() { return cNameUPPERTerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//value=ProcessExpression
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//ProcessExpression
		public RuleCall getValueProcessExpressionParserRuleCall_2_0() { return cValueProcessExpressionParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class ProcessExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ProcessExpression");
		private final RuleCall cParallelParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ProcessExpression hidden(ML_COMMENT, SL_COMMENT, WS):
		//	Parallel;
		public ParserRule getRule() { return rule; }

		//Parallel
		public RuleCall getParallelParserRuleCall() { return cParallelParserRuleCall; }
	}

	public class ParallelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parallel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cChoiceParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cParallelLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cVerticalLineKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightChoiceParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Parallel returns ProcessExpression hidden(ML_COMMENT, SL_COMMENT, WS):
		//	Choice ({Parallel.left=current} "|" right=Choice)*;
		public ParserRule getRule() { return rule; }

		//Choice ({Parallel.left=current} "|" right=Choice)*
		public Group getGroup() { return cGroup; }

		//Choice
		public RuleCall getChoiceParserRuleCall_0() { return cChoiceParserRuleCall_0; }

		//({Parallel.left=current} "|" right=Choice)*
		public Group getGroup_1() { return cGroup_1; }

		//{Parallel.left=current}
		public Action getParallelLeftAction_1_0() { return cParallelLeftAction_1_0; }

		//"|"
		public Keyword getVerticalLineKeyword_1_1() { return cVerticalLineKeyword_1_1; }

		//right=Choice
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Choice
		public RuleCall getRightChoiceParserRuleCall_1_2_0() { return cRightChoiceParserRuleCall_1_2_0; }
	}

	public class ChoiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Choice");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryProcessParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cChoiceLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPrimaryProcessParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Choice returns ProcessExpression hidden(ML_COMMENT, SL_COMMENT, WS):
		//	PrimaryProcess ({Choice.left=current} "+" right=PrimaryProcess)*;
		public ParserRule getRule() { return rule; }

		//PrimaryProcess ({Choice.left=current} "+" right=PrimaryProcess)*
		public Group getGroup() { return cGroup; }

		//PrimaryProcess
		public RuleCall getPrimaryProcessParserRuleCall_0() { return cPrimaryProcessParserRuleCall_0; }

		//({Choice.left=current} "+" right=PrimaryProcess)*
		public Group getGroup_1() { return cGroup_1; }

		//{Choice.left=current}
		public Action getChoiceLeftAction_1_0() { return cChoiceLeftAction_1_0; }

		//"+"
		public Keyword getPlusSignKeyword_1_1() { return cPlusSignKeyword_1_1; }

		//right=PrimaryProcess
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//PrimaryProcess
		public RuleCall getRightPrimaryProcessParserRuleCall_1_2_0() { return cRightPrimaryProcessParserRuleCall_1_2_0; }
	}

	public class PrimaryProcessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimaryProcess");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cLeafAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Keyword cValueNilKeyword_0_1_0 = (Keyword)cValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cLeafAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cValueKillKeyword_1_1_0 = (Keyword)cValueAssignment_1_1.eContents().get(0);
		private final RuleCall cPredicateProcessParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cActionProcessParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cProcessReferenceAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cValueAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cValueProcessCrossReference_4_1_0 = (CrossReference)cValueAssignment_4_1.eContents().get(0);
		private final RuleCall cValueProcessUPPERTerminalRuleCall_4_1_0_1 = (RuleCall)cValueProcessCrossReference_4_1_0.eContents().get(1);
		
		//PrimaryProcess returns ProcessExpression hidden(ML_COMMENT, SL_COMMENT, WS):
		//	{Leaf} value="nil" | {Leaf} value="kill" | PredicateProcess | ActionProcess | {ProcessReference}
		//	value=[Process|UPPER];
		public ParserRule getRule() { return rule; }

		//{Leaf} value="nil" | {Leaf} value="kill" | PredicateProcess | ActionProcess | {ProcessReference} value=[Process|UPPER]
		public Alternatives getAlternatives() { return cAlternatives; }

		//{Leaf} value="nil"
		public Group getGroup_0() { return cGroup_0; }

		//{Leaf}
		public Action getLeafAction_0_0() { return cLeafAction_0_0; }

		//value="nil"
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }

		//"nil"
		public Keyword getValueNilKeyword_0_1_0() { return cValueNilKeyword_0_1_0; }

		//{Leaf} value="kill"
		public Group getGroup_1() { return cGroup_1; }

		//{Leaf}
		public Action getLeafAction_1_0() { return cLeafAction_1_0; }

		//value="kill"
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }

		//"kill"
		public Keyword getValueKillKeyword_1_1_0() { return cValueKillKeyword_1_1_0; }

		//PredicateProcess
		public RuleCall getPredicateProcessParserRuleCall_2() { return cPredicateProcessParserRuleCall_2; }

		//ActionProcess
		public RuleCall getActionProcessParserRuleCall_3() { return cActionProcessParserRuleCall_3; }

		//{ProcessReference} value=[Process|UPPER]
		public Group getGroup_4() { return cGroup_4; }

		//{ProcessReference}
		public Action getProcessReferenceAction_4_0() { return cProcessReferenceAction_4_0; }

		//value=[Process|UPPER]
		public Assignment getValueAssignment_4_1() { return cValueAssignment_4_1; }

		//[Process|UPPER]
		public CrossReference getValueProcessCrossReference_4_1_0() { return cValueProcessCrossReference_4_1_0; }

		//UPPER
		public RuleCall getValueProcessUPPERTerminalRuleCall_4_1_0_1() { return cValueProcessUPPERTerminalRuleCall_4_1_0_1; }
	}

	public class PredicateProcessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PredicateProcess");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPredicateAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPredicatePredicateParserRuleCall_0_0 = (RuleCall)cPredicateAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cValueProcessCrossReference_1_0 = (CrossReference)cValueAssignment_1.eContents().get(0);
		private final RuleCall cValueProcessUPPERTerminalRuleCall_1_0_1 = (RuleCall)cValueProcessCrossReference_1_0.eContents().get(1);
		
		//PredicateProcess hidden(ML_COMMENT, SL_COMMENT, WS):
		//	predicate=Predicate value=[Process|UPPER];
		public ParserRule getRule() { return rule; }

		//predicate=Predicate value=[Process|UPPER]
		public Group getGroup() { return cGroup; }

		//predicate=Predicate
		public Assignment getPredicateAssignment_0() { return cPredicateAssignment_0; }

		//Predicate
		public RuleCall getPredicatePredicateParserRuleCall_0_0() { return cPredicatePredicateParserRuleCall_0_0; }

		//value=[Process|UPPER]
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//[Process|UPPER]
		public CrossReference getValueProcessCrossReference_1_0() { return cValueProcessCrossReference_1_0; }

		//UPPER
		public RuleCall getValueProcessUPPERTerminalRuleCall_1_0_1() { return cValueProcessUPPERTerminalRuleCall_1_0_1; }
	}

	public class ActionProcessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ActionProcess");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cActionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cActionActionParserRuleCall_0_0 = (RuleCall)cActionAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cValueProcessCrossReference_1_0 = (CrossReference)cValueAssignment_1.eContents().get(0);
		private final RuleCall cValueProcessUPPERTerminalRuleCall_1_0_1 = (RuleCall)cValueProcessCrossReference_1_0.eContents().get(1);
		
		//ActionProcess hidden(ML_COMMENT, SL_COMMENT, WS):
		//	action=Action value=[Process|UPPER];
		public ParserRule getRule() { return rule; }

		//action=Action value=[Process|UPPER]
		public Group getGroup() { return cGroup; }

		//action=Action
		public Assignment getActionAssignment_0() { return cActionAssignment_0; }

		//Action
		public RuleCall getActionActionParserRuleCall_0_0() { return cActionActionParserRuleCall_0_0; }

		//value=[Process|UPPER]
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//[Process|UPPER]
		public CrossReference getValueProcessCrossReference_1_0() { return cValueProcessCrossReference_1_0; }

		//UPPER
		public RuleCall getValueProcessUPPERTerminalRuleCall_1_0_1() { return cValueProcessUPPERTerminalRuleCall_1_0_1; }
	}

	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Action");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cActionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameLOWERTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPredicatesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPredicatesPredicateParserRuleCall_3_0 = (RuleCall)cPredicatesAssignment_3.eContents().get(0);
		private final Assignment cEvaluationsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cEvaluationsEvaluationsParserRuleCall_4_0 = (RuleCall)cEvaluationsAssignment_4.eContents().get(0);
		private final Assignment cUpdatesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cUpdatesUpdatesParserRuleCall_5_0 = (RuleCall)cUpdatesAssignment_5.eContents().get(0);
		private final Keyword cFullStopKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		////ACTIONS
		//Action hidden(ML_COMMENT, SL_COMMENT, WS):
		//	{Action} name=LOWER "*"? predicates=Predicate evaluations=Evaluations updates=Updates ".";
		public ParserRule getRule() { return rule; }

		//{Action} name=LOWER "*"? predicates=Predicate evaluations=Evaluations updates=Updates "."
		public Group getGroup() { return cGroup; }

		//{Action}
		public Action getActionAction_0() { return cActionAction_0; }

		//name=LOWER
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//LOWER
		public RuleCall getNameLOWERTerminalRuleCall_1_0() { return cNameLOWERTerminalRuleCall_1_0; }

		//"*"?
		public Keyword getAsteriskKeyword_2() { return cAsteriskKeyword_2; }

		//predicates=Predicate
		public Assignment getPredicatesAssignment_3() { return cPredicatesAssignment_3; }

		//Predicate
		public RuleCall getPredicatesPredicateParserRuleCall_3_0() { return cPredicatesPredicateParserRuleCall_3_0; }

		//evaluations=Evaluations
		public Assignment getEvaluationsAssignment_4() { return cEvaluationsAssignment_4; }

		//Evaluations
		public RuleCall getEvaluationsEvaluationsParserRuleCall_4_0() { return cEvaluationsEvaluationsParserRuleCall_4_0; }

		//updates=Updates
		public Assignment getUpdatesAssignment_5() { return cUpdatesAssignment_5; }

		//Updates
		public RuleCall getUpdatesUpdatesParserRuleCall_5_0() { return cUpdatesUpdatesParserRuleCall_5_0; }

		//"."
		public Keyword getFullStopKeyword_6() { return cFullStopKeyword_6; }
	}

	public class PredicateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Predicate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPredicateAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPredicatesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPredicatesPredicateExpressionParserRuleCall_2_0 = (RuleCall)cPredicatesAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Predicate hidden(ML_COMMENT, SL_COMMENT, WS):
		//	{Predicate} "[" predicates=PredicateExpression "]";
		public ParserRule getRule() { return rule; }

		//{Predicate} "[" predicates=PredicateExpression "]"
		public Group getGroup() { return cGroup; }

		//{Predicate}
		public Action getPredicateAction_0() { return cPredicateAction_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//predicates=PredicateExpression
		public Assignment getPredicatesAssignment_2() { return cPredicatesAssignment_2; }

		//PredicateExpression
		public RuleCall getPredicatesPredicateExpressionParserRuleCall_2_0() { return cPredicatesPredicateExpressionParserRuleCall_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class EvaluationsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Evaluations");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Action cInAction_0_1 = (Action)cGroup_0.eContents().get(1);
		private final Assignment cExpressionsAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cExpressionsEvaluationExpressionParserRuleCall_0_2_0 = (RuleCall)cExpressionsAssignment_0_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLessThanSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Action cOutAction_1_1 = (Action)cGroup_1.eContents().get(1);
		private final Assignment cExpressionsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExpressionsEvaluationExpressionParserRuleCall_1_2_0 = (RuleCall)cExpressionsAssignment_1_2.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//Evaluations hidden(ML_COMMENT, SL_COMMENT, WS):
		//	"(" {In} expressions+=EvaluationExpression+ ")" | "<" {Out} expressions+=EvaluationExpression+ ">";
		public ParserRule getRule() { return rule; }

		//"(" {In} expressions+=EvaluationExpression+ ")" | "<" {Out} expressions+=EvaluationExpression+ ">"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"(" {In} expressions+=EvaluationExpression+ ")"
		public Group getGroup_0() { return cGroup_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }

		//{In}
		public Action getInAction_0_1() { return cInAction_0_1; }

		//expressions+=EvaluationExpression+
		public Assignment getExpressionsAssignment_0_2() { return cExpressionsAssignment_0_2; }

		//EvaluationExpression
		public RuleCall getExpressionsEvaluationExpressionParserRuleCall_0_2_0() { return cExpressionsEvaluationExpressionParserRuleCall_0_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_3() { return cRightParenthesisKeyword_0_3; }

		//"<" {Out} expressions+=EvaluationExpression+ ">"
		public Group getGroup_1() { return cGroup_1; }

		//"<"
		public Keyword getLessThanSignKeyword_1_0() { return cLessThanSignKeyword_1_0; }

		//{Out}
		public Action getOutAction_1_1() { return cOutAction_1_1; }

		//expressions+=EvaluationExpression+
		public Assignment getExpressionsAssignment_1_2() { return cExpressionsAssignment_1_2; }

		//EvaluationExpression
		public RuleCall getExpressionsEvaluationExpressionParserRuleCall_1_2_0() { return cExpressionsEvaluationExpressionParserRuleCall_1_2_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_1_3() { return cGreaterThanSignKeyword_1_3; }
	}

	public class UpdatesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Updates");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUpdatesAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cUpdatesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUpdatesUpdateExpressionParserRuleCall_2_0 = (RuleCall)cUpdatesAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Updates hidden(ML_COMMENT, SL_COMMENT, WS):
		//	{Updates} "{" updates+=UpdateExpression+ "}";
		public ParserRule getRule() { return rule; }

		//{Updates} "{" updates+=UpdateExpression+ "}"
		public Group getGroup() { return cGroup; }

		//{Updates}
		public Action getUpdatesAction_0() { return cUpdatesAction_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//updates+=UpdateExpression+
		public Assignment getUpdatesAssignment_2() { return cUpdatesAssignment_2; }

		//UpdateExpression
		public RuleCall getUpdatesUpdateExpressionParserRuleCall_2_0() { return cUpdatesUpdateExpressionParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class PredicateExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PredicateExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpressionExpressionParserRuleCall_0_0 = (RuleCall)cExpressionAssignment_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//PredicateExpression hidden(ML_COMMENT, SL_COMMENT, WS):
		//	expression=Expression ";";
		public ParserRule getRule() { return rule; }

		//expression=Expression ";"
		public Group getGroup() { return cGroup; }

		//expression=Expression
		public Assignment getExpressionAssignment_0() { return cExpressionAssignment_0; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_0_0() { return cExpressionExpressionParserRuleCall_0_0; }

		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class EvaluationExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EvaluationExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//EvaluationExpression hidden(ML_COMMENT, SL_COMMENT, WS):
		//	Expression ";";
		public ParserRule getRule() { return rule; }

		//Expression ";"
		public Group getGroup() { return cGroup; }

		//Expression
		public RuleCall getExpressionParserRuleCall_0() { return cExpressionParserRuleCall_0; }

		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class UpdateExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UpdateExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpressionExpressionParserRuleCall_0_0 = (RuleCall)cExpressionAssignment_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//UpdateExpression hidden(ML_COMMENT, SL_COMMENT, WS):
		//	expression=Expression ";";
		public ParserRule getRule() { return rule; }

		//expression=Expression ";"
		public Group getGroup() { return cGroup; }

		//expression=Expression
		public Assignment getExpressionAssignment_0() { return cExpressionAssignment_0; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_0_0() { return cExpressionExpressionParserRuleCall_0_0; }

		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class StoreElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Store");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameLOWERTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueExpressionParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		////STORES
		//Store hidden(ML_COMMENT, SL_COMMENT, WS):
		//	name=LOWER "=" value=Expression ";";
		public ParserRule getRule() { return rule; }

		//name=LOWER "=" value=Expression ";"
		public Group getGroup() { return cGroup; }

		//name=LOWER
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//LOWER
		public RuleCall getNameLOWERTerminalRuleCall_0_0() { return cNameLOWERTerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//value=Expression
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//Expression
		public RuleCall getValueExpressionParserRuleCall_2_0() { return cValueExpressionParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final RuleCall cOrParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Expression hidden(ML_COMMENT, SL_COMMENT, WS):
		//	Or;
		public ParserRule getRule() { return rule; }

		//Or
		public RuleCall getOrParserRuleCall() { return cOrParserRuleCall; }
	}

	public class OrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Or");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cVerticalLineVerticalLineKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAndParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Or returns Expression hidden(ML_COMMENT, SL_COMMENT, WS):
		//	And ({Or.left=current} "||" right=And)*;
		public ParserRule getRule() { return rule; }

		//And ({Or.left=current} "||" right=And)*
		public Group getGroup() { return cGroup; }

		//And
		public RuleCall getAndParserRuleCall_0() { return cAndParserRuleCall_0; }

		//({Or.left=current} "||" right=And)*
		public Group getGroup_1() { return cGroup_1; }

		//{Or.left=current}
		public Action getOrLeftAction_1_0() { return cOrLeftAction_1_0; }

		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_1_1() { return cVerticalLineVerticalLineKeyword_1_1; }

		//right=And
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//And
		public RuleCall getRightAndParserRuleCall_1_2_0() { return cRightAndParserRuleCall_1_2_0; }
	}

	public class AndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "And");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEqualityParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAmpersandAmpersandKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightEqualityParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//And returns Expression hidden(ML_COMMENT, SL_COMMENT, WS):
		//	Equality ({And.left=current} "&&" right=Equality)*;
		public ParserRule getRule() { return rule; }

		//Equality ({And.left=current} "&&" right=Equality)*
		public Group getGroup() { return cGroup; }

		//Equality
		public RuleCall getEqualityParserRuleCall_0() { return cEqualityParserRuleCall_0; }

		//({And.left=current} "&&" right=Equality)*
		public Group getGroup_1() { return cGroup_1; }

		//{And.left=current}
		public Action getAndLeftAction_1_0() { return cAndLeftAction_1_0; }

		//"&&"
		public Keyword getAmpersandAmpersandKeyword_1_1() { return cAmpersandAmpersandKeyword_1_1; }

		//right=Equality
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Equality
		public RuleCall getRightEqualityParserRuleCall_1_2_0() { return cRightEqualityParserRuleCall_1_2_0; }
	}

	public class EqualityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Equality");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cComparisonParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cEqualityLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpEqualsSignEqualsSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpExclamationMarkEqualsSignKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightComparisonParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Equality returns Expression hidden(ML_COMMENT, SL_COMMENT, WS):
		//	Comparison ({Equality.left=current} op=("==" | "!=") right=Comparison)*;
		public ParserRule getRule() { return rule; }

		//Comparison ({Equality.left=current} op=("==" | "!=") right=Comparison)*
		public Group getGroup() { return cGroup; }

		//Comparison
		public RuleCall getComparisonParserRuleCall_0() { return cComparisonParserRuleCall_0; }

		//({Equality.left=current} op=("==" | "!=") right=Comparison)*
		public Group getGroup_1() { return cGroup_1; }

		//{Equality.left=current}
		public Action getEqualityLeftAction_1_0() { return cEqualityLeftAction_1_0; }

		//op=("==" | "!=")
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//"==" | "!="
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }

		//"=="
		public Keyword getOpEqualsSignEqualsSignKeyword_1_1_0_0() { return cOpEqualsSignEqualsSignKeyword_1_1_0_0; }

		//"!="
		public Keyword getOpExclamationMarkEqualsSignKeyword_1_1_0_1() { return cOpExclamationMarkEqualsSignKeyword_1_1_0_1; }

		//right=Comparison
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Comparison
		public RuleCall getRightComparisonParserRuleCall_1_2_0() { return cRightComparisonParserRuleCall_1_2_0; }
	}

	public class ComparisonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Comparison");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSubtractionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cComparisonLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpGreaterThanSignEqualsSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpLessThanSignEqualsSignKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOpGreaterThanSignKeyword_1_1_0_2 = (Keyword)cOpAlternatives_1_1_0.eContents().get(2);
		private final Keyword cOpLessThanSignKeyword_1_1_0_3 = (Keyword)cOpAlternatives_1_1_0.eContents().get(3);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightSubtractionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Comparison returns Expression hidden(ML_COMMENT, SL_COMMENT, WS):
		//	Subtraction ({Comparison.left=current} op=(">=" | "<=" | ">" | "<") right=Subtraction)*;
		public ParserRule getRule() { return rule; }

		//Subtraction ({Comparison.left=current} op=(">=" | "<=" | ">" | "<") right=Subtraction)*
		public Group getGroup() { return cGroup; }

		//Subtraction
		public RuleCall getSubtractionParserRuleCall_0() { return cSubtractionParserRuleCall_0; }

		//({Comparison.left=current} op=(">=" | "<=" | ">" | "<") right=Subtraction)*
		public Group getGroup_1() { return cGroup_1; }

		//{Comparison.left=current}
		public Action getComparisonLeftAction_1_0() { return cComparisonLeftAction_1_0; }

		//op=(">=" | "<=" | ">" | "<")
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//">=" | "<=" | ">" | "<"
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }

		//">="
		public Keyword getOpGreaterThanSignEqualsSignKeyword_1_1_0_0() { return cOpGreaterThanSignEqualsSignKeyword_1_1_0_0; }

		//"<="
		public Keyword getOpLessThanSignEqualsSignKeyword_1_1_0_1() { return cOpLessThanSignEqualsSignKeyword_1_1_0_1; }

		//">"
		public Keyword getOpGreaterThanSignKeyword_1_1_0_2() { return cOpGreaterThanSignKeyword_1_1_0_2; }

		//"<"
		public Keyword getOpLessThanSignKeyword_1_1_0_3() { return cOpLessThanSignKeyword_1_1_0_3; }

		//right=Subtraction
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Subtraction
		public RuleCall getRightSubtractionParserRuleCall_1_2_0() { return cRightSubtractionParserRuleCall_1_2_0; }
	}

	public class SubtractionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Subtraction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAdditionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cSubLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAdditionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Subtraction returns Expression hidden(ML_COMMENT, SL_COMMENT, WS):
		//	Addition ({Sub.left=current} "-" right=Addition)*;
		public ParserRule getRule() { return rule; }

		//Addition ({Sub.left=current} "-" right=Addition)*
		public Group getGroup() { return cGroup; }

		//Addition
		public RuleCall getAdditionParserRuleCall_0() { return cAdditionParserRuleCall_0; }

		//({Sub.left=current} "-" right=Addition)*
		public Group getGroup_1() { return cGroup_1; }

		//{Sub.left=current}
		public Action getSubLeftAction_1_0() { return cSubLeftAction_1_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1_1() { return cHyphenMinusKeyword_1_1; }

		//right=Addition
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Addition
		public RuleCall getRightAdditionParserRuleCall_1_2_0() { return cRightAdditionParserRuleCall_1_2_0; }
	}

	public class AdditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Addition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cPluLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightMultiplicationParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Addition returns Expression hidden(ML_COMMENT, SL_COMMENT, WS):
		//	Multiplication ({Plu.left=current} "+" right=Multiplication)*;
		public ParserRule getRule() { return rule; }

		//Multiplication ({Plu.left=current} "+" right=Multiplication)*
		public Group getGroup() { return cGroup; }

		//Multiplication
		public RuleCall getMultiplicationParserRuleCall_0() { return cMultiplicationParserRuleCall_0; }

		//({Plu.left=current} "+" right=Multiplication)*
		public Group getGroup_1() { return cGroup_1; }

		//{Plu.left=current}
		public Action getPluLeftAction_1_0() { return cPluLeftAction_1_0; }

		//"+"
		public Keyword getPlusSignKeyword_1_1() { return cPlusSignKeyword_1_1; }

		//right=Multiplication
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Multiplication
		public RuleCall getRightMultiplicationParserRuleCall_1_2_0() { return cRightMultiplicationParserRuleCall_1_2_0; }
	}

	public class MultiplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Multiplication");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDivisionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cMulLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightDivisionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Multiplication returns Expression hidden(ML_COMMENT, SL_COMMENT, WS):
		//	Division ({Mul.left=current} "*" right=Division)*;
		public ParserRule getRule() { return rule; }

		//Division ({Mul.left=current} "*" right=Division)*
		public Group getGroup() { return cGroup; }

		//Division
		public RuleCall getDivisionParserRuleCall_0() { return cDivisionParserRuleCall_0; }

		//({Mul.left=current} "*" right=Division)*
		public Group getGroup_1() { return cGroup_1; }

		//{Mul.left=current}
		public Action getMulLeftAction_1_0() { return cMulLeftAction_1_0; }

		//"*"
		public Keyword getAsteriskKeyword_1_1() { return cAsteriskKeyword_1_1; }

		//right=Division
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Division
		public RuleCall getRightDivisionParserRuleCall_1_2_0() { return cRightDivisionParserRuleCall_1_2_0; }
	}

	public class DivisionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Division");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cDivLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cSolidusKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPrimaryParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Division returns Expression hidden(ML_COMMENT, SL_COMMENT, WS):
		//	Primary ({Div.left=current} "/" right=Primary)*;
		public ParserRule getRule() { return rule; }

		//Primary ({Div.left=current} "/" right=Primary)*
		public Group getGroup() { return cGroup; }

		//Primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }

		//({Div.left=current} "/" right=Primary)*
		public Group getGroup_1() { return cGroup_1; }

		//{Div.left=current}
		public Action getDivLeftAction_1_0() { return cDivLeftAction_1_0; }

		//"/"
		public Keyword getSolidusKeyword_1_1() { return cSolidusKeyword_1_1; }

		//right=Primary
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Primary
		public RuleCall getRightPrimaryParserRuleCall_1_2_0() { return cRightPrimaryParserRuleCall_1_2_0; }
	}

	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cNotAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExpressionPrimaryParserRuleCall_1_2_0 = (RuleCall)cExpressionAssignment_1_2.eContents().get(0);
		private final RuleCall cAtomicParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Primary returns Expression hidden(ML_COMMENT, SL_COMMENT, WS):
		//	"(" Expression ")" | {Not} "!" expression=Primary | Atomic;
		public ParserRule getRule() { return rule; }

		//"(" Expression ")" | {Not} "!" expression=Primary | Atomic
		public Alternatives getAlternatives() { return cAlternatives; }

		//"(" Expression ")"
		public Group getGroup_0() { return cGroup_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }

		//Expression
		public RuleCall getExpressionParserRuleCall_0_1() { return cExpressionParserRuleCall_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }

		//{Not} "!" expression=Primary
		public Group getGroup_1() { return cGroup_1; }

		//{Not}
		public Action getNotAction_1_0() { return cNotAction_1_0; }

		//"!"
		public Keyword getExclamationMarkKeyword_1_1() { return cExclamationMarkKeyword_1_1; }

		//expression=Primary
		public Assignment getExpressionAssignment_1_2() { return cExpressionAssignment_1_2; }

		//Primary
		public RuleCall getExpressionPrimaryParserRuleCall_1_2_0() { return cExpressionPrimaryParserRuleCall_1_2_0; }

		//Atomic
		public RuleCall getAtomicParserRuleCall_2() { return cAtomicParserRuleCall_2; }
	}

	public class AtomicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Atomic");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cDoubleConstantAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueDoubleParserRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cFreeVariableAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueFreeVariableParserRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cBoolConstantAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Alternatives cValueAlternatives_2_1_0 = (Alternatives)cValueAssignment_2_1.eContents().get(0);
		private final Keyword cValueTrueKeyword_2_1_0_0 = (Keyword)cValueAlternatives_2_1_0.eContents().get(0);
		private final Keyword cValueFalseKeyword_2_1_0_1 = (Keyword)cValueAlternatives_2_1_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cReferencedStoreAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cValueStoreCrossReference_3_1_0 = (CrossReference)cValueAssignment_3_1.eContents().get(0);
		private final RuleCall cValueStoreLOWERTerminalRuleCall_3_1_0_1 = (RuleCall)cValueStoreCrossReference_3_1_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cReferencedStoreAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Keyword cThisKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cValueAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final CrossReference cValueStoreCrossReference_4_2_0 = (CrossReference)cValueAssignment_4_2.eContents().get(0);
		private final RuleCall cValueStoreLOWERTerminalRuleCall_4_2_0_1 = (RuleCall)cValueStoreCrossReference_4_2_0.eContents().get(1);
		
		//Atomic returns Expression hidden(ML_COMMENT, SL_COMMENT, WS):
		//	{DoubleConstant} value=Double | {FreeVariable} value=FreeVariable | {BoolConstant} value=("true" | "false") |
		//	{ReferencedStore} value=[Store|LOWER] | {ReferencedStore} "this." value=[Store|LOWER];
		public ParserRule getRule() { return rule; }

		//{DoubleConstant} value=Double | {FreeVariable} value=FreeVariable | {BoolConstant} value=("true" | "false") |
		//{ReferencedStore} value=[Store|LOWER] | {ReferencedStore} "this." value=[Store|LOWER]
		public Alternatives getAlternatives() { return cAlternatives; }

		//{DoubleConstant} value=Double
		public Group getGroup_0() { return cGroup_0; }

		//{DoubleConstant}
		public Action getDoubleConstantAction_0_0() { return cDoubleConstantAction_0_0; }

		//value=Double
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }

		//Double
		public RuleCall getValueDoubleParserRuleCall_0_1_0() { return cValueDoubleParserRuleCall_0_1_0; }

		//{FreeVariable} value=FreeVariable
		public Group getGroup_1() { return cGroup_1; }

		//{FreeVariable}
		public Action getFreeVariableAction_1_0() { return cFreeVariableAction_1_0; }

		//value=FreeVariable
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }

		//FreeVariable
		public RuleCall getValueFreeVariableParserRuleCall_1_1_0() { return cValueFreeVariableParserRuleCall_1_1_0; }

		//{BoolConstant} value=("true" | "false")
		public Group getGroup_2() { return cGroup_2; }

		//{BoolConstant}
		public Action getBoolConstantAction_2_0() { return cBoolConstantAction_2_0; }

		//value=("true" | "false")
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }

		//"true" | "false"
		public Alternatives getValueAlternatives_2_1_0() { return cValueAlternatives_2_1_0; }

		//"true"
		public Keyword getValueTrueKeyword_2_1_0_0() { return cValueTrueKeyword_2_1_0_0; }

		//"false"
		public Keyword getValueFalseKeyword_2_1_0_1() { return cValueFalseKeyword_2_1_0_1; }

		//{ReferencedStore} value=[Store|LOWER]
		public Group getGroup_3() { return cGroup_3; }

		//{ReferencedStore}
		public Action getReferencedStoreAction_3_0() { return cReferencedStoreAction_3_0; }

		//value=[Store|LOWER]
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }

		//[Store|LOWER]
		public CrossReference getValueStoreCrossReference_3_1_0() { return cValueStoreCrossReference_3_1_0; }

		//LOWER
		public RuleCall getValueStoreLOWERTerminalRuleCall_3_1_0_1() { return cValueStoreLOWERTerminalRuleCall_3_1_0_1; }

		//{ReferencedStore} "this." value=[Store|LOWER]
		public Group getGroup_4() { return cGroup_4; }

		//{ReferencedStore}
		public Action getReferencedStoreAction_4_0() { return cReferencedStoreAction_4_0; }

		//"this."
		public Keyword getThisKeyword_4_1() { return cThisKeyword_4_1; }

		//value=[Store|LOWER]
		public Assignment getValueAssignment_4_2() { return cValueAssignment_4_2; }

		//[Store|LOWER]
		public CrossReference getValueStoreCrossReference_4_2_0() { return cValueStoreCrossReference_4_2_0; }

		//LOWER
		public RuleCall getValueStoreLOWERTerminalRuleCall_4_2_0_1() { return cValueStoreLOWERTerminalRuleCall_4_2_0_1; }
	}

	public class DoubleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Double");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Alternatives cAlternatives_1_2 = (Alternatives)cGroup_1.eContents().get(2);
		private final Keyword cEKeyword_1_2_0 = (Keyword)cAlternatives_1_2.eContents().get(0);
		private final Group cGroup_1_2_1 = (Group)cAlternatives_1_2.eContents().get(1);
		private final Keyword cEKeyword_1_2_1_0 = (Keyword)cGroup_1_2_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_2_1_1 = (Keyword)cGroup_1_2_1.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1_2_1_2 = (RuleCall)cGroup_1_2_1.eContents().get(2);
		
		//Double returns ecore::EDouble:
		//	INT ("." INT ("e" | "E" "-"? INT)?)?;
		public ParserRule getRule() { return rule; }

		//INT ("." INT ("e" | "E" "-"? INT)?)?
		public Group getGroup() { return cGroup; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//("." INT ("e" | "E" "-"? INT)?)?
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1_1() { return cINTTerminalRuleCall_1_1; }

		//("e" | "E" "-"? INT)?
		public Alternatives getAlternatives_1_2() { return cAlternatives_1_2; }

		//"e"
		public Keyword getEKeyword_1_2_0() { return cEKeyword_1_2_0; }

		//"E" "-"? INT
		public Group getGroup_1_2_1() { return cGroup_1_2_1; }

		//"E"
		public Keyword getEKeyword_1_2_1_0() { return cEKeyword_1_2_1_0; }

		//"-"?
		public Keyword getHyphenMinusKeyword_1_2_1_1() { return cHyphenMinusKeyword_1_2_1_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_1_2_1_2() { return cINTTerminalRuleCall_1_2_1_2; }
	}

	public class FreeVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FreeVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDollarSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLOWERTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//FreeVariable returns ecore::EString:
		//	"$" LOWER;
		public ParserRule getRule() { return rule; }

		//"$" LOWER
		public Group getGroup() { return cGroup; }

		//"$"
		public Keyword getDollarSignKeyword_0() { return cDollarSignKeyword_0; }

		//LOWER
		public RuleCall getLOWERTerminalRuleCall_1() { return cLOWERTerminalRuleCall_1; }
	}
	
	
	private final ModelElements pModel;
	private final TermElements pTerm;
	private final ProcessElements pProcess;
	private final ProcessExpressionElements pProcessExpression;
	private final ParallelElements pParallel;
	private final ChoiceElements pChoice;
	private final PrimaryProcessElements pPrimaryProcess;
	private final PredicateProcessElements pPredicateProcess;
	private final ActionProcessElements pActionProcess;
	private final ActionElements pAction;
	private final PredicateElements pPredicate;
	private final EvaluationsElements pEvaluations;
	private final UpdatesElements pUpdates;
	private final PredicateExpressionElements pPredicateExpression;
	private final EvaluationExpressionElements pEvaluationExpression;
	private final UpdateExpressionElements pUpdateExpression;
	private final StoreElements pStore;
	private final ExpressionElements pExpression;
	private final OrElements pOr;
	private final AndElements pAnd;
	private final EqualityElements pEquality;
	private final ComparisonElements pComparison;
	private final SubtractionElements pSubtraction;
	private final AdditionElements pAddition;
	private final MultiplicationElements pMultiplication;
	private final DivisionElements pDivision;
	private final PrimaryElements pPrimary;
	private final AtomicElements pAtomic;
	private final DoubleElements pDouble;
	private final FreeVariableElements pFreeVariable;
	private final TerminalRule tLOWER;
	private final TerminalRule tUPPER;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ONPAGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pTerm = new TermElements();
		this.pProcess = new ProcessElements();
		this.pProcessExpression = new ProcessExpressionElements();
		this.pParallel = new ParallelElements();
		this.pChoice = new ChoiceElements();
		this.pPrimaryProcess = new PrimaryProcessElements();
		this.pPredicateProcess = new PredicateProcessElements();
		this.pActionProcess = new ActionProcessElements();
		this.pAction = new ActionElements();
		this.pPredicate = new PredicateElements();
		this.pEvaluations = new EvaluationsElements();
		this.pUpdates = new UpdatesElements();
		this.pPredicateExpression = new PredicateExpressionElements();
		this.pEvaluationExpression = new EvaluationExpressionElements();
		this.pUpdateExpression = new UpdateExpressionElements();
		this.pStore = new StoreElements();
		this.pExpression = new ExpressionElements();
		this.pOr = new OrElements();
		this.pAnd = new AndElements();
		this.pEquality = new EqualityElements();
		this.pComparison = new ComparisonElements();
		this.pSubtraction = new SubtractionElements();
		this.pAddition = new AdditionElements();
		this.pMultiplication = new MultiplicationElements();
		this.pDivision = new DivisionElements();
		this.pPrimary = new PrimaryElements();
		this.pAtomic = new AtomicElements();
		this.pDouble = new DoubleElements();
		this.pFreeVariable = new FreeVariableElements();
		this.tLOWER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LOWER");
		this.tUPPER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "UPPER");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.blasedef.onpa.ONPA".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model hidden(ML_COMMENT, SL_COMMENT, WS):
	//	processes+=Process+ stores+=Store+ terms+=Term+;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	////TERMS
	//Term hidden(ML_COMMENT, SL_COMMENT, WS):
	//	"(" name=[Process|UPPER] "," "{" stores+=[Store|LOWER] "}" ")" ";";
	public TermElements getTermAccess() {
		return pTerm;
	}
	
	public ParserRule getTermRule() {
		return getTermAccess().getRule();
	}

	////PROCESSES
	//Process hidden(ML_COMMENT, SL_COMMENT, WS):
	//	name=UPPER "=" value=ProcessExpression ";";
	public ProcessElements getProcessAccess() {
		return pProcess;
	}
	
	public ParserRule getProcessRule() {
		return getProcessAccess().getRule();
	}

	//ProcessExpression hidden(ML_COMMENT, SL_COMMENT, WS):
	//	Parallel;
	public ProcessExpressionElements getProcessExpressionAccess() {
		return pProcessExpression;
	}
	
	public ParserRule getProcessExpressionRule() {
		return getProcessExpressionAccess().getRule();
	}

	//Parallel returns ProcessExpression hidden(ML_COMMENT, SL_COMMENT, WS):
	//	Choice ({Parallel.left=current} "|" right=Choice)*;
	public ParallelElements getParallelAccess() {
		return pParallel;
	}
	
	public ParserRule getParallelRule() {
		return getParallelAccess().getRule();
	}

	//Choice returns ProcessExpression hidden(ML_COMMENT, SL_COMMENT, WS):
	//	PrimaryProcess ({Choice.left=current} "+" right=PrimaryProcess)*;
	public ChoiceElements getChoiceAccess() {
		return pChoice;
	}
	
	public ParserRule getChoiceRule() {
		return getChoiceAccess().getRule();
	}

	//PrimaryProcess returns ProcessExpression hidden(ML_COMMENT, SL_COMMENT, WS):
	//	{Leaf} value="nil" | {Leaf} value="kill" | PredicateProcess | ActionProcess | {ProcessReference}
	//	value=[Process|UPPER];
	public PrimaryProcessElements getPrimaryProcessAccess() {
		return pPrimaryProcess;
	}
	
	public ParserRule getPrimaryProcessRule() {
		return getPrimaryProcessAccess().getRule();
	}

	//PredicateProcess hidden(ML_COMMENT, SL_COMMENT, WS):
	//	predicate=Predicate value=[Process|UPPER];
	public PredicateProcessElements getPredicateProcessAccess() {
		return pPredicateProcess;
	}
	
	public ParserRule getPredicateProcessRule() {
		return getPredicateProcessAccess().getRule();
	}

	//ActionProcess hidden(ML_COMMENT, SL_COMMENT, WS):
	//	action=Action value=[Process|UPPER];
	public ActionProcessElements getActionProcessAccess() {
		return pActionProcess;
	}
	
	public ParserRule getActionProcessRule() {
		return getActionProcessAccess().getRule();
	}

	////ACTIONS
	//Action hidden(ML_COMMENT, SL_COMMENT, WS):
	//	{Action} name=LOWER "*"? predicates=Predicate evaluations=Evaluations updates=Updates ".";
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}

	//Predicate hidden(ML_COMMENT, SL_COMMENT, WS):
	//	{Predicate} "[" predicates=PredicateExpression "]";
	public PredicateElements getPredicateAccess() {
		return pPredicate;
	}
	
	public ParserRule getPredicateRule() {
		return getPredicateAccess().getRule();
	}

	//Evaluations hidden(ML_COMMENT, SL_COMMENT, WS):
	//	"(" {In} expressions+=EvaluationExpression+ ")" | "<" {Out} expressions+=EvaluationExpression+ ">";
	public EvaluationsElements getEvaluationsAccess() {
		return pEvaluations;
	}
	
	public ParserRule getEvaluationsRule() {
		return getEvaluationsAccess().getRule();
	}

	//Updates hidden(ML_COMMENT, SL_COMMENT, WS):
	//	{Updates} "{" updates+=UpdateExpression+ "}";
	public UpdatesElements getUpdatesAccess() {
		return pUpdates;
	}
	
	public ParserRule getUpdatesRule() {
		return getUpdatesAccess().getRule();
	}

	//PredicateExpression hidden(ML_COMMENT, SL_COMMENT, WS):
	//	expression=Expression ";";
	public PredicateExpressionElements getPredicateExpressionAccess() {
		return pPredicateExpression;
	}
	
	public ParserRule getPredicateExpressionRule() {
		return getPredicateExpressionAccess().getRule();
	}

	//EvaluationExpression hidden(ML_COMMENT, SL_COMMENT, WS):
	//	Expression ";";
	public EvaluationExpressionElements getEvaluationExpressionAccess() {
		return pEvaluationExpression;
	}
	
	public ParserRule getEvaluationExpressionRule() {
		return getEvaluationExpressionAccess().getRule();
	}

	//UpdateExpression hidden(ML_COMMENT, SL_COMMENT, WS):
	//	expression=Expression ";";
	public UpdateExpressionElements getUpdateExpressionAccess() {
		return pUpdateExpression;
	}
	
	public ParserRule getUpdateExpressionRule() {
		return getUpdateExpressionAccess().getRule();
	}

	////STORES
	//Store hidden(ML_COMMENT, SL_COMMENT, WS):
	//	name=LOWER "=" value=Expression ";";
	public StoreElements getStoreAccess() {
		return pStore;
	}
	
	public ParserRule getStoreRule() {
		return getStoreAccess().getRule();
	}

	//Expression hidden(ML_COMMENT, SL_COMMENT, WS):
	//	Or;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//Or returns Expression hidden(ML_COMMENT, SL_COMMENT, WS):
	//	And ({Or.left=current} "||" right=And)*;
	public OrElements getOrAccess() {
		return pOr;
	}
	
	public ParserRule getOrRule() {
		return getOrAccess().getRule();
	}

	//And returns Expression hidden(ML_COMMENT, SL_COMMENT, WS):
	//	Equality ({And.left=current} "&&" right=Equality)*;
	public AndElements getAndAccess() {
		return pAnd;
	}
	
	public ParserRule getAndRule() {
		return getAndAccess().getRule();
	}

	//Equality returns Expression hidden(ML_COMMENT, SL_COMMENT, WS):
	//	Comparison ({Equality.left=current} op=("==" | "!=") right=Comparison)*;
	public EqualityElements getEqualityAccess() {
		return pEquality;
	}
	
	public ParserRule getEqualityRule() {
		return getEqualityAccess().getRule();
	}

	//Comparison returns Expression hidden(ML_COMMENT, SL_COMMENT, WS):
	//	Subtraction ({Comparison.left=current} op=(">=" | "<=" | ">" | "<") right=Subtraction)*;
	public ComparisonElements getComparisonAccess() {
		return pComparison;
	}
	
	public ParserRule getComparisonRule() {
		return getComparisonAccess().getRule();
	}

	//Subtraction returns Expression hidden(ML_COMMENT, SL_COMMENT, WS):
	//	Addition ({Sub.left=current} "-" right=Addition)*;
	public SubtractionElements getSubtractionAccess() {
		return pSubtraction;
	}
	
	public ParserRule getSubtractionRule() {
		return getSubtractionAccess().getRule();
	}

	//Addition returns Expression hidden(ML_COMMENT, SL_COMMENT, WS):
	//	Multiplication ({Plu.left=current} "+" right=Multiplication)*;
	public AdditionElements getAdditionAccess() {
		return pAddition;
	}
	
	public ParserRule getAdditionRule() {
		return getAdditionAccess().getRule();
	}

	//Multiplication returns Expression hidden(ML_COMMENT, SL_COMMENT, WS):
	//	Division ({Mul.left=current} "*" right=Division)*;
	public MultiplicationElements getMultiplicationAccess() {
		return pMultiplication;
	}
	
	public ParserRule getMultiplicationRule() {
		return getMultiplicationAccess().getRule();
	}

	//Division returns Expression hidden(ML_COMMENT, SL_COMMENT, WS):
	//	Primary ({Div.left=current} "/" right=Primary)*;
	public DivisionElements getDivisionAccess() {
		return pDivision;
	}
	
	public ParserRule getDivisionRule() {
		return getDivisionAccess().getRule();
	}

	//Primary returns Expression hidden(ML_COMMENT, SL_COMMENT, WS):
	//	"(" Expression ")" | {Not} "!" expression=Primary | Atomic;
	public PrimaryElements getPrimaryAccess() {
		return pPrimary;
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}

	//Atomic returns Expression hidden(ML_COMMENT, SL_COMMENT, WS):
	//	{DoubleConstant} value=Double | {FreeVariable} value=FreeVariable | {BoolConstant} value=("true" | "false") |
	//	{ReferencedStore} value=[Store|LOWER] | {ReferencedStore} "this." value=[Store|LOWER];
	public AtomicElements getAtomicAccess() {
		return pAtomic;
	}
	
	public ParserRule getAtomicRule() {
		return getAtomicAccess().getRule();
	}

	//Double returns ecore::EDouble:
	//	INT ("." INT ("e" | "E" "-"? INT)?)?;
	public DoubleElements getDoubleAccess() {
		return pDouble;
	}
	
	public ParserRule getDoubleRule() {
		return getDoubleAccess().getRule();
	}

	//FreeVariable returns ecore::EString:
	//	"$" LOWER;
	public FreeVariableElements getFreeVariableAccess() {
		return pFreeVariable;
	}
	
	public ParserRule getFreeVariableRule() {
		return getFreeVariableAccess().getRule();
	}

	//terminal LOWER:
	//	"a".."z" ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getLOWERRule() {
		return tLOWER;
	} 

	//terminal UPPER:
	//	"A".."Z" ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getUPPERRule() {
		return tUPPER;
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
