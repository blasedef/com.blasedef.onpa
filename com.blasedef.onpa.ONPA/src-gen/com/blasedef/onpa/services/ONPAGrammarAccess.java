/*
* generated by Xtext
*/
package com.blasedef.onpa.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class ONPAGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStoresAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStoresStoreParserRuleCall_0_0 = (RuleCall)cStoresAssignment_0.eContents().get(0);
		private final Assignment cActionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cActionsActionParserRuleCall_1_0 = (RuleCall)cActionsAssignment_1.eContents().get(0);
		
		////predicates+=Predicates*
		//Model:
		//	stores+=Store* actions+=Action*;
		public ParserRule getRule() { return rule; }

		//stores+=Store* actions+=Action*
		public Group getGroup() { return cGroup; }

		//stores+=Store*
		public Assignment getStoresAssignment_0() { return cStoresAssignment_0; }

		//Store
		public RuleCall getStoresStoreParserRuleCall_0_0() { return cStoresStoreParserRuleCall_0_0; }

		//actions+=Action*
		public Assignment getActionsAssignment_1() { return cActionsAssignment_1; }

		//Action
		public RuleCall getActionsActionParserRuleCall_1_0() { return cActionsActionParserRuleCall_1_0; }
	}

	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Action");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cBroadcastOutParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cUnicastOutParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cBroadcastInParserRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final RuleCall cUnicastInParserRuleCall_0_3 = (RuleCall)cAlternatives_0.eContents().get(3);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Action:
		//	(BroadcastOut | UnicastOut | BroadcastIn | UnicastIn) ";";
		public ParserRule getRule() { return rule; }

		//(BroadcastOut | UnicastOut | BroadcastIn | UnicastIn) ";"
		public Group getGroup() { return cGroup; }

		//BroadcastOut | UnicastOut | BroadcastIn | UnicastIn
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//BroadcastOut
		public RuleCall getBroadcastOutParserRuleCall_0_0() { return cBroadcastOutParserRuleCall_0_0; }

		//UnicastOut
		public RuleCall getUnicastOutParserRuleCall_0_1() { return cUnicastOutParserRuleCall_0_1; }

		//BroadcastIn
		public RuleCall getBroadcastInParserRuleCall_0_2() { return cBroadcastInParserRuleCall_0_2; }

		//UnicastIn
		public RuleCall getUnicastInParserRuleCall_0_3() { return cUnicastInParserRuleCall_0_3; }

		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class BroadcastOutElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BroadcastOut");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameLOWERTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPredicateAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPredicatePredicatesParserRuleCall_2_0 = (RuleCall)cPredicateAssignment_2.eContents().get(0);
		private final Assignment cEvaluationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEvaluationEvaluationsParserRuleCall_3_0 = (RuleCall)cEvaluationAssignment_3.eContents().get(0);
		private final Assignment cUpdateAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cUpdateUpdatesParserRuleCall_4_0 = (RuleCall)cUpdateAssignment_4.eContents().get(0);
		
		//BroadcastOut:
		//	name=LOWER "*" predicate=Predicates evaluation=Evaluations update=Updates;
		public ParserRule getRule() { return rule; }

		//name=LOWER "*" predicate=Predicates evaluation=Evaluations update=Updates
		public Group getGroup() { return cGroup; }

		//name=LOWER
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//LOWER
		public RuleCall getNameLOWERTerminalRuleCall_0_0() { return cNameLOWERTerminalRuleCall_0_0; }

		//"*"
		public Keyword getAsteriskKeyword_1() { return cAsteriskKeyword_1; }

		//predicate=Predicates
		public Assignment getPredicateAssignment_2() { return cPredicateAssignment_2; }

		//Predicates
		public RuleCall getPredicatePredicatesParserRuleCall_2_0() { return cPredicatePredicatesParserRuleCall_2_0; }

		//evaluation=Evaluations
		public Assignment getEvaluationAssignment_3() { return cEvaluationAssignment_3; }

		//Evaluations
		public RuleCall getEvaluationEvaluationsParserRuleCall_3_0() { return cEvaluationEvaluationsParserRuleCall_3_0; }

		//update=Updates
		public Assignment getUpdateAssignment_4() { return cUpdateAssignment_4; }

		//Updates
		public RuleCall getUpdateUpdatesParserRuleCall_4_0() { return cUpdateUpdatesParserRuleCall_4_0; }
	}

	public class BroadcastInElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BroadcastIn");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameLOWERTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValuesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValuesValuesParserRuleCall_2_0 = (RuleCall)cValuesAssignment_2.eContents().get(0);
		private final Assignment cUpdateAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cUpdateUpdatesParserRuleCall_3_0 = (RuleCall)cUpdateAssignment_3.eContents().get(0);
		private final Assignment cPredicateAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPredicatePredicatesParserRuleCall_4_0 = (RuleCall)cPredicateAssignment_4.eContents().get(0);
		
		//BroadcastIn:
		//	name=LOWER "*" values=Values update=Updates predicate=Predicates;
		public ParserRule getRule() { return rule; }

		//name=LOWER "*" values=Values update=Updates predicate=Predicates
		public Group getGroup() { return cGroup; }

		//name=LOWER
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//LOWER
		public RuleCall getNameLOWERTerminalRuleCall_0_0() { return cNameLOWERTerminalRuleCall_0_0; }

		//"*"
		public Keyword getAsteriskKeyword_1() { return cAsteriskKeyword_1; }

		//values=Values
		public Assignment getValuesAssignment_2() { return cValuesAssignment_2; }

		//Values
		public RuleCall getValuesValuesParserRuleCall_2_0() { return cValuesValuesParserRuleCall_2_0; }

		//update=Updates
		public Assignment getUpdateAssignment_3() { return cUpdateAssignment_3; }

		//Updates
		public RuleCall getUpdateUpdatesParserRuleCall_3_0() { return cUpdateUpdatesParserRuleCall_3_0; }

		//predicate=Predicates
		public Assignment getPredicateAssignment_4() { return cPredicateAssignment_4; }

		//Predicates
		public RuleCall getPredicatePredicatesParserRuleCall_4_0() { return cPredicatePredicatesParserRuleCall_4_0; }
	}

	public class UnicastOutElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnicastOut");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameLOWERTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cPredicateAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPredicatePredicatesParserRuleCall_1_0 = (RuleCall)cPredicateAssignment_1.eContents().get(0);
		private final Assignment cEvaluationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEvaluationEvaluationsParserRuleCall_2_0 = (RuleCall)cEvaluationAssignment_2.eContents().get(0);
		private final Assignment cUpdateAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cUpdateUpdatesParserRuleCall_3_0 = (RuleCall)cUpdateAssignment_3.eContents().get(0);
		
		//UnicastOut:
		//	name=LOWER predicate=Predicates evaluation=Evaluations update=Updates;
		public ParserRule getRule() { return rule; }

		//name=LOWER predicate=Predicates evaluation=Evaluations update=Updates
		public Group getGroup() { return cGroup; }

		//name=LOWER
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//LOWER
		public RuleCall getNameLOWERTerminalRuleCall_0_0() { return cNameLOWERTerminalRuleCall_0_0; }

		//predicate=Predicates
		public Assignment getPredicateAssignment_1() { return cPredicateAssignment_1; }

		//Predicates
		public RuleCall getPredicatePredicatesParserRuleCall_1_0() { return cPredicatePredicatesParserRuleCall_1_0; }

		//evaluation=Evaluations
		public Assignment getEvaluationAssignment_2() { return cEvaluationAssignment_2; }

		//Evaluations
		public RuleCall getEvaluationEvaluationsParserRuleCall_2_0() { return cEvaluationEvaluationsParserRuleCall_2_0; }

		//update=Updates
		public Assignment getUpdateAssignment_3() { return cUpdateAssignment_3; }

		//Updates
		public RuleCall getUpdateUpdatesParserRuleCall_3_0() { return cUpdateUpdatesParserRuleCall_3_0; }
	}

	public class UnicastInElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnicastIn");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameLOWERTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cValuesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValuesValuesParserRuleCall_1_0 = (RuleCall)cValuesAssignment_1.eContents().get(0);
		private final Assignment cUpdateAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUpdateUpdatesParserRuleCall_2_0 = (RuleCall)cUpdateAssignment_2.eContents().get(0);
		private final Assignment cPredicateAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPredicatePredicatesParserRuleCall_3_0 = (RuleCall)cPredicateAssignment_3.eContents().get(0);
		
		//UnicastIn:
		//	name=LOWER values=Values update=Updates predicate=Predicates;
		public ParserRule getRule() { return rule; }

		//name=LOWER values=Values update=Updates predicate=Predicates
		public Group getGroup() { return cGroup; }

		//name=LOWER
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//LOWER
		public RuleCall getNameLOWERTerminalRuleCall_0_0() { return cNameLOWERTerminalRuleCall_0_0; }

		//values=Values
		public Assignment getValuesAssignment_1() { return cValuesAssignment_1; }

		//Values
		public RuleCall getValuesValuesParserRuleCall_1_0() { return cValuesValuesParserRuleCall_1_0; }

		//update=Updates
		public Assignment getUpdateAssignment_2() { return cUpdateAssignment_2; }

		//Updates
		public RuleCall getUpdateUpdatesParserRuleCall_2_0() { return cUpdateUpdatesParserRuleCall_2_0; }

		//predicate=Predicates
		public Assignment getPredicateAssignment_3() { return cPredicateAssignment_3; }

		//Predicates
		public RuleCall getPredicatePredicatesParserRuleCall_3_0() { return cPredicatePredicatesParserRuleCall_3_0; }
	}

	public class UpdatesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Updates");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUpdatesAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cUpdateExpressionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUpdateExpressionsUpdateExpressionParserRuleCall_2_0 = (RuleCall)cUpdateExpressionsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Updates:
		//	{Updates} "{" updateExpressions+=UpdateExpression? "}";
		public ParserRule getRule() { return rule; }

		//{Updates} "{" updateExpressions+=UpdateExpression? "}"
		public Group getGroup() { return cGroup; }

		//{Updates}
		public Action getUpdatesAction_0() { return cUpdatesAction_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//updateExpressions+=UpdateExpression?
		public Assignment getUpdateExpressionsAssignment_2() { return cUpdateExpressionsAssignment_2; }

		//UpdateExpression
		public RuleCall getUpdateExpressionsUpdateExpressionParserRuleCall_2_0() { return cUpdateExpressionsUpdateExpressionParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class UpdateExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UpdateExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cNameStoreCrossReference_0_0 = (CrossReference)cNameAssignment_0.eContents().get(0);
		private final RuleCall cNameStoreLOWERTerminalRuleCall_0_0_1 = (RuleCall)cNameStoreCrossReference_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueExpressionParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//UpdateExpression:
		//	name=[Store|LOWER] "=" value=Expression ";";
		public ParserRule getRule() { return rule; }

		//name=[Store|LOWER] "=" value=Expression ";"
		public Group getGroup() { return cGroup; }

		//name=[Store|LOWER]
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//[Store|LOWER]
		public CrossReference getNameStoreCrossReference_0_0() { return cNameStoreCrossReference_0_0; }

		//LOWER
		public RuleCall getNameStoreLOWERTerminalRuleCall_0_0_1() { return cNameStoreLOWERTerminalRuleCall_0_0_1; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//value=Expression
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//Expression
		public RuleCall getValueExpressionParserRuleCall_2_0() { return cValueExpressionParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class ValuesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Values");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cValuesAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValuesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValuesValueExpressionParserRuleCall_2_0 = (RuleCall)cValuesAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Values:
		//	{Values} "(" values+=ValueExpression? //What is the point of this? (Knowing what local stores belong to who? - if so, shouldn't this be automatic?) - CDW 07.01.15
		//	")";
		public ParserRule getRule() { return rule; }

		//{Values} "(" values+=ValueExpression? //What is the point of this? (Knowing what local stores belong to who? - if so, shouldn't this be automatic?) - CDW 07.01.15
		//")"
		public Group getGroup() { return cGroup; }

		//{Values}
		public Action getValuesAction_0() { return cValuesAction_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//values+=ValueExpression?
		public Assignment getValuesAssignment_2() { return cValuesAssignment_2; }

		//ValueExpression
		public RuleCall getValuesValueExpressionParserRuleCall_2_0() { return cValuesValueExpressionParserRuleCall_2_0; }

		////What is the point of this? (Knowing what local stores belong to who? - if so, shouldn't this be automatic?) - CDW 07.01.15
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class ValueExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValueExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cNameStoreCrossReference_0_0 = (CrossReference)cNameAssignment_0.eContents().get(0);
		private final RuleCall cNameStoreLOWERTerminalRuleCall_0_0_1 = (RuleCall)cNameStoreCrossReference_0_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ValueExpression:
		//	name=[Store|LOWER] ";";
		public ParserRule getRule() { return rule; }

		//name=[Store|LOWER] ";"
		public Group getGroup() { return cGroup; }

		//name=[Store|LOWER]
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//[Store|LOWER]
		public CrossReference getNameStoreCrossReference_0_0() { return cNameStoreCrossReference_0_0; }

		//LOWER
		public RuleCall getNameStoreLOWERTerminalRuleCall_0_0_1() { return cNameStoreLOWERTerminalRuleCall_0_0_1; }

		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class EvaluationsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Evaluations");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEvaluationsAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEvaluationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEvaluationsEvaluationParserRuleCall_2_0 = (RuleCall)cEvaluationsAssignment_2.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Evaluations:
		//	{Evaluations} "<" evaluations+=Evaluation? ">";
		public ParserRule getRule() { return rule; }

		//{Evaluations} "<" evaluations+=Evaluation? ">"
		public Group getGroup() { return cGroup; }

		//{Evaluations}
		public Action getEvaluationsAction_0() { return cEvaluationsAction_0; }

		//"<"
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }

		//evaluations+=Evaluation?
		public Assignment getEvaluationsAssignment_2() { return cEvaluationsAssignment_2; }

		//Evaluation
		public RuleCall getEvaluationsEvaluationParserRuleCall_2_0() { return cEvaluationsEvaluationParserRuleCall_2_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_3() { return cGreaterThanSignKeyword_3; }
	}

	public class EvaluationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Evaluation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cNameStoreCrossReference_0_0 = (CrossReference)cNameAssignment_0.eContents().get(0);
		private final RuleCall cNameStoreLOWERTerminalRuleCall_0_0_1 = (RuleCall)cNameStoreCrossReference_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueExpressionParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Evaluation:
		//	name=[Store|LOWER] "=" value=Expression;
		public ParserRule getRule() { return rule; }

		//name=[Store|LOWER] "=" value=Expression
		public Group getGroup() { return cGroup; }

		//name=[Store|LOWER]
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//[Store|LOWER]
		public CrossReference getNameStoreCrossReference_0_0() { return cNameStoreCrossReference_0_0; }

		//LOWER
		public RuleCall getNameStoreLOWERTerminalRuleCall_0_0_1() { return cNameStoreLOWERTerminalRuleCall_0_0_1; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//value=Expression
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//Expression
		public RuleCall getValueExpressionParserRuleCall_2_0() { return cValueExpressionParserRuleCall_2_0; }
	}

	public class PredicatesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Predicates");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPredicatesAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionsPredicateExpressionParserRuleCall_2_0 = (RuleCall)cExpressionsAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Predicates:
		//	{Predicates} "[" expressions+=PredicateExpression "]";
		public ParserRule getRule() { return rule; }

		//{Predicates} "[" expressions+=PredicateExpression "]"
		public Group getGroup() { return cGroup; }

		//{Predicates}
		public Action getPredicatesAction_0() { return cPredicatesAction_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//expressions+=PredicateExpression
		public Assignment getExpressionsAssignment_2() { return cExpressionsAssignment_2; }

		//PredicateExpression
		public RuleCall getExpressionsPredicateExpressionParserRuleCall_2_0() { return cExpressionsPredicateExpressionParserRuleCall_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class PredicateExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PredicateExpression");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueExpressionParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//PredicateExpression:
		//	value=Expression;
		public ParserRule getRule() { return rule; }

		//value=Expression
		public Assignment getValueAssignment() { return cValueAssignment; }

		//Expression
		public RuleCall getValueExpressionParserRuleCall_0() { return cValueExpressionParserRuleCall_0; }
	}

	public class StoreElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Store");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAttributeValueParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Store:
		//	AttributeValue ";";
		public ParserRule getRule() { return rule; }

		//AttributeValue ";"
		public Group getGroup() { return cGroup; }

		//AttributeValue
		public RuleCall getAttributeValueParserRuleCall_0() { return cAttributeValueParserRuleCall_0; }

		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class AttributeValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameLOWERTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueExpressionParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//AttributeValue:
		//	name=LOWER "=" value=Expression;
		public ParserRule getRule() { return rule; }

		//name=LOWER "=" value=Expression
		public Group getGroup() { return cGroup; }

		//name=LOWER
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//LOWER
		public RuleCall getNameLOWERTerminalRuleCall_0_0() { return cNameLOWERTerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//value=Expression
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//Expression
		public RuleCall getValueExpressionParserRuleCall_2_0() { return cValueExpressionParserRuleCall_2_0; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final RuleCall cOrParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Expression:
		//	Or;
		public ParserRule getRule() { return rule; }

		//Or
		public RuleCall getOrParserRuleCall() { return cOrParserRuleCall; }
	}

	public class OrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Or");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cVerticalLineVerticalLineKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAndParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Or returns Expression:
		//	And ({Or.left=current} "||" right=And)*;
		public ParserRule getRule() { return rule; }

		//And ({Or.left=current} "||" right=And)*
		public Group getGroup() { return cGroup; }

		//And
		public RuleCall getAndParserRuleCall_0() { return cAndParserRuleCall_0; }

		//({Or.left=current} "||" right=And)*
		public Group getGroup_1() { return cGroup_1; }

		//{Or.left=current}
		public Action getOrLeftAction_1_0() { return cOrLeftAction_1_0; }

		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_1_1() { return cVerticalLineVerticalLineKeyword_1_1; }

		//right=And
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//And
		public RuleCall getRightAndParserRuleCall_1_2_0() { return cRightAndParserRuleCall_1_2_0; }
	}

	public class AndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "And");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEqualityParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAmpersandAmpersandKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightEqualityParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//And returns Expression:
		//	Equality ({And.left=current} "&&" right=Equality)*;
		public ParserRule getRule() { return rule; }

		//Equality ({And.left=current} "&&" right=Equality)*
		public Group getGroup() { return cGroup; }

		//Equality
		public RuleCall getEqualityParserRuleCall_0() { return cEqualityParserRuleCall_0; }

		//({And.left=current} "&&" right=Equality)*
		public Group getGroup_1() { return cGroup_1; }

		//{And.left=current}
		public Action getAndLeftAction_1_0() { return cAndLeftAction_1_0; }

		//"&&"
		public Keyword getAmpersandAmpersandKeyword_1_1() { return cAmpersandAmpersandKeyword_1_1; }

		//right=Equality
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Equality
		public RuleCall getRightEqualityParserRuleCall_1_2_0() { return cRightEqualityParserRuleCall_1_2_0; }
	}

	public class EqualityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Equality");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cComparisonParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cEqualityLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpEqualsSignEqualsSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpExclamationMarkEqualsSignKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightComparisonParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Equality returns Expression:
		//	Comparison ({Equality.left=current} op=("==" | "!=") right=Comparison)*;
		public ParserRule getRule() { return rule; }

		//Comparison ({Equality.left=current} op=("==" | "!=") right=Comparison)*
		public Group getGroup() { return cGroup; }

		//Comparison
		public RuleCall getComparisonParserRuleCall_0() { return cComparisonParserRuleCall_0; }

		//({Equality.left=current} op=("==" | "!=") right=Comparison)*
		public Group getGroup_1() { return cGroup_1; }

		//{Equality.left=current}
		public Action getEqualityLeftAction_1_0() { return cEqualityLeftAction_1_0; }

		//op=("==" | "!=")
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//"==" | "!="
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }

		//"=="
		public Keyword getOpEqualsSignEqualsSignKeyword_1_1_0_0() { return cOpEqualsSignEqualsSignKeyword_1_1_0_0; }

		//"!="
		public Keyword getOpExclamationMarkEqualsSignKeyword_1_1_0_1() { return cOpExclamationMarkEqualsSignKeyword_1_1_0_1; }

		//right=Comparison
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Comparison
		public RuleCall getRightComparisonParserRuleCall_1_2_0() { return cRightComparisonParserRuleCall_1_2_0; }
	}

	public class ComparisonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Comparison");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSubtractionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cComparisonLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpGreaterThanSignEqualsSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpLessThanSignEqualsSignKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOpGreaterThanSignKeyword_1_1_0_2 = (Keyword)cOpAlternatives_1_1_0.eContents().get(2);
		private final Keyword cOpLessThanSignKeyword_1_1_0_3 = (Keyword)cOpAlternatives_1_1_0.eContents().get(3);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightSubtractionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Comparison returns Expression:
		//	Subtraction ({Comparison.left=current} op=(">=" | "<=" | ">" | "<") right=Subtraction)*;
		public ParserRule getRule() { return rule; }

		//Subtraction ({Comparison.left=current} op=(">=" | "<=" | ">" | "<") right=Subtraction)*
		public Group getGroup() { return cGroup; }

		//Subtraction
		public RuleCall getSubtractionParserRuleCall_0() { return cSubtractionParserRuleCall_0; }

		//({Comparison.left=current} op=(">=" | "<=" | ">" | "<") right=Subtraction)*
		public Group getGroup_1() { return cGroup_1; }

		//{Comparison.left=current}
		public Action getComparisonLeftAction_1_0() { return cComparisonLeftAction_1_0; }

		//op=(">=" | "<=" | ">" | "<")
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//">=" | "<=" | ">" | "<"
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }

		//">="
		public Keyword getOpGreaterThanSignEqualsSignKeyword_1_1_0_0() { return cOpGreaterThanSignEqualsSignKeyword_1_1_0_0; }

		//"<="
		public Keyword getOpLessThanSignEqualsSignKeyword_1_1_0_1() { return cOpLessThanSignEqualsSignKeyword_1_1_0_1; }

		//">"
		public Keyword getOpGreaterThanSignKeyword_1_1_0_2() { return cOpGreaterThanSignKeyword_1_1_0_2; }

		//"<"
		public Keyword getOpLessThanSignKeyword_1_1_0_3() { return cOpLessThanSignKeyword_1_1_0_3; }

		//right=Subtraction
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Subtraction
		public RuleCall getRightSubtractionParserRuleCall_1_2_0() { return cRightSubtractionParserRuleCall_1_2_0; }
	}

	public class SubtractionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Subtraction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAdditionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cSubLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAdditionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Subtraction returns Expression:
		//	Addition ({Sub.left=current} "-" right=Addition)*;
		public ParserRule getRule() { return rule; }

		//Addition ({Sub.left=current} "-" right=Addition)*
		public Group getGroup() { return cGroup; }

		//Addition
		public RuleCall getAdditionParserRuleCall_0() { return cAdditionParserRuleCall_0; }

		//({Sub.left=current} "-" right=Addition)*
		public Group getGroup_1() { return cGroup_1; }

		//{Sub.left=current}
		public Action getSubLeftAction_1_0() { return cSubLeftAction_1_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1_1() { return cHyphenMinusKeyword_1_1; }

		//right=Addition
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Addition
		public RuleCall getRightAdditionParserRuleCall_1_2_0() { return cRightAdditionParserRuleCall_1_2_0; }
	}

	public class AdditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Addition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cPluLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightMultiplicationParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Addition returns Expression:
		//	Multiplication ({Plu.left=current} "+" right=Multiplication)*;
		public ParserRule getRule() { return rule; }

		//Multiplication ({Plu.left=current} "+" right=Multiplication)*
		public Group getGroup() { return cGroup; }

		//Multiplication
		public RuleCall getMultiplicationParserRuleCall_0() { return cMultiplicationParserRuleCall_0; }

		//({Plu.left=current} "+" right=Multiplication)*
		public Group getGroup_1() { return cGroup_1; }

		//{Plu.left=current}
		public Action getPluLeftAction_1_0() { return cPluLeftAction_1_0; }

		//"+"
		public Keyword getPlusSignKeyword_1_1() { return cPlusSignKeyword_1_1; }

		//right=Multiplication
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Multiplication
		public RuleCall getRightMultiplicationParserRuleCall_1_2_0() { return cRightMultiplicationParserRuleCall_1_2_0; }
	}

	public class MultiplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Multiplication");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDivisionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cMulLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightDivisionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Multiplication returns Expression:
		//	Division ({Mul.left=current} "*" right=Division)*;
		public ParserRule getRule() { return rule; }

		//Division ({Mul.left=current} "*" right=Division)*
		public Group getGroup() { return cGroup; }

		//Division
		public RuleCall getDivisionParserRuleCall_0() { return cDivisionParserRuleCall_0; }

		//({Mul.left=current} "*" right=Division)*
		public Group getGroup_1() { return cGroup_1; }

		//{Mul.left=current}
		public Action getMulLeftAction_1_0() { return cMulLeftAction_1_0; }

		//"*"
		public Keyword getAsteriskKeyword_1_1() { return cAsteriskKeyword_1_1; }

		//right=Division
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Division
		public RuleCall getRightDivisionParserRuleCall_1_2_0() { return cRightDivisionParserRuleCall_1_2_0; }
	}

	public class DivisionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Division");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cDivLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cSolidusKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPrimaryParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Division returns Expression:
		//	Primary ({Div.left=current} "/" right=Primary)*;
		public ParserRule getRule() { return rule; }

		//Primary ({Div.left=current} "/" right=Primary)*
		public Group getGroup() { return cGroup; }

		//Primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }

		//({Div.left=current} "/" right=Primary)*
		public Group getGroup_1() { return cGroup_1; }

		//{Div.left=current}
		public Action getDivLeftAction_1_0() { return cDivLeftAction_1_0; }

		//"/"
		public Keyword getSolidusKeyword_1_1() { return cSolidusKeyword_1_1; }

		//right=Primary
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Primary
		public RuleCall getRightPrimaryParserRuleCall_1_2_0() { return cRightPrimaryParserRuleCall_1_2_0; }
	}

	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cNotAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExpressionPrimaryParserRuleCall_1_2_0 = (RuleCall)cExpressionAssignment_1_2.eContents().get(0);
		private final RuleCall cAtomicParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Primary returns Expression:
		//	"(" Expression ")" | {Not} "!" expression=Primary | Atomic;
		public ParserRule getRule() { return rule; }

		//"(" Expression ")" | {Not} "!" expression=Primary | Atomic
		public Alternatives getAlternatives() { return cAlternatives; }

		//"(" Expression ")"
		public Group getGroup_0() { return cGroup_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }

		//Expression
		public RuleCall getExpressionParserRuleCall_0_1() { return cExpressionParserRuleCall_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }

		//{Not} "!" expression=Primary
		public Group getGroup_1() { return cGroup_1; }

		//{Not}
		public Action getNotAction_1_0() { return cNotAction_1_0; }

		//"!"
		public Keyword getExclamationMarkKeyword_1_1() { return cExclamationMarkKeyword_1_1; }

		//expression=Primary
		public Assignment getExpressionAssignment_1_2() { return cExpressionAssignment_1_2; }

		//Primary
		public RuleCall getExpressionPrimaryParserRuleCall_1_2_0() { return cExpressionPrimaryParserRuleCall_1_2_0; }

		//Atomic
		public RuleCall getAtomicParserRuleCall_2() { return cAtomicParserRuleCall_2; }
	}

	public class AtomicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Atomic");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cDoubleConstantAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueDoubleParserRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cBoolConstantAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cValueAlternatives_1_1_0 = (Alternatives)cValueAssignment_1_1.eContents().get(0);
		private final Keyword cValueTrueKeyword_1_1_0_0 = (Keyword)cValueAlternatives_1_1_0.eContents().get(0);
		private final Keyword cValueFalseKeyword_1_1_0_1 = (Keyword)cValueAlternatives_1_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cReferencedRateAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cValueAttributeValueCrossReference_2_1_0 = (CrossReference)cValueAssignment_2_1.eContents().get(0);
		private final RuleCall cValueAttributeValueLOWERTerminalRuleCall_2_1_0_1 = (RuleCall)cValueAttributeValueCrossReference_2_1_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cReferencedRateAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cThisKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cValueAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final CrossReference cValueAttributeValueCrossReference_3_2_0 = (CrossReference)cValueAssignment_3_2.eContents().get(0);
		private final RuleCall cValueAttributeValueLOWERTerminalRuleCall_3_2_0_1 = (RuleCall)cValueAttributeValueCrossReference_3_2_0.eContents().get(1);
		
		//Atomic returns Expression:
		//	{DoubleConstant} value=Double | {BoolConstant} value=("true" | "false") | {ReferencedRate}
		//	value=[AttributeValue|LOWER] | {ReferencedRate} "this." value=[AttributeValue|LOWER];
		public ParserRule getRule() { return rule; }

		//{DoubleConstant} value=Double | {BoolConstant} value=("true" | "false") | {ReferencedRate} value=[AttributeValue|LOWER]
		//| {ReferencedRate} "this." value=[AttributeValue|LOWER]
		public Alternatives getAlternatives() { return cAlternatives; }

		//{DoubleConstant} value=Double
		public Group getGroup_0() { return cGroup_0; }

		//{DoubleConstant}
		public Action getDoubleConstantAction_0_0() { return cDoubleConstantAction_0_0; }

		//value=Double
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }

		//Double
		public RuleCall getValueDoubleParserRuleCall_0_1_0() { return cValueDoubleParserRuleCall_0_1_0; }

		//{BoolConstant} value=("true" | "false")
		public Group getGroup_1() { return cGroup_1; }

		//{BoolConstant}
		public Action getBoolConstantAction_1_0() { return cBoolConstantAction_1_0; }

		//value=("true" | "false")
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }

		//"true" | "false"
		public Alternatives getValueAlternatives_1_1_0() { return cValueAlternatives_1_1_0; }

		//"true"
		public Keyword getValueTrueKeyword_1_1_0_0() { return cValueTrueKeyword_1_1_0_0; }

		//"false"
		public Keyword getValueFalseKeyword_1_1_0_1() { return cValueFalseKeyword_1_1_0_1; }

		//{ReferencedRate} value=[AttributeValue|LOWER]
		public Group getGroup_2() { return cGroup_2; }

		//{ReferencedRate}
		public Action getReferencedRateAction_2_0() { return cReferencedRateAction_2_0; }

		//value=[AttributeValue|LOWER]
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }

		//[AttributeValue|LOWER]
		public CrossReference getValueAttributeValueCrossReference_2_1_0() { return cValueAttributeValueCrossReference_2_1_0; }

		//LOWER
		public RuleCall getValueAttributeValueLOWERTerminalRuleCall_2_1_0_1() { return cValueAttributeValueLOWERTerminalRuleCall_2_1_0_1; }

		//{ReferencedRate} "this." value=[AttributeValue|LOWER]
		public Group getGroup_3() { return cGroup_3; }

		//{ReferencedRate}
		public Action getReferencedRateAction_3_0() { return cReferencedRateAction_3_0; }

		//"this."
		public Keyword getThisKeyword_3_1() { return cThisKeyword_3_1; }

		//value=[AttributeValue|LOWER]
		public Assignment getValueAssignment_3_2() { return cValueAssignment_3_2; }

		//[AttributeValue|LOWER]
		public CrossReference getValueAttributeValueCrossReference_3_2_0() { return cValueAttributeValueCrossReference_3_2_0; }

		//LOWER
		public RuleCall getValueAttributeValueLOWERTerminalRuleCall_3_2_0_1() { return cValueAttributeValueLOWERTerminalRuleCall_3_2_0_1; }
	}

	public class LowerCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LowerCase");
		private final RuleCall cLOWERTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//LowerCase returns ecore::EString:
		//	LOWER;
		public ParserRule getRule() { return rule; }

		//LOWER
		public RuleCall getLOWERTerminalRuleCall() { return cLOWERTerminalRuleCall; }
	}

	public class DoubleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Double");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Alternatives cAlternatives_1_2 = (Alternatives)cGroup_1.eContents().get(2);
		private final Keyword cEKeyword_1_2_0 = (Keyword)cAlternatives_1_2.eContents().get(0);
		private final Group cGroup_1_2_1 = (Group)cAlternatives_1_2.eContents().get(1);
		private final Keyword cEKeyword_1_2_1_0 = (Keyword)cGroup_1_2_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_2_1_1 = (Keyword)cGroup_1_2_1.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1_2_1_2 = (RuleCall)cGroup_1_2_1.eContents().get(2);
		
		//Double returns ecore::EDouble:
		//	INT ("." INT ("e" | "E" "-"? INT)?)?;
		public ParserRule getRule() { return rule; }

		//INT ("." INT ("e" | "E" "-"? INT)?)?
		public Group getGroup() { return cGroup; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//("." INT ("e" | "E" "-"? INT)?)?
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1_1() { return cINTTerminalRuleCall_1_1; }

		//("e" | "E" "-"? INT)?
		public Alternatives getAlternatives_1_2() { return cAlternatives_1_2; }

		//"e"
		public Keyword getEKeyword_1_2_0() { return cEKeyword_1_2_0; }

		//"E" "-"? INT
		public Group getGroup_1_2_1() { return cGroup_1_2_1; }

		//"E"
		public Keyword getEKeyword_1_2_1_0() { return cEKeyword_1_2_1_0; }

		//"-"?
		public Keyword getHyphenMinusKeyword_1_2_1_1() { return cHyphenMinusKeyword_1_2_1_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_1_2_1_2() { return cINTTerminalRuleCall_1_2_1_2; }
	}
	
	
	private final ModelElements pModel;
	private final ActionElements pAction;
	private final BroadcastOutElements pBroadcastOut;
	private final BroadcastInElements pBroadcastIn;
	private final UnicastOutElements pUnicastOut;
	private final UnicastInElements pUnicastIn;
	private final UpdatesElements pUpdates;
	private final UpdateExpressionElements pUpdateExpression;
	private final ValuesElements pValues;
	private final ValueExpressionElements pValueExpression;
	private final EvaluationsElements pEvaluations;
	private final EvaluationElements pEvaluation;
	private final PredicatesElements pPredicates;
	private final PredicateExpressionElements pPredicateExpression;
	private final StoreElements pStore;
	private final AttributeValueElements pAttributeValue;
	private final ExpressionElements pExpression;
	private final OrElements pOr;
	private final AndElements pAnd;
	private final EqualityElements pEquality;
	private final ComparisonElements pComparison;
	private final SubtractionElements pSubtraction;
	private final AdditionElements pAddition;
	private final MultiplicationElements pMultiplication;
	private final DivisionElements pDivision;
	private final PrimaryElements pPrimary;
	private final AtomicElements pAtomic;
	private final LowerCaseElements pLowerCase;
	private final DoubleElements pDouble;
	private final TerminalRule tLOWER;
	private final TerminalRule tUPPER;
	private final TerminalRule tINACTIVECOMPONENT;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ONPAGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pAction = new ActionElements();
		this.pBroadcastOut = new BroadcastOutElements();
		this.pBroadcastIn = new BroadcastInElements();
		this.pUnicastOut = new UnicastOutElements();
		this.pUnicastIn = new UnicastInElements();
		this.pUpdates = new UpdatesElements();
		this.pUpdateExpression = new UpdateExpressionElements();
		this.pValues = new ValuesElements();
		this.pValueExpression = new ValueExpressionElements();
		this.pEvaluations = new EvaluationsElements();
		this.pEvaluation = new EvaluationElements();
		this.pPredicates = new PredicatesElements();
		this.pPredicateExpression = new PredicateExpressionElements();
		this.pStore = new StoreElements();
		this.pAttributeValue = new AttributeValueElements();
		this.pExpression = new ExpressionElements();
		this.pOr = new OrElements();
		this.pAnd = new AndElements();
		this.pEquality = new EqualityElements();
		this.pComparison = new ComparisonElements();
		this.pSubtraction = new SubtractionElements();
		this.pAddition = new AdditionElements();
		this.pMultiplication = new MultiplicationElements();
		this.pDivision = new DivisionElements();
		this.pPrimary = new PrimaryElements();
		this.pAtomic = new AtomicElements();
		this.pLowerCase = new LowerCaseElements();
		this.pDouble = new DoubleElements();
		this.tLOWER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LOWER");
		this.tUPPER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "UPPER");
		this.tINACTIVECOMPONENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INACTIVECOMPONENT");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.blasedef.onpa.ONPA".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	////predicates+=Predicates*
	//Model:
	//	stores+=Store* actions+=Action*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Action:
	//	(BroadcastOut | UnicastOut | BroadcastIn | UnicastIn) ";";
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}

	//BroadcastOut:
	//	name=LOWER "*" predicate=Predicates evaluation=Evaluations update=Updates;
	public BroadcastOutElements getBroadcastOutAccess() {
		return pBroadcastOut;
	}
	
	public ParserRule getBroadcastOutRule() {
		return getBroadcastOutAccess().getRule();
	}

	//BroadcastIn:
	//	name=LOWER "*" values=Values update=Updates predicate=Predicates;
	public BroadcastInElements getBroadcastInAccess() {
		return pBroadcastIn;
	}
	
	public ParserRule getBroadcastInRule() {
		return getBroadcastInAccess().getRule();
	}

	//UnicastOut:
	//	name=LOWER predicate=Predicates evaluation=Evaluations update=Updates;
	public UnicastOutElements getUnicastOutAccess() {
		return pUnicastOut;
	}
	
	public ParserRule getUnicastOutRule() {
		return getUnicastOutAccess().getRule();
	}

	//UnicastIn:
	//	name=LOWER values=Values update=Updates predicate=Predicates;
	public UnicastInElements getUnicastInAccess() {
		return pUnicastIn;
	}
	
	public ParserRule getUnicastInRule() {
		return getUnicastInAccess().getRule();
	}

	//Updates:
	//	{Updates} "{" updateExpressions+=UpdateExpression? "}";
	public UpdatesElements getUpdatesAccess() {
		return pUpdates;
	}
	
	public ParserRule getUpdatesRule() {
		return getUpdatesAccess().getRule();
	}

	//UpdateExpression:
	//	name=[Store|LOWER] "=" value=Expression ";";
	public UpdateExpressionElements getUpdateExpressionAccess() {
		return pUpdateExpression;
	}
	
	public ParserRule getUpdateExpressionRule() {
		return getUpdateExpressionAccess().getRule();
	}

	//Values:
	//	{Values} "(" values+=ValueExpression? //What is the point of this? (Knowing what local stores belong to who? - if so, shouldn't this be automatic?) - CDW 07.01.15
	//	")";
	public ValuesElements getValuesAccess() {
		return pValues;
	}
	
	public ParserRule getValuesRule() {
		return getValuesAccess().getRule();
	}

	//ValueExpression:
	//	name=[Store|LOWER] ";";
	public ValueExpressionElements getValueExpressionAccess() {
		return pValueExpression;
	}
	
	public ParserRule getValueExpressionRule() {
		return getValueExpressionAccess().getRule();
	}

	//Evaluations:
	//	{Evaluations} "<" evaluations+=Evaluation? ">";
	public EvaluationsElements getEvaluationsAccess() {
		return pEvaluations;
	}
	
	public ParserRule getEvaluationsRule() {
		return getEvaluationsAccess().getRule();
	}

	//Evaluation:
	//	name=[Store|LOWER] "=" value=Expression;
	public EvaluationElements getEvaluationAccess() {
		return pEvaluation;
	}
	
	public ParserRule getEvaluationRule() {
		return getEvaluationAccess().getRule();
	}

	//Predicates:
	//	{Predicates} "[" expressions+=PredicateExpression "]";
	public PredicatesElements getPredicatesAccess() {
		return pPredicates;
	}
	
	public ParserRule getPredicatesRule() {
		return getPredicatesAccess().getRule();
	}

	//PredicateExpression:
	//	value=Expression;
	public PredicateExpressionElements getPredicateExpressionAccess() {
		return pPredicateExpression;
	}
	
	public ParserRule getPredicateExpressionRule() {
		return getPredicateExpressionAccess().getRule();
	}

	//Store:
	//	AttributeValue ";";
	public StoreElements getStoreAccess() {
		return pStore;
	}
	
	public ParserRule getStoreRule() {
		return getStoreAccess().getRule();
	}

	//AttributeValue:
	//	name=LOWER "=" value=Expression;
	public AttributeValueElements getAttributeValueAccess() {
		return pAttributeValue;
	}
	
	public ParserRule getAttributeValueRule() {
		return getAttributeValueAccess().getRule();
	}

	//Expression:
	//	Or;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//Or returns Expression:
	//	And ({Or.left=current} "||" right=And)*;
	public OrElements getOrAccess() {
		return pOr;
	}
	
	public ParserRule getOrRule() {
		return getOrAccess().getRule();
	}

	//And returns Expression:
	//	Equality ({And.left=current} "&&" right=Equality)*;
	public AndElements getAndAccess() {
		return pAnd;
	}
	
	public ParserRule getAndRule() {
		return getAndAccess().getRule();
	}

	//Equality returns Expression:
	//	Comparison ({Equality.left=current} op=("==" | "!=") right=Comparison)*;
	public EqualityElements getEqualityAccess() {
		return pEquality;
	}
	
	public ParserRule getEqualityRule() {
		return getEqualityAccess().getRule();
	}

	//Comparison returns Expression:
	//	Subtraction ({Comparison.left=current} op=(">=" | "<=" | ">" | "<") right=Subtraction)*;
	public ComparisonElements getComparisonAccess() {
		return pComparison;
	}
	
	public ParserRule getComparisonRule() {
		return getComparisonAccess().getRule();
	}

	//Subtraction returns Expression:
	//	Addition ({Sub.left=current} "-" right=Addition)*;
	public SubtractionElements getSubtractionAccess() {
		return pSubtraction;
	}
	
	public ParserRule getSubtractionRule() {
		return getSubtractionAccess().getRule();
	}

	//Addition returns Expression:
	//	Multiplication ({Plu.left=current} "+" right=Multiplication)*;
	public AdditionElements getAdditionAccess() {
		return pAddition;
	}
	
	public ParserRule getAdditionRule() {
		return getAdditionAccess().getRule();
	}

	//Multiplication returns Expression:
	//	Division ({Mul.left=current} "*" right=Division)*;
	public MultiplicationElements getMultiplicationAccess() {
		return pMultiplication;
	}
	
	public ParserRule getMultiplicationRule() {
		return getMultiplicationAccess().getRule();
	}

	//Division returns Expression:
	//	Primary ({Div.left=current} "/" right=Primary)*;
	public DivisionElements getDivisionAccess() {
		return pDivision;
	}
	
	public ParserRule getDivisionRule() {
		return getDivisionAccess().getRule();
	}

	//Primary returns Expression:
	//	"(" Expression ")" | {Not} "!" expression=Primary | Atomic;
	public PrimaryElements getPrimaryAccess() {
		return pPrimary;
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}

	//Atomic returns Expression:
	//	{DoubleConstant} value=Double | {BoolConstant} value=("true" | "false") | {ReferencedRate}
	//	value=[AttributeValue|LOWER] | {ReferencedRate} "this." value=[AttributeValue|LOWER];
	public AtomicElements getAtomicAccess() {
		return pAtomic;
	}
	
	public ParserRule getAtomicRule() {
		return getAtomicAccess().getRule();
	}

	//LowerCase returns ecore::EString:
	//	LOWER;
	public LowerCaseElements getLowerCaseAccess() {
		return pLowerCase;
	}
	
	public ParserRule getLowerCaseRule() {
		return getLowerCaseAccess().getRule();
	}

	//Double returns ecore::EDouble:
	//	INT ("." INT ("e" | "E" "-"? INT)?)?;
	public DoubleElements getDoubleAccess() {
		return pDouble;
	}
	
	public ParserRule getDoubleRule() {
		return getDoubleAccess().getRule();
	}

	//terminal LOWER:
	//	"a".."z"+ ID?;
	public TerminalRule getLOWERRule() {
		return tLOWER;
	} 

	//terminal UPPER:
	//	"A".."Z"+ ID?;
	public TerminalRule getUPPERRule() {
		return tUPPER;
	} 

	//terminal INACTIVECOMPONENT:
	//	"InactiveComponent";
	public TerminalRule getINACTIVECOMPONENTRule() {
		return tINACTIVECOMPONENT;
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
